

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Wed Oct 30 13:31:32 2024

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F1454
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	psect	text32,local,class=CODE,merge=1,delta=2
    43                           	psect	text33,local,class=CODE,merge=1,delta=2
    44                           	psect	text34,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	psect	text36,local,class=CODE,merge=1,delta=2
    47                           	psect	text37,local,class=CODE,merge=1,delta=2
    48                           	psect	text38,local,class=CODE,merge=1,delta=2
    49                           	psect	text39,local,class=CODE,merge=1,delta=2
    50                           	psect	text40,local,class=CODE,merge=1,delta=2
    51                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    52                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.40
    56                           ; Generated 17/11/2021 GMT
    57                           ; 
    58                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution. Publication is not required when
    72                           ;        this file is used in an embedded application.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F1454 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000E                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001C                     	;# 
   115  008C                     	;# 
   116  008E                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009A                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018E                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0197                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019D                     	;# 
   147  019E                     	;# 
   148  019F                     	;# 
   149  020C                     	;# 
   150  0211                     	;# 
   151  0211                     	;# 
   152  0212                     	;# 
   153  0212                     	;# 
   154  0213                     	;# 
   155  0213                     	;# 
   156  0214                     	;# 
   157  0214                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0216                     	;# 
   162  0216                     	;# 
   163  0217                     	;# 
   164  0217                     	;# 
   165  0391                     	;# 
   166  0392                     	;# 
   167  0393                     	;# 
   168  039A                     	;# 
   169  039B                     	;# 
   170  0611                     	;# 
   171  0612                     	;# 
   172  0613                     	;# 
   173  0613                     	;# 
   174  0614                     	;# 
   175  0615                     	;# 
   176  0616                     	;# 
   177  0616                     	;# 
   178  0E8E                     	;# 
   179  0E8F                     	;# 
   180  0E90                     	;# 
   181  0E91                     	;# 
   182  0E92                     	;# 
   183  0E93                     	;# 
   184  0E94                     	;# 
   185  0E94                     	;# 
   186  0E95                     	;# 
   187  0E96                     	;# 
   188  0E97                     	;# 
   189  0E98                     	;# 
   190  0E99                     	;# 
   191  0E9A                     	;# 
   192  0E9B                     	;# 
   193  0E9C                     	;# 
   194  0E9D                     	;# 
   195  0E9E                     	;# 
   196  0E9F                     	;# 
   197  0FE4                     	;# 
   198  0FE5                     	;# 
   199  0FE6                     	;# 
   200  0FE7                     	;# 
   201  0FE8                     	;# 
   202  0FE9                     	;# 
   203  0FEA                     	;# 
   204  0FEB                     	;# 
   205  0FED                     	;# 
   206  0FEE                     	;# 
   207  0FEF                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000E                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0015                     	;# 
   225  0016                     	;# 
   226  0016                     	;# 
   227  0017                     	;# 
   228  0018                     	;# 
   229  0019                     	;# 
   230  001A                     	;# 
   231  001B                     	;# 
   232  001C                     	;# 
   233  008C                     	;# 
   234  008E                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  010C                     	;# 
   244  010E                     	;# 
   245  0116                     	;# 
   246  0117                     	;# 
   247  011D                     	;# 
   248  018C                     	;# 
   249  018E                     	;# 
   250  0191                     	;# 
   251  0191                     	;# 
   252  0192                     	;# 
   253  0193                     	;# 
   254  0193                     	;# 
   255  0194                     	;# 
   256  0195                     	;# 
   257  0196                     	;# 
   258  0197                     	;# 
   259  0199                     	;# 
   260  019A                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019C                     	;# 
   264  019D                     	;# 
   265  019E                     	;# 
   266  019F                     	;# 
   267  020C                     	;# 
   268  0211                     	;# 
   269  0211                     	;# 
   270  0212                     	;# 
   271  0212                     	;# 
   272  0213                     	;# 
   273  0213                     	;# 
   274  0214                     	;# 
   275  0214                     	;# 
   276  0215                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0216                     	;# 
   280  0216                     	;# 
   281  0217                     	;# 
   282  0217                     	;# 
   283  0391                     	;# 
   284  0392                     	;# 
   285  0393                     	;# 
   286  039A                     	;# 
   287  039B                     	;# 
   288  0611                     	;# 
   289  0612                     	;# 
   290  0613                     	;# 
   291  0613                     	;# 
   292  0614                     	;# 
   293  0615                     	;# 
   294  0616                     	;# 
   295  0616                     	;# 
   296  0E8E                     	;# 
   297  0E8F                     	;# 
   298  0E90                     	;# 
   299  0E91                     	;# 
   300  0E92                     	;# 
   301  0E93                     	;# 
   302  0E94                     	;# 
   303  0E94                     	;# 
   304  0E95                     	;# 
   305  0E96                     	;# 
   306  0E97                     	;# 
   307  0E98                     	;# 
   308  0E99                     	;# 
   309  0E9A                     	;# 
   310  0E9B                     	;# 
   311  0E9C                     	;# 
   312  0E9D                     	;# 
   313  0E9E                     	;# 
   314  0E9F                     	;# 
   315  0FE4                     	;# 
   316  0FE5                     	;# 
   317  0FE6                     	;# 
   318  0FE7                     	;# 
   319  0FE8                     	;# 
   320  0FE9                     	;# 
   321  0FEA                     	;# 
   322  0FEB                     	;# 
   323  0FED                     	;# 
   324  0FEE                     	;# 
   325  0FEF                     	;# 
   326  0000                     	;# 
   327  0001                     	;# 
   328  0002                     	;# 
   329  0003                     	;# 
   330  0004                     	;# 
   331  0005                     	;# 
   332  0006                     	;# 
   333  0007                     	;# 
   334  0008                     	;# 
   335  0009                     	;# 
   336  000A                     	;# 
   337  000B                     	;# 
   338  000C                     	;# 
   339  000E                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001C                     	;# 
   351  008C                     	;# 
   352  008E                     	;# 
   353  0091                     	;# 
   354  0092                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  010C                     	;# 
   362  010E                     	;# 
   363  0116                     	;# 
   364  0117                     	;# 
   365  011D                     	;# 
   366  018C                     	;# 
   367  018E                     	;# 
   368  0191                     	;# 
   369  0191                     	;# 
   370  0192                     	;# 
   371  0193                     	;# 
   372  0193                     	;# 
   373  0194                     	;# 
   374  0195                     	;# 
   375  0196                     	;# 
   376  0197                     	;# 
   377  0199                     	;# 
   378  019A                     	;# 
   379  019B                     	;# 
   380  019B                     	;# 
   381  019C                     	;# 
   382  019D                     	;# 
   383  019E                     	;# 
   384  019F                     	;# 
   385  020C                     	;# 
   386  0211                     	;# 
   387  0211                     	;# 
   388  0212                     	;# 
   389  0212                     	;# 
   390  0213                     	;# 
   391  0213                     	;# 
   392  0214                     	;# 
   393  0214                     	;# 
   394  0215                     	;# 
   395  0215                     	;# 
   396  0215                     	;# 
   397  0216                     	;# 
   398  0216                     	;# 
   399  0217                     	;# 
   400  0217                     	;# 
   401  0391                     	;# 
   402  0392                     	;# 
   403  0393                     	;# 
   404  039A                     	;# 
   405  039B                     	;# 
   406  0611                     	;# 
   407  0612                     	;# 
   408  0613                     	;# 
   409  0613                     	;# 
   410  0614                     	;# 
   411  0615                     	;# 
   412  0616                     	;# 
   413  0616                     	;# 
   414  0E8E                     	;# 
   415  0E8F                     	;# 
   416  0E90                     	;# 
   417  0E91                     	;# 
   418  0E92                     	;# 
   419  0E93                     	;# 
   420  0E94                     	;# 
   421  0E94                     	;# 
   422  0E95                     	;# 
   423  0E96                     	;# 
   424  0E97                     	;# 
   425  0E98                     	;# 
   426  0E99                     	;# 
   427  0E9A                     	;# 
   428  0E9B                     	;# 
   429  0E9C                     	;# 
   430  0E9D                     	;# 
   431  0E9E                     	;# 
   432  0E9F                     	;# 
   433  0FE4                     	;# 
   434  0FE5                     	;# 
   435  0FE6                     	;# 
   436  0FE7                     	;# 
   437  0FE8                     	;# 
   438  0FE9                     	;# 
   439  0FEA                     	;# 
   440  0FEB                     	;# 
   441  0FED                     	;# 
   442  0FEE                     	;# 
   443  0FEF                     	;# 
   444  0000                     	;# 
   445  0001                     	;# 
   446  0002                     	;# 
   447  0003                     	;# 
   448  0004                     	;# 
   449  0005                     	;# 
   450  0006                     	;# 
   451  0007                     	;# 
   452  0008                     	;# 
   453  0009                     	;# 
   454  000A                     	;# 
   455  000B                     	;# 
   456  000C                     	;# 
   457  000E                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0015                     	;# 
   461  0016                     	;# 
   462  0016                     	;# 
   463  0017                     	;# 
   464  0018                     	;# 
   465  0019                     	;# 
   466  001A                     	;# 
   467  001B                     	;# 
   468  001C                     	;# 
   469  008C                     	;# 
   470  008E                     	;# 
   471  0091                     	;# 
   472  0092                     	;# 
   473  0095                     	;# 
   474  0096                     	;# 
   475  0097                     	;# 
   476  0098                     	;# 
   477  0099                     	;# 
   478  009A                     	;# 
   479  010C                     	;# 
   480  010E                     	;# 
   481  0116                     	;# 
   482  0117                     	;# 
   483  011D                     	;# 
   484  018C                     	;# 
   485  018E                     	;# 
   486  0191                     	;# 
   487  0191                     	;# 
   488  0192                     	;# 
   489  0193                     	;# 
   490  0193                     	;# 
   491  0194                     	;# 
   492  0195                     	;# 
   493  0196                     	;# 
   494  0197                     	;# 
   495  0199                     	;# 
   496  019A                     	;# 
   497  019B                     	;# 
   498  019B                     	;# 
   499  019C                     	;# 
   500  019D                     	;# 
   501  019E                     	;# 
   502  019F                     	;# 
   503  020C                     	;# 
   504  0211                     	;# 
   505  0211                     	;# 
   506  0212                     	;# 
   507  0212                     	;# 
   508  0213                     	;# 
   509  0213                     	;# 
   510  0214                     	;# 
   511  0214                     	;# 
   512  0215                     	;# 
   513  0215                     	;# 
   514  0215                     	;# 
   515  0216                     	;# 
   516  0216                     	;# 
   517  0217                     	;# 
   518  0217                     	;# 
   519  0391                     	;# 
   520  0392                     	;# 
   521  0393                     	;# 
   522  039A                     	;# 
   523  039B                     	;# 
   524  0611                     	;# 
   525  0612                     	;# 
   526  0613                     	;# 
   527  0613                     	;# 
   528  0614                     	;# 
   529  0615                     	;# 
   530  0616                     	;# 
   531  0616                     	;# 
   532  0E8E                     	;# 
   533  0E8F                     	;# 
   534  0E90                     	;# 
   535  0E91                     	;# 
   536  0E92                     	;# 
   537  0E93                     	;# 
   538  0E94                     	;# 
   539  0E94                     	;# 
   540  0E95                     	;# 
   541  0E96                     	;# 
   542  0E97                     	;# 
   543  0E98                     	;# 
   544  0E99                     	;# 
   545  0E9A                     	;# 
   546  0E9B                     	;# 
   547  0E9C                     	;# 
   548  0E9D                     	;# 
   549  0E9E                     	;# 
   550  0E9F                     	;# 
   551  0FE4                     	;# 
   552  0FE5                     	;# 
   553  0FE6                     	;# 
   554  0FE7                     	;# 
   555  0FE8                     	;# 
   556  0FE9                     	;# 
   557  0FEA                     	;# 
   558  0FEB                     	;# 
   559  0FED                     	;# 
   560  0FEE                     	;# 
   561  0FEF                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0008                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000E                     	;# 
   576  0011                     	;# 
   577  0012                     	;# 
   578  0015                     	;# 
   579  0016                     	;# 
   580  0016                     	;# 
   581  0017                     	;# 
   582  0018                     	;# 
   583  0019                     	;# 
   584  001A                     	;# 
   585  001B                     	;# 
   586  001C                     	;# 
   587  008C                     	;# 
   588  008E                     	;# 
   589  0091                     	;# 
   590  0092                     	;# 
   591  0095                     	;# 
   592  0096                     	;# 
   593  0097                     	;# 
   594  0098                     	;# 
   595  0099                     	;# 
   596  009A                     	;# 
   597  010C                     	;# 
   598  010E                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  011D                     	;# 
   602  018C                     	;# 
   603  018E                     	;# 
   604  0191                     	;# 
   605  0191                     	;# 
   606  0192                     	;# 
   607  0193                     	;# 
   608  0193                     	;# 
   609  0194                     	;# 
   610  0195                     	;# 
   611  0196                     	;# 
   612  0197                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019C                     	;# 
   618  019D                     	;# 
   619  019E                     	;# 
   620  019F                     	;# 
   621  020C                     	;# 
   622  0211                     	;# 
   623  0211                     	;# 
   624  0212                     	;# 
   625  0212                     	;# 
   626  0213                     	;# 
   627  0213                     	;# 
   628  0214                     	;# 
   629  0214                     	;# 
   630  0215                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0216                     	;# 
   634  0216                     	;# 
   635  0217                     	;# 
   636  0217                     	;# 
   637  0391                     	;# 
   638  0392                     	;# 
   639  0393                     	;# 
   640  039A                     	;# 
   641  039B                     	;# 
   642  0611                     	;# 
   643  0612                     	;# 
   644  0613                     	;# 
   645  0613                     	;# 
   646  0614                     	;# 
   647  0615                     	;# 
   648  0616                     	;# 
   649  0616                     	;# 
   650  0E8E                     	;# 
   651  0E8F                     	;# 
   652  0E90                     	;# 
   653  0E91                     	;# 
   654  0E92                     	;# 
   655  0E93                     	;# 
   656  0E94                     	;# 
   657  0E94                     	;# 
   658  0E95                     	;# 
   659  0E96                     	;# 
   660  0E97                     	;# 
   661  0E98                     	;# 
   662  0E99                     	;# 
   663  0E9A                     	;# 
   664  0E9B                     	;# 
   665  0E9C                     	;# 
   666  0E9D                     	;# 
   667  0E9E                     	;# 
   668  0E9F                     	;# 
   669  0FE4                     	;# 
   670  0FE5                     	;# 
   671  0FE6                     	;# 
   672  0FE7                     	;# 
   673  0FE8                     	;# 
   674  0FE9                     	;# 
   675  0FEA                     	;# 
   676  0FEB                     	;# 
   677  0FED                     	;# 
   678  0FEE                     	;# 
   679  0FEF                     	;# 
   680  0000                     	;# 
   681  0001                     	;# 
   682  0002                     	;# 
   683  0003                     	;# 
   684  0004                     	;# 
   685  0005                     	;# 
   686  0006                     	;# 
   687  0007                     	;# 
   688  0008                     	;# 
   689  0009                     	;# 
   690  000A                     	;# 
   691  000B                     	;# 
   692  000C                     	;# 
   693  000E                     	;# 
   694  0011                     	;# 
   695  0012                     	;# 
   696  0015                     	;# 
   697  0016                     	;# 
   698  0016                     	;# 
   699  0017                     	;# 
   700  0018                     	;# 
   701  0019                     	;# 
   702  001A                     	;# 
   703  001B                     	;# 
   704  001C                     	;# 
   705  008C                     	;# 
   706  008E                     	;# 
   707  0091                     	;# 
   708  0092                     	;# 
   709  0095                     	;# 
   710  0096                     	;# 
   711  0097                     	;# 
   712  0098                     	;# 
   713  0099                     	;# 
   714  009A                     	;# 
   715  010C                     	;# 
   716  010E                     	;# 
   717  0116                     	;# 
   718  0117                     	;# 
   719  011D                     	;# 
   720  018C                     	;# 
   721  018E                     	;# 
   722  0191                     	;# 
   723  0191                     	;# 
   724  0192                     	;# 
   725  0193                     	;# 
   726  0193                     	;# 
   727  0194                     	;# 
   728  0195                     	;# 
   729  0196                     	;# 
   730  0197                     	;# 
   731  0199                     	;# 
   732  019A                     	;# 
   733  019B                     	;# 
   734  019B                     	;# 
   735  019C                     	;# 
   736  019D                     	;# 
   737  019E                     	;# 
   738  019F                     	;# 
   739  020C                     	;# 
   740  0211                     	;# 
   741  0211                     	;# 
   742  0212                     	;# 
   743  0212                     	;# 
   744  0213                     	;# 
   745  0213                     	;# 
   746  0214                     	;# 
   747  0214                     	;# 
   748  0215                     	;# 
   749  0215                     	;# 
   750  0215                     	;# 
   751  0216                     	;# 
   752  0216                     	;# 
   753  0217                     	;# 
   754  0217                     	;# 
   755  0391                     	;# 
   756  0392                     	;# 
   757  0393                     	;# 
   758  039A                     	;# 
   759  039B                     	;# 
   760  0611                     	;# 
   761  0612                     	;# 
   762  0613                     	;# 
   763  0613                     	;# 
   764  0614                     	;# 
   765  0615                     	;# 
   766  0616                     	;# 
   767  0616                     	;# 
   768  0E8E                     	;# 
   769  0E8F                     	;# 
   770  0E90                     	;# 
   771  0E91                     	;# 
   772  0E92                     	;# 
   773  0E93                     	;# 
   774  0E94                     	;# 
   775  0E94                     	;# 
   776  0E95                     	;# 
   777  0E96                     	;# 
   778  0E97                     	;# 
   779  0E98                     	;# 
   780  0E99                     	;# 
   781  0E9A                     	;# 
   782  0E9B                     	;# 
   783  0E9C                     	;# 
   784  0E9D                     	;# 
   785  0E9E                     	;# 
   786  0E9F                     	;# 
   787  0FE4                     	;# 
   788  0FE5                     	;# 
   789  0FE6                     	;# 
   790  0FE7                     	;# 
   791  0FE8                     	;# 
   792  0FE9                     	;# 
   793  0FEA                     	;# 
   794  0FEB                     	;# 
   795  0FED                     	;# 
   796  0FEE                     	;# 
   797  0FEF                     	;# 
   798                           
   799 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
   800  0000                     
   801 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
   802  0000                     
   803 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
   804  000B                     _INTCONbits	set	11
   805  0011                     _PIR1bits	set	17
   806  0091                     _PIE1bits	set	145
   807  0095                     _OPTION_REGbits	set	149
   808  008E                     _TRISC	set	142
   809  008C                     _TRISA	set	140
   810  0097                     _WDTCON	set	151
   811  0098                     _OSCTUNE	set	152
   812  0099                     _OSCCON	set	153
   813  04D6                     _PLLRDY	set	1238
   814  010C                     _LATAbits	set	268
   815  010E                     _LATCbits	set	270
   816  011D                     _APFCON	set	285
   817  010E                     _LATC	set	270
   818  010C                     _LATA	set	268
   819  0116                     _BORCON	set	278
   820  018C                     _ANSELA	set	396
   821  018E                     _ANSELC	set	398
   822  019A                     _TXREG	set	410
   823  0199                     _RCREG	set	409
   824  019D                     _RCSTAbits	set	413
   825  019E                     _TXSTAbits	set	414
   826  019C                     _SPBRGH	set	412
   827  019B                     _SPBRGL	set	411
   828  019E                     _TXSTA	set	414
   829  019D                     _RCSTA	set	413
   830  019F                     _BAUDCON	set	415
   831  020C                     _WPUA	set	524
   832  039B                     _ACTCON	set	923
   833                           
   834                           	psect	cinit
   835  0027                     start_initialization:	
   836                           ; #config settings
   837                           
   838  0027                     __initialization:
   839                           
   840                           ; Clear objects allocated to COMMON
   841  0027  01F5               	clrf	__pbssCOMMON& (0+127)
   842  0028  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   843  0029  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   844  002A  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   845                           
   846                           ; Clear objects allocated to BANK0
   847  002B  305B               	movlw	low __pbssBANK0
   848  002C  0084               	movwf	4
   849  002D  3000               	movlw	high __pbssBANK0
   850  002E  0085               	movwf	5
   851  002F  3010               	movlw	16
   852  0030  318C  2428  3180   	fcall	clear_ram0
   853  0033                     end_of_initialization:	
   854                           ;End of C runtime variable initialization code
   855                           
   856  0033                     __end_of__initialization:
   857  0033  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   858  0034  0020               	movlb	0
   859  0035  3185  2D16         	ljmp	_main	;jump to C main() function
   860                           
   861                           	psect	bssCOMMON
   862  0075                     __pbssCOMMON:
   863  0075                     _EUSART_FramingErrorHandler:
   864  0075                     	ds	2
   865  0077                     _UART_RX_in:
   866  0077                     	ds	1
   867  0078                     _eusartRxLastError:
   868  0078                     	ds	1
   869                           
   870                           	psect	bssBANK0
   871  005B                     __pbssBANK0:
   872  005B                     _EUSART_ErrorHandler:
   873  005B                     	ds	2
   874  005D                     _EUSART_OverrunErrorHandler:
   875  005D                     	ds	2
   876  005F                     _breath_counter_for_smallVent:
   877  005F                     	ds	1
   878  0060                     _Avthor_States:
   879  0060                     	ds	11
   880                           
   881                           	psect	clrtext
   882  0C28                     clear_ram0:	
   883                           ;	Called with FSR0 containing the base address, and
   884                           ;	WREG with the size to clear
   885                           
   886  0C28  0064               	clrwdt	;clear the watchdog before getting into this loop
   887  0C29                     clrloop0:
   888  0C29  0180               	clrf	0	;clear RAM location pointed to by FSR
   889  0C2A  3101               	addfsr 0,1
   890  0C2B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   891  0C2C  2C29               	goto	clrloop0	;have we reached the end yet?
   892  0C2D  3400               	retlw	0	;all done for this memory range, return
   893                           
   894                           	psect	cstackCOMMON
   895  0070                     __pcstackCOMMON:
   896  0070                     ?_stepperSleep:
   897  0070                     ?_EUSART_Write:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ?_PIN_MANAGER_Initialize:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ?_OSCILLATOR_Initialize:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ?_WDT_Initialize:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ?_EUSART_Initialize:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ?_topButtonTrigger:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ?_bottomButtonTrigger:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ?_calibrate:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ?_moveUntilZ:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ?_slowStepTest:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_inchUp:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_inchDown:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?_smallVent:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ?_basicStepperInstruction:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_setDirection:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_setStepSize:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_sendHapticCommand:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ?_initAvthorStates:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_get_stepper_instruction:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_get_INTERRUPT_BREAK_FLAG:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_get_motor_action:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_reset_motor_action:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_reset_motor_action_if_matches:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_get_complex_breaths_instructions_index:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_get_bellowsHasBeenInchedUpOrDownSinceVenting:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_set_INTERRUPT_BREAK_FLAG:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_Avthor_Uart_Instruction:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_SYSTEM_Initialize:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ?_EUSART_is_rx_ready:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ??_EUSART_is_rx_ready:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ?_EUSART_Read:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0070                     ??_EUSART_Read:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0070                     ?_INTERRUPT_InterruptManager:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ?_main:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ?i1_EUSART_Write:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ??i1_EUSART_Write:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ?i1_stepperSleep:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ??i1_stepperSleep:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     i1EUSART_Write@txData:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     i1stepperSleep@in:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017                           
  1018                           ; 1 bytes @ 0x0
  1019  0070                     	ds	1
  1020  0071                     ??_Avthor_Uart_Instruction:
  1021                           
  1022                           ; 1 bytes @ 0x1
  1023  0071                     	ds	2
  1024  0073                     Avthor_Uart_Instruction@instr:
  1025                           
  1026                           ; 1 bytes @ 0x3
  1027  0073                     	ds	1
  1028  0074                     ??_INTERRUPT_InterruptManager:
  1029                           
  1030                           ; 1 bytes @ 0x4
  1031  0074                     	ds	1
  1032  0075                     ??_stepperSleep:
  1033  0075                     ??_EUSART_Write:	
  1034                           ; 1 bytes @ 0x5
  1035                           
  1036  0075                     ??_PIN_MANAGER_Initialize:	
  1037                           ; 1 bytes @ 0x5
  1038                           
  1039  0075                     ??_OSCILLATOR_Initialize:	
  1040                           ; 1 bytes @ 0x5
  1041                           
  1042  0075                     ??_WDT_Initialize:	
  1043                           ; 1 bytes @ 0x5
  1044                           
  1045  0075                     ??_EUSART_Initialize:	
  1046                           ; 1 bytes @ 0x5
  1047                           
  1048  0075                     ??_EUSART_SetFramingErrorHandler:	
  1049                           ; 1 bytes @ 0x5
  1050                           
  1051  0075                     ??_EUSART_SetOverrunErrorHandler:	
  1052                           ; 1 bytes @ 0x5
  1053                           
  1054  0075                     ??_EUSART_SetErrorHandler:	
  1055                           ; 1 bytes @ 0x5
  1056                           
  1057  0075                     ??_calibrate:	
  1058                           ; 1 bytes @ 0x5
  1059                           
  1060  0075                     ??_moveUntilZ:	
  1061                           ; 1 bytes @ 0x5
  1062                           
  1063  0075                     ??_smallVent:	
  1064                           ; 1 bytes @ 0x5
  1065                           
  1066  0075                     ??_setDirection:	
  1067                           ; 1 bytes @ 0x5
  1068                           
  1069  0075                     ??_sendHapticCommand:	
  1070                           ; 1 bytes @ 0x5
  1071                           
  1072  0075                     ??_get_stepper_instruction:	
  1073                           ; 1 bytes @ 0x5
  1074                           
  1075  0075                     ??_get_INTERRUPT_BREAK_FLAG:	
  1076                           ; 1 bytes @ 0x5
  1077                           
  1078  0075                     ??_get_motor_action:	
  1079                           ; 1 bytes @ 0x5
  1080                           
  1081  0075                     ??_reset_motor_action_if_matches:	
  1082                           ; 1 bytes @ 0x5
  1083                           
  1084  0075                     ??_get_complex_breaths_instructions_index:	
  1085                           ; 1 bytes @ 0x5
  1086                           
  1087  0075                     ??_get_bellowsHasBeenInchedUpOrDownSinceVenting:	
  1088                           ; 1 bytes @ 0x5
  1089                           
  1090  0075                     ??_SYSTEM_Initialize:	
  1091                           ; 1 bytes @ 0x5
  1092                           
  1093  0075                     ??___wmul:	
  1094                           ; 1 bytes @ 0x5
  1095                           
  1096                           
  1097                           	psect	cstackBANK0
  1098  0020                     __pcstackBANK0:	
  1099                           ; 1 bytes @ 0x5
  1100                           
  1101  0020                     ?_EUSART_SetFramingErrorHandler:
  1102  0020                     ?_EUSART_SetOverrunErrorHandler:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0020                     ?_EUSART_SetErrorHandler:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0020                     ??_initAvthorStates:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0020                     ??_reset_motor_action:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0020                     ??_set_INTERRUPT_BREAK_FLAG:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0020                     get_complex_breaths_instructions_index@index:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0020                     EUSART_Write@txData:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0020                     stepperSleep@in:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0020                     setDirection@dir:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1133                           ; 2 bytes @ 0x0
  1134                           
  1135  0020                     EUSART_SetErrorHandler@interruptHandler:	
  1136                           ; 2 bytes @ 0x0
  1137                           
  1138                           
  1139                           ; 2 bytes @ 0x0
  1140  0020                     	ds	1
  1141  0021                     ??_setStepSize:
  1142  0021                     ?___wmul:	
  1143                           ; 1 bytes @ 0x1
  1144                           
  1145  0021                     reset_motor_action_if_matches@action:	
  1146                           ; 2 bytes @ 0x1
  1147                           
  1148  0021                     set_INTERRUPT_BREAK_FLAG@in:	
  1149                           ; 1 bytes @ 0x1
  1150                           
  1151  0021                     sendHapticCommand@input:	
  1152                           ; 1 bytes @ 0x1
  1153                           
  1154  0021                     initAvthorStates@i:	
  1155                           ; 1 bytes @ 0x1
  1156                           
  1157  0021                     ___wmul@multiplier:	
  1158                           ; 2 bytes @ 0x1
  1159                           
  1160                           
  1161                           ; 2 bytes @ 0x1
  1162  0021                     	ds	2
  1163  0023                     setStepSize@size:
  1164  0023                     ___wmul@multiplicand:	
  1165                           ; 1 bytes @ 0x3
  1166                           
  1167                           
  1168                           ; 2 bytes @ 0x3
  1169  0023                     	ds	1
  1170  0024                     ??_slowStepTest:
  1171  0024                     moveUntilZ@dir:	
  1172                           ; 1 bytes @ 0x4
  1173                           
  1174                           
  1175                           ; 1 bytes @ 0x4
  1176  0024                     	ds	1
  1177  0025                     ___wmul@product:
  1178                           
  1179                           ; 2 bytes @ 0x5
  1180  0025                     	ds	2
  1181  0027                     ?___awdiv:
  1182  0027                     ___awdiv@divisor:	
  1183                           ; 2 bytes @ 0x7
  1184                           
  1185                           
  1186                           ; 2 bytes @ 0x7
  1187  0027                     	ds	2
  1188  0029                     ___awdiv@dividend:
  1189                           
  1190                           ; 2 bytes @ 0x9
  1191  0029                     	ds	2
  1192  002B                     ??___awdiv:
  1193                           
  1194                           ; 1 bytes @ 0xB
  1195  002B                     	ds	1
  1196  002C                     ___awdiv@counter:
  1197                           
  1198                           ; 1 bytes @ 0xC
  1199  002C                     	ds	1
  1200  002D                     ___awdiv@sign:
  1201                           
  1202                           ; 1 bytes @ 0xD
  1203  002D                     	ds	1
  1204  002E                     ___awdiv@quotient:
  1205                           
  1206                           ; 2 bytes @ 0xE
  1207  002E                     	ds	2
  1208  0030                     ?_Step:
  1209  0030                     Step@num_steps1:	
  1210                           ; 1 bytes @ 0x10
  1211                           
  1212                           
  1213                           ; 2 bytes @ 0x10
  1214  0030                     	ds	2
  1215  0032                     Step@size1:
  1216                           
  1217                           ; 1 bytes @ 0x12
  1218  0032                     	ds	1
  1219  0033                     Step@num_steps2:
  1220                           
  1221                           ; 2 bytes @ 0x13
  1222  0033                     	ds	2
  1223  0035                     Step@size2:
  1224                           
  1225                           ; 1 bytes @ 0x15
  1226  0035                     	ds	1
  1227  0036                     Step@haptic_breaths:
  1228                           
  1229                           ; 1 bytes @ 0x16
  1230  0036                     	ds	1
  1231  0037                     ??_Step:
  1232                           
  1233                           ; 1 bytes @ 0x17
  1234  0037                     	ds	1
  1235  0038                     Step@i:
  1236                           
  1237                           ; 2 bytes @ 0x18
  1238  0038                     	ds	2
  1239  003A                     Step@i_616:
  1240                           
  1241                           ; 2 bytes @ 0x1A
  1242  003A                     	ds	2
  1243  003C                     Step@dir:
  1244                           
  1245                           ; 1 bytes @ 0x1C
  1246  003C                     	ds	1
  1247  003D                     ??_topButtonTrigger:
  1248  003D                     ??_bottomButtonTrigger:	
  1249                           ; 1 bytes @ 0x1D
  1250                           
  1251  003D                     ??_inchUp:	
  1252                           ; 1 bytes @ 0x1D
  1253                           
  1254  003D                     ??_inchDown:	
  1255                           ; 1 bytes @ 0x1D
  1256                           
  1257  003D                     ??_basicStepperInstruction:	
  1258                           ; 1 bytes @ 0x1D
  1259                           
  1260                           
  1261                           ; 1 bytes @ 0x1D
  1262  003D                     	ds	3
  1263  0040                     topButtonTrigger@rotations:
  1264  0040                     bottomButtonTrigger@rotations:	
  1265                           ; 1 bytes @ 0x20
  1266                           
  1267                           
  1268                           ; 1 bytes @ 0x20
  1269  0040                     	ds	1
  1270  0041                     basicStepperInstruction@charIn:
  1271                           
  1272                           ; 1 bytes @ 0x21
  1273  0041                     	ds	1
  1274  0042                     _basicStepperInstruction$1121:
  1275                           
  1276                           ; 2 bytes @ 0x22
  1277  0042                     	ds	2
  1278  0044                     _basicStepperInstruction$1122:
  1279                           
  1280                           ; 2 bytes @ 0x24
  1281  0044                     	ds	2
  1282  0046                     basicStepperInstruction@stepSize1:
  1283                           
  1284                           ; 1 bytes @ 0x26
  1285  0046                     	ds	1
  1286  0047                     basicStepperInstruction@stepSize2:
  1287                           
  1288                           ; 1 bytes @ 0x27
  1289  0047                     	ds	1
  1290  0048                     basicStepperInstruction@stepMultiplier1:
  1291                           
  1292                           ; 1 bytes @ 0x28
  1293  0048                     	ds	1
  1294  0049                     basicStepperInstruction@stepMultiplier2:
  1295                           
  1296                           ; 1 bytes @ 0x29
  1297  0049                     	ds	1
  1298  004A                     basicStepperInstruction@numRotations:
  1299                           
  1300                           ; 1 bytes @ 0x2A
  1301  004A                     	ds	1
  1302  004B                     ??_main:
  1303                           
  1304                           ; 1 bytes @ 0x2B
  1305  004B                     	ds	4
  1306  004F                     main@numSteps1:
  1307                           
  1308                           ; 2 bytes @ 0x2F
  1309  004F                     	ds	2
  1310  0051                     main@numSteps2:
  1311                           
  1312                           ; 2 bytes @ 0x31
  1313  0051                     	ds	2
  1314  0053                     _main$1120:
  1315                           
  1316                           ; 2 bytes @ 0x33
  1317  0053                     	ds	2
  1318  0055                     main@steps_multiplier_1:
  1319                           
  1320                           ; 2 bytes @ 0x35
  1321  0055                     	ds	2
  1322  0057                     main@steps_multiplier_2:
  1323                           
  1324                           ; 2 bytes @ 0x37
  1325  0057                     	ds	2
  1326  0059                     main@step_size_in_1:
  1327                           
  1328                           ; 1 bytes @ 0x39
  1329  0059                     	ds	1
  1330  005A                     main@step_size_in_2:
  1331                           
  1332                           ; 1 bytes @ 0x3A
  1333  005A                     	ds	1
  1334                           
  1335                           	psect	maintext
  1336  0516                     __pmaintext:	
  1337 ;;
  1338 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1339 ;;
  1340 ;; *************** function _main *****************
  1341 ;; Defined at:
  1342 ;;		line 85 in file "main.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  steps_multip    2   55[BANK0 ] unsigned short 
  1347 ;;  steps_multip    2   53[BANK0 ] unsigned short 
  1348 ;;  numSteps2       2   49[BANK0 ] unsigned short 
  1349 ;;  numSteps1       2   47[BANK0 ] unsigned short 
  1350 ;;  step_size_in    1   58[BANK0 ] enum E2181
  1351 ;;  step_size_in    1   57[BANK0 ] enum E2181
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : B1F/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1362 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1363 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1364 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1365 ;;Total ram usage:       16 bytes
  1366 ;; Hardware stack levels required when called: 7
  1367 ;; This function calls:
  1368 ;;		_EUSART_Write
  1369 ;;		_SYSTEM_Initialize
  1370 ;;		_Step
  1371 ;;		___wmul
  1372 ;;		_basicStepperInstruction
  1373 ;;		_bottomButtonTrigger
  1374 ;;		_calibrate
  1375 ;;		_get_bellowsHasBeenInchedUpOrDownSinceVenting
  1376 ;;		_get_complex_breaths_instructions_index
  1377 ;;		_get_motor_action
  1378 ;;		_get_stepper_instruction
  1379 ;;		_inchDown
  1380 ;;		_inchUp
  1381 ;;		_initAvthorStates
  1382 ;;		_moveUntilZ
  1383 ;;		_reset_motor_action
  1384 ;;		_reset_motor_action_if_matches
  1385 ;;		_set_INTERRUPT_BREAK_FLAG
  1386 ;;		_slowStepTest
  1387 ;;		_smallVent
  1388 ;;		_stepperSleep
  1389 ;;		_topButtonTrigger
  1390 ;; This function is called by:
  1391 ;;		Startup code after reset
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395  0516                     _main:	
  1396                           ;psect for function _main
  1397                           
  1398  0516                     l3447:	
  1399                           ;incstack = 0
  1400                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1401                           
  1402                           
  1403                           ;main.c: 88:     SYSTEM_Initialize();
  1404  0516  318C  2469  3185   	fcall	_SYSTEM_Initialize
  1405  0519                     l3449:
  1406                           
  1407                           ;main.c: 90:     initAvthorStates();
  1408  0519  318D  2551  3185   	fcall	_initAvthorStates
  1409  051C                     l3451:
  1410                           
  1411                           ;main.c: 92:     stepperSleep(1);
  1412  051C  3001               	movlw	1
  1413  051D  318C  2483  3185   	fcall	_stepperSleep
  1414  0520                     l3453:
  1415                           
  1416                           ;main.c: 95:     PIE1bits.RCIE = 1;
  1417  0520  0021               	movlb	1	; select bank1
  1418  0521  1691               	bsf	17,5	;volatile
  1419  0522                     l3455:
  1420                           
  1421                           ;main.c: 96:     PIR1bits.RCIF = 0;
  1422  0522  0020               	movlb	0	; select bank0
  1423  0523  1291               	bcf	17,5	;volatile
  1424  0524                     l3457:
  1425                           
  1426                           ;main.c: 102:     (INTCONbits.GIE = 1);
  1427  0524  178B               	bsf	11,7	;volatile
  1428  0525                     l3459:
  1429                           
  1430                           ;main.c: 105:     (INTCONbits.PEIE = 1);
  1431  0525  170B               	bsf	11,6	;volatile
  1432  0526  2F3D               	goto	l3607
  1433  0527                     l3461:
  1434                           
  1435                           ;main.c: 119:                 set_INTERRUPT_BREAK_FLAG(0);
  1436  0527  3000               	movlw	0
  1437  0528  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1438  052B                     l3463:
  1439                           
  1440                           ;main.c: 120:                 topButtonTrigger();
  1441  052B  318D  25DF  3185   	fcall	_topButtonTrigger
  1442  052E                     l3465:
  1443                           
  1444                           ;main.c: 121:                 reset_motor_action();
  1445  052E  318C  2422  3185   	fcall	_reset_motor_action
  1446  0531                     l3467:
  1447                           
  1448                           ;main.c: 122:                 EUSART_Write(0xFE);
  1449  0531  30FE               	movlw	254
  1450  0532  318C  2447  3185   	fcall	_EUSART_Write
  1451                           
  1452                           ;main.c: 123:                 break;
  1453  0535  2F3D               	goto	l3607
  1454  0536                     l3469:
  1455                           
  1456                           ;main.c: 126:                 set_INTERRUPT_BREAK_FLAG(0);
  1457  0536  3000               	movlw	0
  1458  0537  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1459  053A                     l3471:
  1460                           
  1461                           ;main.c: 127:                 bottomButtonTrigger();
  1462  053A  318D  25AA  3185   	fcall	_bottomButtonTrigger
  1463  053D                     l3473:
  1464                           
  1465                           ;main.c: 128:                 reset_motor_action();
  1466  053D  318C  2422  3185   	fcall	_reset_motor_action
  1467  0540                     l3475:
  1468                           
  1469                           ;main.c: 129:                 EUSART_Write(0xFE);
  1470  0540  30FE               	movlw	254
  1471  0541  318C  2447  3185   	fcall	_EUSART_Write
  1472                           
  1473                           ;main.c: 130:                 break;
  1474  0544  2F3D               	goto	l3607
  1475  0545                     l3477:
  1476                           
  1477                           ;main.c: 132:                 EUSART_Write(0xFA);
  1478  0545  30FA               	movlw	250
  1479  0546  318C  2447  3185   	fcall	_EUSART_Write
  1480                           
  1481                           ;main.c: 133:                 set_INTERRUPT_BREAK_FLAG(0);
  1482  0549  3000               	movlw	0
  1483  054A  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1484  054D                     l3479:
  1485                           
  1486                           ;main.c: 134:                 calibrate();
  1487  054D  318D  257C  3185   	fcall	_calibrate
  1488  0550                     l3481:
  1489                           
  1490                           ;main.c: 135:                 reset_motor_action_if_matches(calibrating);
  1491  0550  3003               	movlw	3
  1492  0551  318C  245D  3185   	fcall	_reset_motor_action_if_matches
  1493                           
  1494                           ;main.c: 138:                 break;
  1495  0554  2F3D               	goto	l3607
  1496  0555                     l3483:
  1497                           
  1498                           ;main.c: 140:                 set_INTERRUPT_BREAK_FLAG(0);
  1499  0555  3000               	movlw	0
  1500  0556  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1501  0559                     l3485:
  1502                           
  1503                           ;main.c: 141:                 moveUntilZ(UP);
  1504  0559  3000               	movlw	0
  1505  055A  318D  2528  3185   	fcall	_moveUntilZ
  1506  055D                     l3487:
  1507                           
  1508                           ;main.c: 142:                 reset_motor_action_if_matches(moveUntilZUp);
  1509  055D  300A               	movlw	10
  1510  055E  318C  245D  3185   	fcall	_reset_motor_action_if_matches
  1511                           
  1512                           ;main.c: 143:                 break;
  1513  0561  2F3D               	goto	l3607
  1514  0562                     l3489:
  1515                           
  1516                           ;main.c: 145:                 set_INTERRUPT_BREAK_FLAG(0);
  1517  0562  3000               	movlw	0
  1518  0563  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1519  0566                     l3491:
  1520                           
  1521                           ;main.c: 146:                 moveUntilZ(DOWN);
  1522  0566  3001               	movlw	1
  1523  0567  318D  2528  3185   	fcall	_moveUntilZ
  1524  056A                     l3493:
  1525                           
  1526                           ;main.c: 147:                 reset_motor_action_if_matches(moveUntilZDown);
  1527  056A  300B               	movlw	11
  1528  056B  318C  245D  3185   	fcall	_reset_motor_action_if_matches
  1529                           
  1530                           ;main.c: 148:                 break;
  1531  056E  2F3D               	goto	l3607
  1532  056F                     l3495:
  1533                           
  1534                           ;main.c: 150:                 set_INTERRUPT_BREAK_FLAG(0);
  1535  056F  3000               	movlw	0
  1536  0570  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1537  0573                     l3497:
  1538                           
  1539                           ;main.c: 151:                 slowStepTest();
  1540  0573  318E  2614  3185   	fcall	_slowStepTest
  1541  0576                     l3499:
  1542                           
  1543                           ;main.c: 152:                 reset_motor_action_if_matches(slowStepTestAction);
  1544  0576  3009               	movlw	9
  1545  0577  318C  245D  3185   	fcall	_reset_motor_action_if_matches
  1546                           
  1547                           ;main.c: 153:                 break;
  1548  057A  2F3D               	goto	l3607
  1549  057B                     l3501:
  1550                           
  1551                           ;main.c: 155:                 EUSART_Write(0xFA);
  1552  057B  30FA               	movlw	250
  1553  057C  318C  2447  3185   	fcall	_EUSART_Write
  1554                           
  1555                           ;main.c: 156:                 set_INTERRUPT_BREAK_FLAG(0);
  1556  057F  3000               	movlw	0
  1557  0580  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1558  0583                     l3503:
  1559                           
  1560                           ;main.c: 157:                 inchUp();
  1561  0583  318C  24D1  3185   	fcall	_inchUp
  1562  0586                     l3505:
  1563                           
  1564                           ;main.c: 158:                 reset_motor_action_if_matches(inchUpAction);
  1565  0586  3004               	movlw	4
  1566  0587  318C  245D  3185   	fcall	_reset_motor_action_if_matches
  1567  058A                     l3507:
  1568                           
  1569                           ;main.c: 159:                 EUSART_Write(0xFB);
  1570  058A  30FB               	movlw	251
  1571  058B  318C  2447  3185   	fcall	_EUSART_Write
  1572                           
  1573                           ;main.c: 160:                 break;
  1574  058E  2F3D               	goto	l3607
  1575  058F                     l3509:
  1576                           
  1577                           ;main.c: 162:                 EUSART_Write(0xFA);
  1578  058F  30FA               	movlw	250
  1579  0590  318C  2447  3185   	fcall	_EUSART_Write
  1580                           
  1581                           ;main.c: 163:                 set_INTERRUPT_BREAK_FLAG(0);
  1582  0593  3000               	movlw	0
  1583  0594  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1584  0597                     l3511:
  1585                           
  1586                           ;main.c: 164:                 inchDown();
  1587  0597  318C  24BE  3185   	fcall	_inchDown
  1588  059A                     l3513:
  1589                           
  1590                           ;main.c: 165:                 reset_motor_action_if_matches(inchDownAction);
  1591  059A  3005               	movlw	5
  1592  059B  318C  245D  3185   	fcall	_reset_motor_action_if_matches
  1593  059E                     l3515:
  1594                           
  1595                           ;main.c: 166:                 EUSART_Write(0xFB);
  1596  059E  30FB               	movlw	251
  1597  059F  318C  2447  3185   	fcall	_EUSART_Write
  1598                           
  1599                           ;main.c: 167:                 break;
  1600  05A2  2F3D               	goto	l3607
  1601  05A3                     l3517:
  1602                           
  1603                           ;main.c: 173:                 set_INTERRUPT_BREAK_FLAG(0);
  1604  05A3  3000               	movlw	0
  1605  05A4  318C  242E  3185   	fcall	_set_INTERRUPT_BREAK_FLAG
  1606  05A7                     l3519:
  1607  05A7                     l3521:
  1608  05A7                     l3523:
  1609  05A7                     l3525:
  1610                           
  1611                           ;main.c: 182:                 switch(get_complex_breaths_instructions_index(1)){
  1612  05A7  2DD9               	goto	l3547
  1613  05A8                     l3527:
  1614                           
  1615                           ;main.c: 185:                         step_size_in_1 = NullStep;
  1616  05A8  01D9               	clrf	main@step_size_in_1
  1617  05A9                     l3529:
  1618                           
  1619                           ;main.c: 186:                         steps_multiplier_1 = 16;
  1620  05A9  3010               	movlw	16
  1621  05AA  00D5               	movwf	main@steps_multiplier_1
  1622  05AB  3000               	movlw	0
  1623  05AC  00D6               	movwf	main@steps_multiplier_1+1
  1624                           
  1625                           ;main.c: 187:                         break;
  1626  05AD  2E39               	goto	l3569
  1627  05AE                     l311:	
  1628                           ;main.c: 189:                     case '1': {
  1629                           
  1630                           
  1631                           ;main.c: 190:                         step_size_in_1 = Full;
  1632  05AE  01D9               	clrf	main@step_size_in_1
  1633  05AF  0AD9               	incf	main@step_size_in_1,f
  1634  05B0                     l3531:
  1635                           
  1636                           ;main.c: 191:                         steps_multiplier_1 = 1;
  1637  05B0  3001               	movlw	1
  1638  05B1  00D5               	movwf	main@steps_multiplier_1
  1639  05B2  3000               	movlw	0
  1640  05B3  00D6               	movwf	main@steps_multiplier_1+1
  1641                           
  1642                           ;main.c: 192:                         break;
  1643  05B4  2E39               	goto	l3569
  1644  05B5                     l3533:
  1645                           
  1646                           ;main.c: 195:                         step_size_in_1 = Half;
  1647  05B5  3002               	movlw	2
  1648  05B6  00CB               	movwf	??_main
  1649  05B7  084B               	movf	??_main,w
  1650  05B8  00D9               	movwf	main@step_size_in_1
  1651                           
  1652                           ;main.c: 196:                         steps_multiplier_1 = 2;
  1653  05B9  3002               	movlw	2
  1654  05BA  00D5               	movwf	main@steps_multiplier_1
  1655  05BB  3000               	movlw	0
  1656  05BC  00D6               	movwf	main@steps_multiplier_1+1
  1657                           
  1658                           ;main.c: 197:                         break;
  1659  05BD  2E39               	goto	l3569
  1660  05BE                     l3535:
  1661                           
  1662                           ;main.c: 200:                         step_size_in_1 = Quarter;
  1663  05BE  3004               	movlw	4
  1664  05BF  00CB               	movwf	??_main
  1665  05C0  084B               	movf	??_main,w
  1666  05C1  00D9               	movwf	main@step_size_in_1
  1667                           
  1668                           ;main.c: 201:                         steps_multiplier_1 = 4;
  1669  05C2  3004               	movlw	4
  1670  05C3  00D5               	movwf	main@steps_multiplier_1
  1671  05C4  3000               	movlw	0
  1672  05C5  00D6               	movwf	main@steps_multiplier_1+1
  1673                           
  1674                           ;main.c: 202:                         break;
  1675  05C6  2E39               	goto	l3569
  1676  05C7                     l3537:
  1677                           
  1678                           ;main.c: 205:                         step_size_in_1 = Eighth;
  1679  05C7  3008               	movlw	8
  1680  05C8  00CB               	movwf	??_main
  1681  05C9  084B               	movf	??_main,w
  1682  05CA  00D9               	movwf	main@step_size_in_1
  1683                           
  1684                           ;main.c: 206:                         steps_multiplier_1 = 8;
  1685  05CB  3008               	movlw	8
  1686  05CC  00D5               	movwf	main@steps_multiplier_1
  1687  05CD  3000               	movlw	0
  1688  05CE  00D6               	movwf	main@steps_multiplier_1+1
  1689                           
  1690                           ;main.c: 207:                         break;
  1691  05CF  2E39               	goto	l3569
  1692  05D0                     l3539:
  1693                           
  1694                           ;main.c: 209:                         step_size_in_1 = Sixteenth;
  1695  05D0  3010               	movlw	16
  1696  05D1  00CB               	movwf	??_main
  1697  05D2  084B               	movf	??_main,w
  1698  05D3  00D9               	movwf	main@step_size_in_1
  1699                           
  1700                           ;main.c: 210:                         steps_multiplier_1 = 16;
  1701  05D4  3010               	movlw	16
  1702  05D5  00D5               	movwf	main@steps_multiplier_1
  1703  05D6  3000               	movlw	0
  1704  05D7  00D6               	movwf	main@steps_multiplier_1+1
  1705                           
  1706                           ;main.c: 211:                         break;
  1707  05D8  2E39               	goto	l3569
  1708  05D9                     l3547:
  1709  05D9  3001               	movlw	1
  1710  05DA  318C  2435  3185   	fcall	_get_complex_breaths_instructions_index
  1711  05DD  0020               	movlb	0	; select bank0
  1712  05DE  00CB               	movwf	??_main
  1713  05DF  01CC               	clrf	??_main+1
  1714                           
  1715                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1716                           ; Switch size 1, requested type "simple"
  1717                           ; Number of cases is 1, Range of values is 0 to 0
  1718                           ; switch strategies available:
  1719                           ; Name         Instructions Cycles
  1720                           ; simple_byte            4     3 (average)
  1721                           ; direct_byte            8     6 (fixed)
  1722                           ; jumptable            260     6 (fixed)
  1723                           ;	Chosen strategy is simple_byte
  1724  05E0  084C               	movf	??_main+1,w
  1725  05E1  3A00               	xorlw	0	; case 0
  1726  05E2  1903               	skipnz
  1727  05E3  2DE5               	goto	l3819
  1728  05E4  2DA8               	goto	l3527
  1729  05E5                     l3819:
  1730                           
  1731                           ; Switch size 1, requested type "simple"
  1732                           ; Number of cases is 11, Range of values is 0 to 56
  1733                           ; switch strategies available:
  1734                           ; Name         Instructions Cycles
  1735                           ; simple_byte           34    18 (average)
  1736                           ; direct_byte          120     6 (fixed)
  1737                           ; jumptable            260     6 (fixed)
  1738                           ;	Chosen strategy is simple_byte
  1739  05E5  084B               	movf	??_main,w
  1740  05E6  3A00               	xorlw	0	; case 0
  1741  05E7  1903               	skipnz
  1742  05E8  2DA8               	goto	l3527
  1743  05E9  3A01               	xorlw	1	; case 1
  1744  05EA  1903               	skipnz
  1745  05EB  2DAE               	goto	l311
  1746  05EC  3A03               	xorlw	3	; case 2
  1747  05ED  1903               	skipnz
  1748  05EE  2DB5               	goto	l3533
  1749  05EF  3A06               	xorlw	6	; case 4
  1750  05F0  1903               	skipnz
  1751  05F1  2DBE               	goto	l3535
  1752  05F2  3A0C               	xorlw	12	; case 8
  1753  05F3  1903               	skipnz
  1754  05F4  2DC7               	goto	l3537
  1755  05F5  3A18               	xorlw	24	; case 16
  1756  05F6  1903               	skipnz
  1757  05F7  2DD0               	goto	l3539
  1758  05F8  3A20               	xorlw	32	; case 48
  1759  05F9  1903               	skipnz
  1760  05FA  2DA8               	goto	l3527
  1761  05FB  3A01               	xorlw	1	; case 49
  1762  05FC  1903               	skipnz
  1763  05FD  2DAE               	goto	l311
  1764  05FE  3A03               	xorlw	3	; case 50
  1765  05FF  1903               	skipnz
  1766  0600  2DB5               	goto	l3533
  1767  0601  3A06               	xorlw	6	; case 52
  1768  0602  1903               	skipnz
  1769  0603  2DBE               	goto	l3535
  1770  0604  3A0C               	xorlw	12	; case 56
  1771  0605  1903               	skipnz
  1772  0606  2DC7               	goto	l3537
  1773  0607  2DA8               	goto	l3527
  1774  0608                     l3549:
  1775                           
  1776                           ;main.c: 222:                         step_size_in_2 = NullStep;
  1777  0608  01DA               	clrf	main@step_size_in_2
  1778  0609                     l3551:
  1779                           
  1780                           ;main.c: 223:                         steps_multiplier_2 = 16;
  1781  0609  3010               	movlw	16
  1782  060A  00D7               	movwf	main@steps_multiplier_2
  1783  060B  3000               	movlw	0
  1784  060C  00D8               	movwf	main@steps_multiplier_2+1
  1785                           
  1786                           ;main.c: 224:                         break;
  1787  060D  2E68               	goto	l3571
  1788  060E                     l325:	
  1789                           ;main.c: 226:                     case '1': {
  1790                           
  1791                           
  1792                           ;main.c: 227:                         step_size_in_2 = Full;
  1793  060E  01DA               	clrf	main@step_size_in_2
  1794  060F  0ADA               	incf	main@step_size_in_2,f
  1795  0610                     l3553:
  1796                           
  1797                           ;main.c: 228:                         steps_multiplier_2 = 1;
  1798  0610  3001               	movlw	1
  1799  0611  00D7               	movwf	main@steps_multiplier_2
  1800  0612  3000               	movlw	0
  1801  0613  00D8               	movwf	main@steps_multiplier_2+1
  1802                           
  1803                           ;main.c: 229:                         break;
  1804  0614  2E68               	goto	l3571
  1805  0615                     l3555:
  1806                           
  1807                           ;main.c: 232:                         step_size_in_2 = Half;
  1808  0615  3002               	movlw	2
  1809  0616  00CB               	movwf	??_main
  1810  0617  084B               	movf	??_main,w
  1811  0618  00DA               	movwf	main@step_size_in_2
  1812                           
  1813                           ;main.c: 233:                         steps_multiplier_2 = 2;
  1814  0619  3002               	movlw	2
  1815  061A  00D7               	movwf	main@steps_multiplier_2
  1816  061B  3000               	movlw	0
  1817  061C  00D8               	movwf	main@steps_multiplier_2+1
  1818                           
  1819                           ;main.c: 234:                         break;
  1820  061D  2E68               	goto	l3571
  1821  061E                     l3557:
  1822                           
  1823                           ;main.c: 237:                         step_size_in_2 = Quarter;
  1824  061E  3004               	movlw	4
  1825  061F  00CB               	movwf	??_main
  1826  0620  084B               	movf	??_main,w
  1827  0621  00DA               	movwf	main@step_size_in_2
  1828                           
  1829                           ;main.c: 238:                         steps_multiplier_2 = 4;
  1830  0622  3004               	movlw	4
  1831  0623  00D7               	movwf	main@steps_multiplier_2
  1832  0624  3000               	movlw	0
  1833  0625  00D8               	movwf	main@steps_multiplier_2+1
  1834                           
  1835                           ;main.c: 239:                         break;
  1836  0626  2E68               	goto	l3571
  1837  0627                     l3559:
  1838                           
  1839                           ;main.c: 242:                         step_size_in_2 = Eighth;
  1840  0627  3008               	movlw	8
  1841  0628  00CB               	movwf	??_main
  1842  0629  084B               	movf	??_main,w
  1843  062A  00DA               	movwf	main@step_size_in_2
  1844                           
  1845                           ;main.c: 243:                         steps_multiplier_2 = 8;
  1846  062B  3008               	movlw	8
  1847  062C  00D7               	movwf	main@steps_multiplier_2
  1848  062D  3000               	movlw	0
  1849  062E  00D8               	movwf	main@steps_multiplier_2+1
  1850                           
  1851                           ;main.c: 244:                         break;
  1852  062F  2E68               	goto	l3571
  1853  0630                     l3561:
  1854                           
  1855                           ;main.c: 246:                         step_size_in_2 = Sixteenth;
  1856  0630  3010               	movlw	16
  1857  0631  00CB               	movwf	??_main
  1858  0632  084B               	movf	??_main,w
  1859  0633  00DA               	movwf	main@step_size_in_2
  1860                           
  1861                           ;main.c: 247:                         steps_multiplier_2 = 16;
  1862  0634  3010               	movlw	16
  1863  0635  00D7               	movwf	main@steps_multiplier_2
  1864  0636  3000               	movlw	0
  1865  0637  00D8               	movwf	main@steps_multiplier_2+1
  1866                           
  1867                           ;main.c: 248:                         break;
  1868  0638  2E68               	goto	l3571
  1869  0639                     l3569:
  1870  0639  3003               	movlw	3
  1871  063A  318C  2435  3185   	fcall	_get_complex_breaths_instructions_index
  1872  063D  0020               	movlb	0	; select bank0
  1873  063E  00CB               	movwf	??_main
  1874  063F  01CC               	clrf	??_main+1
  1875                           
  1876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1877                           ; Switch size 1, requested type "simple"
  1878                           ; Number of cases is 1, Range of values is 0 to 0
  1879                           ; switch strategies available:
  1880                           ; Name         Instructions Cycles
  1881                           ; simple_byte            4     3 (average)
  1882                           ; direct_byte            8     6 (fixed)
  1883                           ; jumptable            260     6 (fixed)
  1884                           ;	Chosen strategy is simple_byte
  1885  0640  084C               	movf	??_main+1,w
  1886  0641  3A00               	xorlw	0	; case 0
  1887  0642  1903               	skipnz
  1888  0643  2E45               	goto	l3821
  1889  0644  2E08               	goto	l3549
  1890  0645                     l3821:
  1891                           
  1892                           ; Switch size 1, requested type "simple"
  1893                           ; Number of cases is 11, Range of values is 0 to 56
  1894                           ; switch strategies available:
  1895                           ; Name         Instructions Cycles
  1896                           ; simple_byte           34    18 (average)
  1897                           ; direct_byte          120     6 (fixed)
  1898                           ; jumptable            260     6 (fixed)
  1899                           ;	Chosen strategy is simple_byte
  1900  0645  084B               	movf	??_main,w
  1901  0646  3A00               	xorlw	0	; case 0
  1902  0647  1903               	skipnz
  1903  0648  2E08               	goto	l3549
  1904  0649  3A01               	xorlw	1	; case 1
  1905  064A  1903               	skipnz
  1906  064B  2E0E               	goto	l325
  1907  064C  3A03               	xorlw	3	; case 2
  1908  064D  1903               	skipnz
  1909  064E  2E15               	goto	l3555
  1910  064F  3A06               	xorlw	6	; case 4
  1911  0650  1903               	skipnz
  1912  0651  2E1E               	goto	l3557
  1913  0652  3A0C               	xorlw	12	; case 8
  1914  0653  1903               	skipnz
  1915  0654  2E27               	goto	l3559
  1916  0655  3A18               	xorlw	24	; case 16
  1917  0656  1903               	skipnz
  1918  0657  2E30               	goto	l3561
  1919  0658  3A20               	xorlw	32	; case 48
  1920  0659  1903               	skipnz
  1921  065A  2E08               	goto	l3549
  1922  065B  3A01               	xorlw	1	; case 49
  1923  065C  1903               	skipnz
  1924  065D  2E0E               	goto	l325
  1925  065E  3A03               	xorlw	3	; case 50
  1926  065F  1903               	skipnz
  1927  0660  2E15               	goto	l3555
  1928  0661  3A06               	xorlw	6	; case 52
  1929  0662  1903               	skipnz
  1930  0663  2E1E               	goto	l3557
  1931  0664  3A0C               	xorlw	12	; case 56
  1932  0665  1903               	skipnz
  1933  0666  2E27               	goto	l3559
  1934  0667  2E08               	goto	l3549
  1935  0668                     l3571:
  1936                           
  1937                           ;main.c: 258:                 uint16_t numSteps1 = ((uint16_t)get_complex_breaths_instru
      +                          ctions_index(2)*(uint16_t)steps_multiplier_1*(uint16_t)get_complex_breaths_instructions_
      +                          index(0));
  1938  0668  3002               	movlw	2
  1939  0669  318C  2435  3185   	fcall	_get_complex_breaths_instructions_index
  1940  066C  0020               	movlb	0	; select bank0
  1941  066D  00CB               	movwf	??_main
  1942  066E  01CC               	clrf	??_main+1
  1943  066F  084B               	movf	??_main,w
  1944  0670  00A1               	movwf	___wmul@multiplier
  1945  0671  084C               	movf	??_main+1,w
  1946  0672  00A2               	movwf	___wmul@multiplier+1
  1947  0673  3000               	movlw	0
  1948  0674  318C  2435  3185   	fcall	_get_complex_breaths_instructions_index
  1949  0677  0020               	movlb	0	; select bank0
  1950  0678  00CD               	movwf	??_main+2
  1951  0679  01CE               	clrf	??_main+3
  1952  067A  084D               	movf	??_main+2,w
  1953  067B  00A3               	movwf	___wmul@multiplicand
  1954  067C  084E               	movf	??_main+3,w
  1955  067D  00A4               	movwf	___wmul@multiplicand+1
  1956  067E  318C  24E4  3185   	fcall	___wmul
  1957  0681  0020               	movlb	0	; select bank0
  1958  0682  0822               	movf	?___wmul+1,w
  1959  0683  00D4               	movwf	_main$1120+1
  1960  0684  0821               	movf	?___wmul,w
  1961  0685  00D3               	movwf	_main$1120
  1962  0686                     l3573:
  1963                           
  1964                           ;main.c: 258:                 uint16_t numSteps1 = ((uint16_t)get_complex_breaths_instru
      +                          ctions_index(2)*(uint16_t)steps_multiplier_1*(uint16_t)get_complex_breaths_instructions_
      +                          index(0));
  1965  0686  0854               	movf	_main$1120+1,w
  1966  0687  00A2               	movwf	___wmul@multiplier+1
  1967  0688  0853               	movf	_main$1120,w
  1968  0689  00A1               	movwf	___wmul@multiplier
  1969  068A  0856               	movf	main@steps_multiplier_1+1,w
  1970  068B  00A4               	movwf	___wmul@multiplicand+1
  1971  068C  0855               	movf	main@steps_multiplier_1,w
  1972  068D  00A3               	movwf	___wmul@multiplicand
  1973  068E  318C  24E4  3185   	fcall	___wmul
  1974  0691  0020               	movlb	0	; select bank0
  1975  0692  0822               	movf	?___wmul+1,w
  1976  0693  00D0               	movwf	main@numSteps1+1
  1977  0694  0821               	movf	?___wmul,w
  1978  0695  00CF               	movwf	main@numSteps1
  1979  0696                     l3575:
  1980                           
  1981                           ;main.c: 259:                 uint16_t numSteps2 = ((uint16_t)get_complex_breaths_instru
      +                          ctions_index(4)*(uint16_t)steps_multiplier_2*(uint16_t)get_complex_breaths_instructions_
      +                          index(0));
  1982  0696  3004               	movlw	4
  1983  0697  318C  2435  3185   	fcall	_get_complex_breaths_instructions_index
  1984  069A  0020               	movlb	0	; select bank0
  1985  069B  00CB               	movwf	??_main
  1986  069C  01CC               	clrf	??_main+1
  1987  069D  084B               	movf	??_main,w
  1988  069E  00A1               	movwf	___wmul@multiplier
  1989  069F  084C               	movf	??_main+1,w
  1990  06A0  00A2               	movwf	___wmul@multiplier+1
  1991  06A1  3000               	movlw	0
  1992  06A2  318C  2435  3185   	fcall	_get_complex_breaths_instructions_index
  1993  06A5  0020               	movlb	0	; select bank0
  1994  06A6  00CD               	movwf	??_main+2
  1995  06A7  01CE               	clrf	??_main+3
  1996  06A8  084D               	movf	??_main+2,w
  1997  06A9  00A3               	movwf	___wmul@multiplicand
  1998  06AA  084E               	movf	??_main+3,w
  1999  06AB  00A4               	movwf	___wmul@multiplicand+1
  2000  06AC  318C  24E4  3185   	fcall	___wmul
  2001  06AF  0020               	movlb	0	; select bank0
  2002  06B0  0822               	movf	?___wmul+1,w
  2003  06B1  00D4               	movwf	_main$1120+1
  2004  06B2  0821               	movf	?___wmul,w
  2005  06B3  00D3               	movwf	_main$1120
  2006                           
  2007                           ;main.c: 259:                 uint16_t numSteps2 = ((uint16_t)get_complex_breaths_instru
      +                          ctions_index(4)*(uint16_t)steps_multiplier_2*(uint16_t)get_complex_breaths_instructions_
      +                          index(0));
  2008  06B4  0854               	movf	_main$1120+1,w
  2009  06B5  00A2               	movwf	___wmul@multiplier+1
  2010  06B6  0853               	movf	_main$1120,w
  2011  06B7  00A1               	movwf	___wmul@multiplier
  2012  06B8  0858               	movf	main@steps_multiplier_2+1,w
  2013  06B9  00A4               	movwf	___wmul@multiplicand+1
  2014  06BA  0857               	movf	main@steps_multiplier_2,w
  2015  06BB  00A3               	movwf	___wmul@multiplicand
  2016  06BC  318C  24E4  3185   	fcall	___wmul
  2017  06BF  0020               	movlb	0	; select bank0
  2018  06C0  0822               	movf	?___wmul+1,w
  2019  06C1  00D2               	movwf	main@numSteps2+1
  2020  06C2  0821               	movf	?___wmul,w
  2021  06C3  00D1               	movwf	main@numSteps2
  2022  06C4                     l3577:
  2023                           
  2024                           ;main.c: 260:                 Step(UP, numSteps1, step_size_in_1, numSteps2, step_size_i
      +                          n_2, 1);
  2025  06C4  0850               	movf	main@numSteps1+1,w
  2026  06C5  00B1               	movwf	Step@num_steps1+1
  2027  06C6  084F               	movf	main@numSteps1,w
  2028  06C7  00B0               	movwf	Step@num_steps1
  2029  06C8  0859               	movf	main@step_size_in_1,w
  2030  06C9  00CB               	movwf	??_main
  2031  06CA  084B               	movf	??_main,w
  2032  06CB  00B2               	movwf	Step@size1
  2033  06CC  0852               	movf	main@numSteps2+1,w
  2034  06CD  00B4               	movwf	Step@num_steps2+1
  2035  06CE  0851               	movf	main@numSteps2,w
  2036  06CF  00B3               	movwf	Step@num_steps2
  2037  06D0  085A               	movf	main@step_size_in_2,w
  2038  06D1  00CC               	movwf	??_main+1
  2039  06D2  084C               	movf	??_main+1,w
  2040  06D3  00B5               	movwf	Step@size2
  2041  06D4  01B6               	clrf	Step@haptic_breaths
  2042  06D5  0AB6               	incf	Step@haptic_breaths,f
  2043  06D6  3000               	movlw	0
  2044  06D7  3187  276A  3185   	fcall	_Step
  2045  06DA                     l3579:
  2046                           
  2047                           ;main.c: 263:                 _delay((unsigned long)((15)*(4000000/4000.0)));
  2048  06DA  3014               	movlw	20
  2049  06DB  0020               	movlb	0	; select bank0
  2050  06DC  00CB               	movwf	??_main
  2051  06DD  3079               	movlw	121
  2052  06DE                     u1307:
  2053  06DE  0B89               	decfsz	9,f
  2054  06DF  2EDE               	goto	u1307
  2055  06E0  0BCB               	decfsz	??_main,f
  2056  06E1  2EDE               	goto	u1307
  2057  06E2  3200               	nop2
  2058  06E3                     l3581:
  2059                           
  2060                           ;main.c: 264:                 Step(DOWN, numSteps2, step_size_in_2, numSteps1, step_size
      +                          _in_1, 1);
  2061  06E3  0020               	movlb	0	; select bank0
  2062  06E4  0852               	movf	main@numSteps2+1,w
  2063  06E5  00B1               	movwf	Step@num_steps1+1
  2064  06E6  0851               	movf	main@numSteps2,w
  2065  06E7  00B0               	movwf	Step@num_steps1
  2066  06E8  085A               	movf	main@step_size_in_2,w
  2067  06E9  00CB               	movwf	??_main
  2068  06EA  084B               	movf	??_main,w
  2069  06EB  00B2               	movwf	Step@size1
  2070  06EC  0850               	movf	main@numSteps1+1,w
  2071  06ED  00B4               	movwf	Step@num_steps2+1
  2072  06EE  084F               	movf	main@numSteps1,w
  2073  06EF  00B3               	movwf	Step@num_steps2
  2074  06F0  0859               	movf	main@step_size_in_1,w
  2075  06F1  00CC               	movwf	??_main+1
  2076  06F2  084C               	movf	??_main+1,w
  2077  06F3  00B5               	movwf	Step@size2
  2078  06F4  01B6               	clrf	Step@haptic_breaths
  2079  06F5  0AB6               	incf	Step@haptic_breaths,f
  2080  06F6  3001               	movlw	1
  2081  06F7  3187  276A  3185   	fcall	_Step
  2082  06FA                     l3583:
  2083                           
  2084                           ;main.c: 267:                 _delay((unsigned long)((5)*(4000000/4000.0)));
  2085  06FA  3007               	movlw	7
  2086  06FB  0020               	movlb	0	; select bank0
  2087  06FC  00CB               	movwf	??_main
  2088  06FD  307D               	movlw	125
  2089  06FE                     u1317:
  2090  06FE  0B89               	decfsz	9,f
  2091  06FF  2EFE               	goto	u1317
  2092  0700  0BCB               	decfsz	??_main,f
  2093  0701  2EFE               	goto	u1317
  2094  0702                     l3585:
  2095                           
  2096                           ;main.c: 269:                 if((breath_counter_for_smallVent++ == 10) && get_bellowsHa
      +                          sBeenInchedUpOrDownSinceVenting() == 0){
  2097  0702  3001               	movlw	1
  2098  0703  0020               	movlb	0	; select bank0
  2099  0704  00CB               	movwf	??_main
  2100  0705  084B               	movf	??_main,w
  2101  0706  07DF               	addwf	_breath_counter_for_smallVent,f
  2102  0707  300B               	movlw	11
  2103  0708  065F               	xorwf	_breath_counter_for_smallVent,w
  2104  0709  1D03               	btfss	3,2
  2105  070A  2F0C               	goto	u1251
  2106  070B  2F0D               	goto	u1250
  2107  070C                     u1251:
  2108  070C  2F3D               	goto	l3607
  2109  070D                     u1250:
  2110  070D                     l3587:
  2111  070D  318B  23F9  3185   	fcall	_get_bellowsHasBeenInchedUpOrDownSinceVenting
  2112  0710  3A00               	xorlw	0
  2113  0711  1D03               	skipz
  2114  0712  2F14               	goto	u1261
  2115  0713  2F15               	goto	u1260
  2116  0714                     u1261:
  2117  0714  2F3D               	goto	l3607
  2118  0715                     u1260:
  2119  0715                     l3589:
  2120                           
  2121                           ;main.c: 274:                     breath_counter_for_smallVent = 0;
  2122  0715  0020               	movlb	0	; select bank0
  2123  0716  01DF               	clrf	_breath_counter_for_smallVent
  2124  0717                     l3591:
  2125                           
  2126                           ;main.c: 275:                     smallVent();
  2127  0717  318C  240B  3185   	fcall	_smallVent
  2128  071A  2F3D               	goto	l3607
  2129  071B                     l3593:
  2130                           
  2131                           ;main.c: 279:                 if(get_stepper_instruction() != 0){
  2132  071B  318B  23FF  3185   	fcall	_get_stepper_instruction
  2133  071E  3A00               	xorlw	0
  2134  071F  1903               	skipnz
  2135  0720  2F22               	goto	u1271
  2136  0721  2F23               	goto	u1270
  2137  0722                     u1271:
  2138  0722  2F3D               	goto	l295
  2139  0723                     u1270:
  2140  0723                     l3595:
  2141                           
  2142                           ;main.c: 280:                     basicStepperInstruction(get_stepper_instruction());
  2143  0723  318B  23FF  3185   	fcall	_get_stepper_instruction
  2144  0726  3180  2037  3185   	fcall	_basicStepperInstruction
  2145  0729                     l3597:
  2146                           
  2147                           ;main.c: 283:                     if((breath_counter_for_smallVent++ == 10) && get_bello
      +                          wsHasBeenInchedUpOrDownSinceVenting() == 0){
  2148  0729  3001               	movlw	1
  2149  072A  0020               	movlb	0	; select bank0
  2150  072B  00CB               	movwf	??_main
  2151  072C  084B               	movf	??_main,w
  2152  072D  07DF               	addwf	_breath_counter_for_smallVent,f
  2153  072E  300B               	movlw	11
  2154  072F  065F               	xorwf	_breath_counter_for_smallVent,w
  2155  0730  1D03               	btfss	3,2
  2156  0731  2F33               	goto	u1281
  2157  0732  2F34               	goto	u1280
  2158  0733                     u1281:
  2159  0733  2F3D               	goto	l295
  2160  0734                     u1280:
  2161  0734                     l3599:
  2162  0734  318B  23F9  3185   	fcall	_get_bellowsHasBeenInchedUpOrDownSinceVenting
  2163  0737  3A00               	xorlw	0
  2164  0738  1D03               	skipz
  2165  0739  2F3B               	goto	u1291
  2166  073A  2F3C               	goto	u1290
  2167  073B                     u1291:
  2168  073B  2F3D               	goto	l295
  2169  073C                     u1290:
  2170  073C  2F15               	goto	l3589
  2171  073D                     l295:
  2172  073D                     l3607:
  2173  073D  318B  23FC  3185   	fcall	_get_motor_action
  2174  0740  0020               	movlb	0	; select bank0
  2175  0741  00CB               	movwf	??_main
  2176  0742  01CC               	clrf	??_main+1
  2177                           
  2178                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2179                           ; Switch size 1, requested type "simple"
  2180                           ; Number of cases is 1, Range of values is 0 to 0
  2181                           ; switch strategies available:
  2182                           ; Name         Instructions Cycles
  2183                           ; simple_byte            4     3 (average)
  2184                           ; direct_byte            8     6 (fixed)
  2185                           ; jumptable            260     6 (fixed)
  2186                           ;	Chosen strategy is simple_byte
  2187  0743  084C               	movf	??_main+1,w
  2188  0744  3A00               	xorlw	0	; case 0
  2189  0745  1903               	skipnz
  2190  0746  2F48               	goto	l3823
  2191  0747  2F3D               	goto	l295
  2192  0748                     l3823:
  2193                           
  2194                           ; Switch size 1, requested type "simple"
  2195                           ; Number of cases is 10, Range of values is 2 to 11
  2196                           ; switch strategies available:
  2197                           ; Name         Instructions Cycles
  2198                           ; direct_byte           29     9 (fixed)
  2199                           ; simple_byte           31    16 (average)
  2200                           ; jumptable            263     9 (fixed)
  2201                           ;	Chosen strategy is simple_byte
  2202  0748  084B               	movf	??_main,w
  2203  0749  3A02               	xorlw	2	; case 2
  2204  074A  1903               	skipnz
  2205  074B  2DA3               	goto	l3517
  2206  074C  3A01               	xorlw	1	; case 3
  2207  074D  1903               	skipnz
  2208  074E  2D45               	goto	l3477
  2209  074F  3A07               	xorlw	7	; case 4
  2210  0750  1903               	skipnz
  2211  0751  2D7B               	goto	l3501
  2212  0752  3A01               	xorlw	1	; case 5
  2213  0753  1903               	skipnz
  2214  0754  2D8F               	goto	l3509
  2215  0755  3A03               	xorlw	3	; case 6
  2216  0756  1903               	skipnz
  2217  0757  2D27               	goto	l3461
  2218  0758  3A01               	xorlw	1	; case 7
  2219  0759  1903               	skipnz
  2220  075A  2D36               	goto	l3469
  2221  075B  3A0F               	xorlw	15	; case 8
  2222  075C  1903               	skipnz
  2223  075D  2F1B               	goto	l3593
  2224  075E  3A01               	xorlw	1	; case 9
  2225  075F  1903               	skipnz
  2226  0760  2D6F               	goto	l3495
  2227  0761  3A03               	xorlw	3	; case 10
  2228  0762  1903               	skipnz
  2229  0763  2D55               	goto	l3483
  2230  0764  3A01               	xorlw	1	; case 11
  2231  0765  1903               	skipnz
  2232  0766  2D62               	goto	l3489
  2233  0767  2F3D               	goto	l295
  2234  0768  3180  2825         	ljmp	start
  2235  076A                     __end_of_main:
  2236                           
  2237                           	psect	text1
  2238  0DDF                     __ptext1:	
  2239 ;; *************** function _topButtonTrigger *****************
  2240 ;; Defined at:
  2241 ;;		line 170 in file "step/step.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;		None
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  rotations       1   32[BANK0 ] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2257 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2258 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2259 ;;Total ram usage:        4 bytes
  2260 ;; Hardware stack levels used: 1
  2261 ;; Hardware stack levels required when called: 6
  2262 ;; This function calls:
  2263 ;;		_Step
  2264 ;;		___wmul
  2265 ;;		_set_INTERRUPT_BREAK_FLAG
  2266 ;; This function is called by:
  2267 ;;		_main
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271  0DDF                     _topButtonTrigger:	
  2272                           ;psect for function _topButtonTrigger
  2273                           
  2274  0DDF                     l499:	
  2275                           ;incstack = 0
  2276                           ; Regs used in _topButtonTrigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2277                           ;step/step.c: 171:     do { LATCbits.LATC1 = 0; } while(0);
  2278                           
  2279  0DDF  0022               	movlb	2	; select bank2
  2280  0DE0  108E               	bcf	14,1	;volatile
  2281  0DE1                     l3207:
  2282                           
  2283                           ;step/step.c: 172:     _delay((unsigned long)((50)*(4000000/4000.0)));
  2284  0DE1  3041               	movlw	65
  2285  0DE2  0020               	movlb	0	; select bank0
  2286  0DE3  00BD               	movwf	??_topButtonTrigger
  2287  0DE4  30EE               	movlw	238
  2288  0DE5                     u1327:
  2289  0DE5  0B89               	decfsz	9,f
  2290  0DE6  2DE5               	goto	u1327
  2291  0DE7  0BBD               	decfsz	??_topButtonTrigger,f
  2292  0DE8  2DE5               	goto	u1327
  2293  0DE9  0000               	nop
  2294                           
  2295                           ;step/step.c: 173:     uint8_t rotations = 12;
  2296  0DEA  300C               	movlw	12
  2297  0DEB  0020               	movlb	0	; select bank0
  2298  0DEC  00BD               	movwf	??_topButtonTrigger
  2299  0DED  083D               	movf	??_topButtonTrigger,w
  2300  0DEE  00C0               	movwf	topButtonTrigger@rotations
  2301  0DEF                     l3209:
  2302                           
  2303                           ;step/step.c: 176:     Step(DOWN, (200*rotations*4), Quarter, 0, NullStep, 0);
  2304  0DEF  0840               	movf	topButtonTrigger@rotations,w
  2305  0DF0  00BD               	movwf	??_topButtonTrigger
  2306  0DF1  01BE               	clrf	??_topButtonTrigger+1
  2307  0DF2  083D               	movf	??_topButtonTrigger,w
  2308  0DF3  00A1               	movwf	___wmul@multiplier
  2309  0DF4  083E               	movf	??_topButtonTrigger+1,w
  2310  0DF5  00A2               	movwf	___wmul@multiplier+1
  2311  0DF6  3020               	movlw	32
  2312  0DF7  00A3               	movwf	___wmul@multiplicand
  2313  0DF8  3003               	movlw	3
  2314  0DF9  00A4               	movwf	___wmul@multiplicand+1
  2315  0DFA  318C  24E4  318D   	fcall	___wmul
  2316  0DFD  0020               	movlb	0	; select bank0
  2317  0DFE  0822               	movf	?___wmul+1,w
  2318  0DFF  00B1               	movwf	Step@num_steps1+1
  2319  0E00  0821               	movf	?___wmul,w
  2320  0E01  00B0               	movwf	Step@num_steps1
  2321  0E02  3004               	movlw	4
  2322  0E03  00BF               	movwf	??_topButtonTrigger+2
  2323  0E04  083F               	movf	??_topButtonTrigger+2,w
  2324  0E05  00B2               	movwf	Step@size1
  2325  0E06  3000               	movlw	0
  2326  0E07  00B3               	movwf	Step@num_steps2
  2327  0E08  00B4               	movwf	Step@num_steps2+1
  2328  0E09  01B5               	clrf	Step@size2
  2329  0E0A  01B6               	clrf	Step@haptic_breaths
  2330  0E0B  3001               	movlw	1
  2331  0E0C  3187  276A  318D   	fcall	_Step
  2332  0E0F                     l3211:
  2333                           
  2334                           ;step/step.c: 177:     set_INTERRUPT_BREAK_FLAG(1);
  2335  0E0F  3001               	movlw	1
  2336  0E10  318C  242E  318D   	fcall	_set_INTERRUPT_BREAK_FLAG
  2337  0E13                     l501:
  2338  0E13  0008               	return
  2339  0E14                     __end_of_topButtonTrigger:
  2340                           
  2341                           	psect	text2
  2342  0C0B                     __ptext2:	
  2343 ;; *************** function _smallVent *****************
  2344 ;; Defined at:
  2345 ;;		line 300 in file "main.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;		None
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;		None
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  1    wreg      void 
  2352 ;; Registers used:
  2353 ;;		wreg, status,2, status,0, pclath, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2363 ;;Total ram usage:        0 bytes
  2364 ;; Hardware stack levels used: 1
  2365 ;; Hardware stack levels required when called: 4
  2366 ;; This function calls:
  2367 ;;		_EUSART_Write
  2368 ;; This function is called by:
  2369 ;;		_main
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373  0C0B                     _smallVent:	
  2374                           ;psect for function _smallVent
  2375                           
  2376  0C0B                     l3261:	
  2377                           ;incstack = 0
  2378                           ; Regs used in _smallVent: [wreg+status,2+status,0+pclath+cstack]
  2379                           
  2380                           
  2381                           ;main.c: 302:     EUSART_Write(0xF9);
  2382  0C0B  30F9               	movlw	249
  2383  0C0C  318C  2447  318C   	fcall	_EUSART_Write
  2384  0C0F                     l344:
  2385  0C0F  0008               	return
  2386  0C10                     __end_of_smallVent:
  2387                           
  2388                           	psect	text3
  2389  0E14                     __ptext3:	
  2390 ;; *************** function _slowStepTest *****************
  2391 ;; Defined at:
  2392 ;;		line 110 in file "step/step.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      void 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2410 ;;Total ram usage:        2 bytes
  2411 ;; Hardware stack levels used: 1
  2412 ;; Hardware stack levels required when called: 5
  2413 ;; This function calls:
  2414 ;;		_get_INTERRUPT_BREAK_FLAG
  2415 ;;		_setDirection
  2416 ;;		_setStepSize
  2417 ;;		_set_INTERRUPT_BREAK_FLAG
  2418 ;;		_stepperSleep
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424  0E14                     _slowStepTest:	
  2425                           ;psect for function _slowStepTest
  2426                           
  2427  0E14                     l3243:	
  2428                           ;incstack = 0
  2429                           ; Regs used in _slowStepTest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2430                           
  2431                           
  2432                           ;step/step.c: 112:     setDirection(DOWN);
  2433  0E14  3001               	movlw	1
  2434  0E15  318C  2476  318E   	fcall	_setDirection
  2435  0E18                     l3245:
  2436                           
  2437                           ;step/step.c: 113:     setStepSize(Full);
  2438  0E18  3001               	movlw	1
  2439  0E19  318E  2650  318E   	fcall	_setStepSize
  2440  0E1C                     l3247:
  2441                           
  2442                           ;step/step.c: 114:     stepperSleep(0);
  2443  0E1C  3000               	movlw	0
  2444  0E1D  318C  2483  318E   	fcall	_stepperSleep
  2445                           
  2446                           ;step/step.c: 115:     while(!get_INTERRUPT_BREAK_FLAG()){
  2447  0E20  2E3F               	goto	l3253
  2448  0E21                     l465:	
  2449                           ;step/step.c: 116:         do { LATCbits.LATC1 = 1; } while(0);
  2450                           
  2451  0E21  0022               	movlb	2	; select bank2
  2452  0E22  148E               	bsf	14,1	;volatile
  2453  0E23                     l3249:
  2454                           
  2455                           ;step/step.c: 117:         _delay((unsigned long)((500)*(4000000/4000.0)));
  2456  0E23  3003               	movlw	3
  2457  0E24  0020               	movlb	0	; select bank0
  2458  0E25  00A5               	movwf	??_slowStepTest+1
  2459  0E26  308A               	movlw	138
  2460  0E27  00A4               	movwf	??_slowStepTest
  2461  0E28  3055               	movlw	85
  2462  0E29                     u1337:
  2463  0E29  0B89               	decfsz	9,f
  2464  0E2A  2E29               	goto	u1337
  2465  0E2B  0BA4               	decfsz	??_slowStepTest,f
  2466  0E2C  2E29               	goto	u1337
  2467  0E2D  0BA5               	decfsz	??_slowStepTest+1,f
  2468  0E2E  2E29               	goto	u1337
  2469  0E2F  3200               	nop2
  2470  0E30                     l3251:
  2471  0E30  0022               	movlb	2	; select bank2
  2472  0E31  108E               	bcf	14,1	;volatile
  2473  0E32                     l468:
  2474                           
  2475                           ;step/step.c: 119:         _delay((unsigned long)((500)*(4000000/4000.0)));
  2476  0E32  3003               	movlw	3
  2477  0E33  0020               	movlb	0	; select bank0
  2478  0E34  00A5               	movwf	??_slowStepTest+1
  2479  0E35  308A               	movlw	138
  2480  0E36  00A4               	movwf	??_slowStepTest
  2481  0E37  3055               	movlw	85
  2482  0E38                     u1347:
  2483  0E38  0B89               	decfsz	9,f
  2484  0E39  2E38               	goto	u1347
  2485  0E3A  0BA4               	decfsz	??_slowStepTest,f
  2486  0E3B  2E38               	goto	u1347
  2487  0E3C  0BA5               	decfsz	??_slowStepTest+1,f
  2488  0E3D  2E38               	goto	u1347
  2489  0E3E  3200               	nop2
  2490  0E3F                     l3253:
  2491                           
  2492                           ;step/step.c: 115:     while(!get_INTERRUPT_BREAK_FLAG()){
  2493  0E3F  318B  23F6  318E   	fcall	_get_INTERRUPT_BREAK_FLAG
  2494  0E42  3A00               	xorlw	0
  2495  0E43  1903               	skipnz
  2496  0E44  2E46               	goto	u1241
  2497  0E45  2E47               	goto	u1240
  2498  0E46                     u1241:
  2499  0E46  2E21               	goto	l465
  2500  0E47                     u1240:
  2501  0E47                     l3255:
  2502                           
  2503                           ;step/step.c: 121:     set_INTERRUPT_BREAK_FLAG(0);
  2504  0E47  3000               	movlw	0
  2505  0E48  318C  242E  318E   	fcall	_set_INTERRUPT_BREAK_FLAG
  2506                           
  2507                           ;step/step.c: 122:     stepperSleep(1);
  2508  0E4B  3001               	movlw	1
  2509  0E4C  318C  2483  318E   	fcall	_stepperSleep
  2510  0E4F                     l470:
  2511  0E4F  0008               	return
  2512  0E50                     __end_of_slowStepTest:
  2513                           
  2514                           	psect	text4
  2515  0C5D                     __ptext4:	
  2516 ;; *************** function _reset_motor_action_if_matches *****************
  2517 ;; Defined at:
  2518 ;;		line 45 in file "AvthorStates/AvthorStates.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  action          1    wreg     enum E2177
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  action          1    1[BANK0 ] enum E2177
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0, pclath, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2535 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2536 ;;Total ram usage:        1 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; Hardware stack levels required when called: 4
  2539 ;; This function calls:
  2540 ;;		_reset_motor_action
  2541 ;; This function is called by:
  2542 ;;		_main
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546  0C5D                     _reset_motor_action_if_matches:	
  2547                           ;psect for function _reset_motor_action_if_matches
  2548                           
  2549                           
  2550                           ;incstack = 0
  2551                           ; Regs used in _reset_motor_action_if_matches: [wreg+status,2+status,0+pclath+cstack]
  2552                           ;reset_motor_action_if_matches@action stored from wreg
  2553  0C5D  0020               	movlb	0	; select bank0
  2554  0C5E  00A1               	movwf	reset_motor_action_if_matches@action
  2555  0C5F                     l3197:
  2556                           
  2557                           ;AvthorStates/AvthorStates.c: 46:     if(action == Avthor_States.motor_action){
  2558  0C5F  0862               	movf	_Avthor_States+2,w	;volatile
  2559  0C60  0621               	xorwf	reset_motor_action_if_matches@action,w
  2560  0C61  1D03               	skipz
  2561  0C62  2C64               	goto	u1211
  2562  0C63  2C65               	goto	u1210
  2563  0C64                     u1211:
  2564  0C64  2C68               	goto	l29
  2565  0C65                     u1210:
  2566  0C65                     l3199:
  2567                           
  2568                           ;AvthorStates/AvthorStates.c: 49:         reset_motor_action();
  2569  0C65  318C  2422  318C   	fcall	_reset_motor_action
  2570  0C68                     l29:
  2571  0C68  0008               	return
  2572  0C69                     __end_of_reset_motor_action_if_matches:
  2573                           
  2574                           	psect	text5
  2575  0C22                     __ptext5:	
  2576 ;; *************** function _reset_motor_action *****************
  2577 ;; Defined at:
  2578 ;;		line 42 in file "AvthorStates/AvthorStates.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;		None
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2595 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2596 ;;Total ram usage:        1 bytes
  2597 ;; Hardware stack levels used: 1
  2598 ;; Hardware stack levels required when called: 3
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		_reset_motor_action_if_matches
  2603 ;;		_main
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607  0C22                     _reset_motor_action:	
  2608                           ;psect for function _reset_motor_action
  2609                           
  2610  0C22                     l3055:	
  2611                           ;incstack = 0
  2612                           ; Regs used in _reset_motor_action: [wreg]
  2613                           
  2614                           
  2615                           ;AvthorStates/AvthorStates.c: 43:     Avthor_States.motor_action = none;
  2616  0C22  3001               	movlw	1
  2617  0C23  0020               	movlb	0	; select bank0
  2618  0C24  00A0               	movwf	??_reset_motor_action
  2619  0C25  0820               	movf	??_reset_motor_action,w
  2620  0C26  00E2               	movwf	_Avthor_States+2	;volatile
  2621  0C27                     l25:
  2622  0C27  0008               	return
  2623  0C28                     __end_of_reset_motor_action:
  2624                           
  2625                           	psect	text6
  2626  0D28                     __ptext6:	
  2627 ;; *************** function _moveUntilZ *****************
  2628 ;; Defined at:
  2629 ;;		line 125 in file "step/step.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  dir             1    wreg     unsigned char 
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  dir             1    4[BANK0 ] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2646 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2647 ;;Total ram usage:        1 bytes
  2648 ;; Hardware stack levels used: 1
  2649 ;; Hardware stack levels required when called: 5
  2650 ;; This function calls:
  2651 ;;		_get_INTERRUPT_BREAK_FLAG
  2652 ;;		_setDirection
  2653 ;;		_setStepSize
  2654 ;;		_stepperSleep
  2655 ;; This function is called by:
  2656 ;;		_main
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660  0D28                     _moveUntilZ:	
  2661                           ;psect for function _moveUntilZ
  2662                           
  2663                           
  2664                           ;incstack = 0
  2665                           ; Regs used in _moveUntilZ: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2666                           ;moveUntilZ@dir stored from wreg
  2667  0D28  0020               	movlb	0	; select bank0
  2668  0D29  00A4               	movwf	moveUntilZ@dir
  2669  0D2A                     l3231:
  2670                           
  2671                           ;step/step.c: 126:     stepperSleep(0);
  2672  0D2A  3000               	movlw	0
  2673  0D2B  318C  2483  318D   	fcall	_stepperSleep
  2674                           
  2675                           ;step/step.c: 132:     setDirection(dir);
  2676  0D2E  0020               	movlb	0	; select bank0
  2677  0D2F  0824               	movf	moveUntilZ@dir,w
  2678  0D30  318C  2476  318D   	fcall	_setDirection
  2679  0D33                     l3233:
  2680                           
  2681                           ;step/step.c: 133:     setStepSize(Quarter);
  2682  0D33  3004               	movlw	4
  2683  0D34  318E  2650  318D   	fcall	_setStepSize
  2684                           
  2685                           ;step/step.c: 134:     while(!get_INTERRUPT_BREAK_FLAG()){
  2686  0D37  2D44               	goto	l3239
  2687  0D38                     l475:	
  2688                           ;step/step.c: 136:         do { LATCbits.LATC1 = 1; } while(0);
  2689                           
  2690  0D38  0022               	movlb	2	; select bank2
  2691  0D39  148E               	bsf	14,1	;volatile
  2692  0D3A                     l3235:
  2693                           
  2694                           ;step/step.c: 137:         _delay((unsigned long)((1000)*(4000000/4000000.0)));
  2695  0D3A  30C8               	movlw	200
  2696  0D3B                     u1357:
  2697  0D3B  3200               	nop2
  2698  0D3C  0B89               	decfsz	9,f
  2699  0D3D  2D3B               	goto	u1357
  2700  0D3E                     l3237:
  2701  0D3E  0022               	movlb	2	; select bank2
  2702  0D3F  108E               	bcf	14,1	;volatile
  2703  0D40                     l478:
  2704                           
  2705                           ;step/step.c: 139:         _delay((unsigned long)((1000)*(4000000/4000000.0)));
  2706  0D40  30C8               	movlw	200
  2707  0D41                     u1367:
  2708  0D41  3200               	nop2
  2709  0D42  0B89               	decfsz	9,f
  2710  0D43  2D41               	goto	u1367
  2711  0D44                     l3239:
  2712                           
  2713                           ;step/step.c: 134:     while(!get_INTERRUPT_BREAK_FLAG()){
  2714  0D44  318B  23F6  318D   	fcall	_get_INTERRUPT_BREAK_FLAG
  2715  0D47  3A00               	xorlw	0
  2716  0D48  1903               	skipnz
  2717  0D49  2D4B               	goto	u1231
  2718  0D4A  2D4C               	goto	u1230
  2719  0D4B                     u1231:
  2720  0D4B  2D38               	goto	l475
  2721  0D4C                     u1230:
  2722  0D4C                     l3241:
  2723                           
  2724                           ;step/step.c: 141:     stepperSleep(1);
  2725  0D4C  3001               	movlw	1
  2726  0D4D  318C  2483  318D   	fcall	_stepperSleep
  2727  0D50                     l480:
  2728  0D50  0008               	return
  2729  0D51                     __end_of_moveUntilZ:
  2730                           
  2731                           	psect	text7
  2732  0D51                     __ptext7:	
  2733 ;; *************** function _initAvthorStates *****************
  2734 ;; Defined at:
  2735 ;;		line 16 in file "AvthorStates/AvthorStates.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;		None
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  i               2    1[BANK0 ] int 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2752 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2753 ;;Total ram usage:        3 bytes
  2754 ;; Hardware stack levels used: 1
  2755 ;; Hardware stack levels required when called: 3
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763  0D51                     _initAvthorStates:	
  2764                           ;psect for function _initAvthorStates
  2765                           
  2766  0D51                     l3177:	
  2767                           ;incstack = 0
  2768                           ; Regs used in _initAvthorStates: [wreg+fsr1l+fsr1h+status,2+status,0]
  2769                           
  2770                           
  2771                           ;AvthorStates/AvthorStates.c: 18:     Avthor_States.stepper_instruction = 0;
  2772  0D51  0020               	movlb	0	; select bank0
  2773  0D52  01E0               	clrf	_Avthor_States	;volatile
  2774                           
  2775                           ;AvthorStates/AvthorStates.c: 19:     Avthor_States.INTERRUPT_BREAK_FLAG = 0;
  2776  0D53  01E1               	clrf	_Avthor_States+1	;volatile
  2777  0D54                     l3179:
  2778                           
  2779                           ;AvthorStates/AvthorStates.c: 20:     Avthor_States.motor_action = none;
  2780  0D54  3001               	movlw	1
  2781  0D55  00A0               	movwf	??_initAvthorStates
  2782  0D56  0820               	movf	??_initAvthorStates,w
  2783  0D57  00E2               	movwf	_Avthor_States+2	;volatile
  2784  0D58                     l3181:
  2785                           
  2786                           ;AvthorStates/AvthorStates.c: 21:     for (int i = 0; i < 5; i++){
  2787  0D58  01A1               	clrf	initAvthorStates@i
  2788  0D59  01A2               	clrf	initAvthorStates@i+1
  2789  0D5A                     l3185:
  2790                           
  2791                           ;AvthorStates/AvthorStates.c: 22:         Avthor_States.complex_breaths_instructions[i] 
      +                          = 0;
  2792  0D5A  0020               	movlb	0	; select bank0
  2793  0D5B  0821               	movf	initAvthorStates@i,w
  2794  0D5C  3E63               	addlw	(low ((_Avthor_States| 0+3)))& (0+255)
  2795  0D5D  0086               	movwf	6
  2796  0D5E  0187               	clrf	7
  2797  0D5F  0181               	clrf	1
  2798  0D60                     l3187:
  2799                           
  2800                           ;AvthorStates/AvthorStates.c: 23:     }
  2801  0D60  3001               	movlw	1
  2802  0D61  07A1               	addwf	initAvthorStates@i,f
  2803  0D62  3000               	movlw	0
  2804  0D63  3DA2               	addwfc	initAvthorStates@i+1,f
  2805  0D64                     l3189:
  2806  0D64  0822               	movf	initAvthorStates@i+1,w
  2807  0D65  3A80               	xorlw	128
  2808  0D66  00A0               	movwf	??_initAvthorStates
  2809  0D67  3080               	movlw	128
  2810  0D68  0220               	subwf	??_initAvthorStates,w
  2811  0D69  1D03               	skipz
  2812  0D6A  2D6D               	goto	u1205
  2813  0D6B  3005               	movlw	5
  2814  0D6C  0221               	subwf	initAvthorStates@i,w
  2815  0D6D                     u1205:
  2816  0D6D  1C03               	skipc
  2817  0D6E  2D70               	goto	u1201
  2818  0D6F  2D71               	goto	u1200
  2819  0D70                     u1201:
  2820  0D70  2D5A               	goto	l3185
  2821  0D71                     u1200:
  2822  0D71                     l3191:
  2823                           
  2824                           ;AvthorStates/AvthorStates.c: 24:     Avthor_States.complex_breaths_instruction_pointer 
      +                          = &Avthor_States.complex_breaths_instructions[0];
  2825  0D71  3063               	movlw	(low ((_Avthor_States| 0+3)))& (0+255)
  2826  0D72  0020               	movlb	0	; select bank0
  2827  0D73  00A0               	movwf	??_initAvthorStates
  2828  0D74  0820               	movf	??_initAvthorStates,w
  2829  0D75  00E8               	movwf	low ((_Avthor_States| 0+8))	;volatile
  2830  0D76                     l3193:
  2831                           
  2832                           ;AvthorStates/AvthorStates.c: 25:     Avthor_States.IS_RECEIVING_COMPLEX_BREATHS_COMMAND
      +                          S = 0;
  2833  0D76  01E9               	clrf	_Avthor_States+9	;volatile
  2834  0D77                     l3195:
  2835                           
  2836                           ;AvthorStates/AvthorStates.c: 26:     Avthor_States.bellowsHasBeenInchedUpOrDownSinceVen
      +                          ting = 1;
  2837  0D77  3001               	movlw	1
  2838  0D78  00A0               	movwf	??_initAvthorStates
  2839  0D79  0820               	movf	??_initAvthorStates,w
  2840  0D7A  00EA               	movwf	_Avthor_States+10	;volatile
  2841  0D7B                     l13:
  2842  0D7B  0008               	return
  2843  0D7C                     __end_of_initAvthorStates:
  2844                           
  2845                           	psect	text8
  2846  0CD1                     __ptext8:	
  2847 ;; *************** function _inchUp *****************
  2848 ;; Defined at:
  2849 ;;		line 162 in file "step/step.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2865 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2866 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2867 ;;Total ram usage:        1 bytes
  2868 ;; Hardware stack levels used: 1
  2869 ;; Hardware stack levels required when called: 6
  2870 ;; This function calls:
  2871 ;;		_Step
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877  0CD1                     _inchUp:	
  2878                           ;psect for function _inchUp
  2879                           
  2880  0CD1                     l3257:	
  2881                           ;incstack = 0
  2882                           ; Regs used in _inchUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2883                           
  2884                           
  2885                           ;step/step.c: 163:     Step(UP, (200*2*4), Quarter, 0, NullStep, 0);
  2886  0CD1  3040               	movlw	64
  2887  0CD2  0020               	movlb	0	; select bank0
  2888  0CD3  00B0               	movwf	Step@num_steps1
  2889  0CD4  3006               	movlw	6
  2890  0CD5  00B1               	movwf	Step@num_steps1+1
  2891  0CD6  3004               	movlw	4
  2892  0CD7  00BD               	movwf	??_inchUp
  2893  0CD8  083D               	movf	??_inchUp,w
  2894  0CD9  00B2               	movwf	Step@size1
  2895  0CDA  3000               	movlw	0
  2896  0CDB  00B3               	movwf	Step@num_steps2
  2897  0CDC  00B4               	movwf	Step@num_steps2+1
  2898  0CDD  01B5               	clrf	Step@size2
  2899  0CDE  01B6               	clrf	Step@haptic_breaths
  2900  0CDF  3000               	movlw	0
  2901  0CE0  3187  276A  318C   	fcall	_Step
  2902  0CE3                     l493:
  2903  0CE3  0008               	return
  2904  0CE4                     __end_of_inchUp:
  2905                           
  2906                           	psect	text9
  2907  0CBE                     __ptext9:	
  2908 ;; *************** function _inchDown *****************
  2909 ;; Defined at:
  2910 ;;		line 166 in file "step/step.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2928 ;;Total ram usage:        1 bytes
  2929 ;; Hardware stack levels used: 1
  2930 ;; Hardware stack levels required when called: 6
  2931 ;; This function calls:
  2932 ;;		_Step
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938  0CBE                     _inchDown:	
  2939                           ;psect for function _inchDown
  2940                           
  2941  0CBE                     l3259:	
  2942                           ;incstack = 0
  2943                           ; Regs used in _inchDown: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2944                           
  2945                           
  2946                           ;step/step.c: 167:     Step(DOWN, (200*2*4), Quarter, 0, NullStep, 0);
  2947  0CBE  3040               	movlw	64
  2948  0CBF  0020               	movlb	0	; select bank0
  2949  0CC0  00B0               	movwf	Step@num_steps1
  2950  0CC1  3006               	movlw	6
  2951  0CC2  00B1               	movwf	Step@num_steps1+1
  2952  0CC3  3004               	movlw	4
  2953  0CC4  00BD               	movwf	??_inchDown
  2954  0CC5  083D               	movf	??_inchDown,w
  2955  0CC6  00B2               	movwf	Step@size1
  2956  0CC7  3000               	movlw	0
  2957  0CC8  00B3               	movwf	Step@num_steps2
  2958  0CC9  00B4               	movwf	Step@num_steps2+1
  2959  0CCA  01B5               	clrf	Step@size2
  2960  0CCB  01B6               	clrf	Step@haptic_breaths
  2961  0CCC  3001               	movlw	1
  2962  0CCD  3187  276A  318C   	fcall	_Step
  2963  0CD0                     l496:
  2964  0CD0  0008               	return
  2965  0CD1                     __end_of_inchDown:
  2966                           
  2967                           	psect	text10
  2968  0BFF                     __ptext10:	
  2969 ;; *************** function _get_stepper_instruction *****************
  2970 ;; Defined at:
  2971 ;;		line 33 in file "AvthorStates/AvthorStates.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;		None
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      unsigned char 
  2978 ;; Registers used:
  2979 ;;		wreg
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2989 ;;Total ram usage:        0 bytes
  2990 ;; Hardware stack levels used: 1
  2991 ;; Hardware stack levels required when called: 3
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_main
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999  0BFF                     _get_stepper_instruction:	
  3000                           ;psect for function _get_stepper_instruction
  3001                           
  3002  0BFF                     l2283:	
  3003                           ;incstack = 0
  3004                           ; Regs used in _get_stepper_instruction: [wreg]
  3005                           
  3006                           
  3007                           ;AvthorStates/AvthorStates.c: 34:     return Avthor_States.stepper_instruction;
  3008  0BFF  0020               	movlb	0	; select bank0
  3009  0C00  0860               	movf	_Avthor_States,w	;volatile
  3010  0C01                     l16:
  3011  0C01  0008               	return
  3012  0C02                     __end_of_get_stepper_instruction:
  3013                           
  3014                           	psect	text11
  3015  0BFC                     __ptext11:	
  3016 ;; *************** function _get_motor_action *****************
  3017 ;; Defined at:
  3018 ;;		line 39 in file "AvthorStates/AvthorStates.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      enum E2177
  3025 ;; Registers used:
  3026 ;;		wreg
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used: 1
  3038 ;; Hardware stack levels required when called: 3
  3039 ;; This function calls:
  3040 ;;		Nothing
  3041 ;; This function is called by:
  3042 ;;		_main
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046  0BFC                     _get_motor_action:	
  3047                           ;psect for function _get_motor_action
  3048                           
  3049  0BFC                     l2287:	
  3050                           ;incstack = 0
  3051                           ; Regs used in _get_motor_action: [wreg]
  3052                           
  3053                           
  3054                           ;AvthorStates/AvthorStates.c: 40:     return Avthor_States.motor_action;
  3055  0BFC  0020               	movlb	0	; select bank0
  3056  0BFD  0862               	movf	_Avthor_States+2,w	;volatile
  3057  0BFE                     l22:
  3058  0BFE  0008               	return
  3059  0BFF                     __end_of_get_motor_action:
  3060                           
  3061                           	psect	text12
  3062  0C35                     __ptext12:	
  3063 ;; *************** function _get_complex_breaths_instructions_index *****************
  3064 ;; Defined at:
  3065 ;;		line 52 in file "AvthorStates/AvthorStates.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  index           1    wreg     unsigned char 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;  index           1    0[BANK0 ] unsigned char 
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      unsigned char 
  3072 ;; Registers used:
  3073 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3083 ;;Total ram usage:        1 bytes
  3084 ;; Hardware stack levels used: 1
  3085 ;; Hardware stack levels required when called: 3
  3086 ;; This function calls:
  3087 ;;		Nothing
  3088 ;; This function is called by:
  3089 ;;		_main
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093  0C35                     _get_complex_breaths_instructions_index:	
  3094                           ;psect for function _get_complex_breaths_instructions_index
  3095                           
  3096                           
  3097                           ;incstack = 0
  3098                           ; Regs used in _get_complex_breaths_instructions_index: [wreg+fsr1l+fsr1h+status,2+statu
      +                          s,0]
  3099                           ;get_complex_breaths_instructions_index@index stored from wreg
  3100  0C35  0020               	movlb	0	; select bank0
  3101  0C36  00A0               	movwf	get_complex_breaths_instructions_index@index
  3102  0C37                     l3201:
  3103                           
  3104                           ;AvthorStates/AvthorStates.c: 53:     return Avthor_States.complex_breaths_instructions[
      +                          index];
  3105  0C37  0820               	movf	get_complex_breaths_instructions_index@index,w
  3106  0C38  3E63               	addlw	(low ((_Avthor_States| 0+3)))& (0+255)
  3107  0C39  0086               	movwf	6
  3108  0C3A  0187               	clrf	7
  3109  0C3B  0801               	movf	1,w
  3110  0C3C                     l32:
  3111  0C3C  0008               	return
  3112  0C3D                     __end_of_get_complex_breaths_instructions_index:
  3113                           
  3114                           	psect	text13
  3115  0BF9                     __ptext13:	
  3116 ;; *************** function _get_bellowsHasBeenInchedUpOrDownSinceVenting *****************
  3117 ;; Defined at:
  3118 ;;		line 58 in file "AvthorStates/AvthorStates.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      _Bool 
  3125 ;; Registers used:
  3126 ;;		wreg
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3136 ;;Total ram usage:        0 bytes
  3137 ;; Hardware stack levels used: 1
  3138 ;; Hardware stack levels required when called: 3
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146  0BF9                     _get_bellowsHasBeenInchedUpOrDownSinceVenting:	
  3147                           ;psect for function _get_bellowsHasBeenInchedUpOrDownSinceVenting
  3148                           
  3149  0BF9                     l2299:	
  3150                           ;incstack = 0
  3151                           ; Regs used in _get_bellowsHasBeenInchedUpOrDownSinceVenting: [wreg]
  3152                           
  3153                           
  3154                           ;AvthorStates/AvthorStates.c: 59:     return Avthor_States.bellowsHasBeenInchedUpOrDownS
      +                          inceVenting;
  3155  0BF9  0020               	movlb	0	; select bank0
  3156  0BFA  086A               	movf	_Avthor_States+10,w	;volatile
  3157  0BFB                     l38:
  3158  0BFB  0008               	return
  3159  0BFC                     __end_of_get_bellowsHasBeenInchedUpOrDownSinceVenting:
  3160                           
  3161                           	psect	text14
  3162  0D7C                     __ptext14:	
  3163 ;; *************** function _calibrate *****************
  3164 ;; Defined at:
  3165 ;;		line 144 in file "step/step.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;		None
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;		None
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      void 
  3172 ;; Registers used:
  3173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3183 ;;Total ram usage:        0 bytes
  3184 ;; Hardware stack levels used: 1
  3185 ;; Hardware stack levels required when called: 5
  3186 ;; This function calls:
  3187 ;;		_get_INTERRUPT_BREAK_FLAG
  3188 ;;		_setDirection
  3189 ;;		_setStepSize
  3190 ;;		_set_INTERRUPT_BREAK_FLAG
  3191 ;;		_stepperSleep
  3192 ;; This function is called by:
  3193 ;;		_main
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197  0D7C                     _calibrate:	
  3198                           ;psect for function _calibrate
  3199                           
  3200  0D7C                     l3219:	
  3201                           ;incstack = 0
  3202                           ; Regs used in _calibrate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3203                           
  3204                           
  3205                           ;step/step.c: 145:     stepperSleep(0);
  3206  0D7C  3000               	movlw	0
  3207  0D7D  318C  2483  318D   	fcall	_stepperSleep
  3208                           
  3209                           ;step/step.c: 147:     set_INTERRUPT_BREAK_FLAG(0);
  3210  0D80  3000               	movlw	0
  3211  0D81  318C  242E  318D   	fcall	_set_INTERRUPT_BREAK_FLAG
  3212                           
  3213                           ;step/step.c: 148:     setDirection(DOWN);
  3214  0D84  3001               	movlw	1
  3215  0D85  318C  2476  318D   	fcall	_setDirection
  3216  0D88                     l3221:
  3217                           
  3218                           ;step/step.c: 149:     setStepSize(Half);
  3219  0D88  3002               	movlw	2
  3220  0D89  318E  2650  318D   	fcall	_setStepSize
  3221                           
  3222                           ;step/step.c: 150:     while(!get_INTERRUPT_BREAK_FLAG()){
  3223  0D8C  2D99               	goto	l3227
  3224  0D8D                     l485:	
  3225                           ;step/step.c: 152:         do { LATCbits.LATC1 = 1; } while(0);
  3226                           
  3227  0D8D  0022               	movlb	2	; select bank2
  3228  0D8E  148E               	bsf	14,1	;volatile
  3229  0D8F                     l3223:
  3230                           
  3231                           ;step/step.c: 153:         _delay((unsigned long)((1000)*(4000000/4000000.0)));
  3232  0D8F  30C8               	movlw	200
  3233  0D90                     u1377:
  3234  0D90  3200               	nop2
  3235  0D91  0B89               	decfsz	9,f
  3236  0D92  2D90               	goto	u1377
  3237  0D93                     l3225:
  3238  0D93  0022               	movlb	2	; select bank2
  3239  0D94  108E               	bcf	14,1	;volatile
  3240  0D95                     l488:
  3241                           
  3242                           ;step/step.c: 155:         _delay((unsigned long)((1000)*(4000000/4000000.0)));
  3243  0D95  30C8               	movlw	200
  3244  0D96                     u1387:
  3245  0D96  3200               	nop2
  3246  0D97  0B89               	decfsz	9,f
  3247  0D98  2D96               	goto	u1387
  3248  0D99                     l3227:
  3249                           
  3250                           ;step/step.c: 150:     while(!get_INTERRUPT_BREAK_FLAG()){
  3251  0D99  318B  23F6  318D   	fcall	_get_INTERRUPT_BREAK_FLAG
  3252  0D9C  3A00               	xorlw	0
  3253  0D9D  1903               	skipnz
  3254  0D9E  2DA0               	goto	u1221
  3255  0D9F  2DA1               	goto	u1220
  3256  0DA0                     u1221:
  3257  0DA0  2D8D               	goto	l485
  3258  0DA1                     u1220:
  3259  0DA1                     l3229:
  3260                           
  3261                           ;step/step.c: 157:     set_INTERRUPT_BREAK_FLAG(0);
  3262  0DA1  3000               	movlw	0
  3263  0DA2  318C  242E  318D   	fcall	_set_INTERRUPT_BREAK_FLAG
  3264                           
  3265                           ;step/step.c: 159:     stepperSleep(1);
  3266  0DA5  3001               	movlw	1
  3267  0DA6  318C  2483  318D   	fcall	_stepperSleep
  3268  0DA9                     l490:
  3269  0DA9  0008               	return
  3270  0DAA                     __end_of_calibrate:
  3271                           
  3272                           	psect	text15
  3273  0DAA                     __ptext15:	
  3274 ;; *************** function _bottomButtonTrigger *****************
  3275 ;; Defined at:
  3276 ;;		line 180 in file "step/step.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;		None
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  rotations       1   32[BANK0 ] unsigned char 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3292 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3294 ;;Total ram usage:        4 bytes
  3295 ;; Hardware stack levels used: 1
  3296 ;; Hardware stack levels required when called: 6
  3297 ;; This function calls:
  3298 ;;		_Step
  3299 ;;		___wmul
  3300 ;;		_set_INTERRUPT_BREAK_FLAG
  3301 ;; This function is called by:
  3302 ;;		_main
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306  0DAA                     _bottomButtonTrigger:	
  3307                           ;psect for function _bottomButtonTrigger
  3308                           
  3309  0DAA                     l504:	
  3310                           ;incstack = 0
  3311                           ; Regs used in _bottomButtonTrigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3312                           ;step/step.c: 181:     do { LATCbits.LATC1 = 0; } while(0);
  3313                           
  3314  0DAA  0022               	movlb	2	; select bank2
  3315  0DAB  108E               	bcf	14,1	;volatile
  3316  0DAC                     l3213:
  3317                           
  3318                           ;step/step.c: 182:     _delay((unsigned long)((50)*(4000000/4000.0)));
  3319  0DAC  3041               	movlw	65
  3320  0DAD  0020               	movlb	0	; select bank0
  3321  0DAE  00BD               	movwf	??_bottomButtonTrigger
  3322  0DAF  30EE               	movlw	238
  3323  0DB0                     u1397:
  3324  0DB0  0B89               	decfsz	9,f
  3325  0DB1  2DB0               	goto	u1397
  3326  0DB2  0BBD               	decfsz	??_bottomButtonTrigger,f
  3327  0DB3  2DB0               	goto	u1397
  3328  0DB4  0000               	nop
  3329                           
  3330                           ;step/step.c: 183:     uint8_t rotations = 6;
  3331  0DB5  3006               	movlw	6
  3332  0DB6  0020               	movlb	0	; select bank0
  3333  0DB7  00BD               	movwf	??_bottomButtonTrigger
  3334  0DB8  083D               	movf	??_bottomButtonTrigger,w
  3335  0DB9  00C0               	movwf	bottomButtonTrigger@rotations
  3336  0DBA                     l3215:
  3337                           
  3338                           ;step/step.c: 186:     Step(UP, (200*rotations*4), Quarter, 0, NullStep, 0);
  3339  0DBA  0840               	movf	bottomButtonTrigger@rotations,w
  3340  0DBB  00BD               	movwf	??_bottomButtonTrigger
  3341  0DBC  01BE               	clrf	??_bottomButtonTrigger+1
  3342  0DBD  083D               	movf	??_bottomButtonTrigger,w
  3343  0DBE  00A1               	movwf	___wmul@multiplier
  3344  0DBF  083E               	movf	??_bottomButtonTrigger+1,w
  3345  0DC0  00A2               	movwf	___wmul@multiplier+1
  3346  0DC1  3020               	movlw	32
  3347  0DC2  00A3               	movwf	___wmul@multiplicand
  3348  0DC3  3003               	movlw	3
  3349  0DC4  00A4               	movwf	___wmul@multiplicand+1
  3350  0DC5  318C  24E4  318D   	fcall	___wmul
  3351  0DC8  0020               	movlb	0	; select bank0
  3352  0DC9  0822               	movf	?___wmul+1,w
  3353  0DCA  00B1               	movwf	Step@num_steps1+1
  3354  0DCB  0821               	movf	?___wmul,w
  3355  0DCC  00B0               	movwf	Step@num_steps1
  3356  0DCD  3004               	movlw	4
  3357  0DCE  00BF               	movwf	??_bottomButtonTrigger+2
  3358  0DCF  083F               	movf	??_bottomButtonTrigger+2,w
  3359  0DD0  00B2               	movwf	Step@size1
  3360  0DD1  3000               	movlw	0
  3361  0DD2  00B3               	movwf	Step@num_steps2
  3362  0DD3  00B4               	movwf	Step@num_steps2+1
  3363  0DD4  01B5               	clrf	Step@size2
  3364  0DD5  01B6               	clrf	Step@haptic_breaths
  3365  0DD6  3000               	movlw	0
  3366  0DD7  3187  276A  318D   	fcall	_Step
  3367  0DDA                     l3217:
  3368                           
  3369                           ;step/step.c: 187:     set_INTERRUPT_BREAK_FLAG(1);
  3370  0DDA  3001               	movlw	1
  3371  0DDB  318C  242E  318D   	fcall	_set_INTERRUPT_BREAK_FLAG
  3372  0DDE                     l506:
  3373  0DDE  0008               	return
  3374  0DDF                     __end_of_bottomButtonTrigger:
  3375                           
  3376                           	psect	text16
  3377  0037                     __ptext16:	
  3378 ;; *************** function _basicStepperInstruction *****************
  3379 ;; Defined at:
  3380 ;;		line 316 in file "main.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  charIn          1    wreg     unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  charIn          1   33[BANK0 ] unsigned char 
  3385 ;;  numRotations    1   42[BANK0 ] unsigned char 
  3386 ;;  stepMultipli    1   41[BANK0 ] unsigned char 
  3387 ;;  stepMultipli    1   40[BANK0 ] unsigned char 
  3388 ;;  stepSize2       1   39[BANK0 ] enum E2181
  3389 ;;  stepSize1       1   38[BANK0 ] enum E2181
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3400 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3402 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3403 ;;Total ram usage:       14 bytes
  3404 ;; Hardware stack levels used: 1
  3405 ;; Hardware stack levels required when called: 6
  3406 ;; This function calls:
  3407 ;;		_Step
  3408 ;;		___awdiv
  3409 ;;		___wmul
  3410 ;;		_set_INTERRUPT_BREAK_FLAG
  3411 ;; This function is called by:
  3412 ;;		_main
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416  0037                     _basicStepperInstruction:	
  3417                           ;psect for function _basicStepperInstruction
  3418                           
  3419                           
  3420                           ;incstack = 0
  3421                           ; Regs used in _basicStepperInstruction: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3422                           ;basicStepperInstruction@charIn stored from wreg
  3423  0037  0020               	movlb	0	; select bank0
  3424  0038  00C1               	movwf	basicStepperInstruction@charIn
  3425  0039                     l3263:
  3426                           
  3427                           ;main.c: 317:     set_INTERRUPT_BREAK_FLAG(0);
  3428  0039  3000               	movlw	0
  3429  003A  318C  242E  3180   	fcall	_set_INTERRUPT_BREAK_FLAG
  3430  003D                     l3265:
  3431                           
  3432                           ;main.c: 318:     char numRotations = 0;
  3433  003D  0020               	movlb	0	; select bank0
  3434  003E  01CA               	clrf	basicStepperInstruction@numRotations
  3435  003F                     l3267:
  3436                           
  3437                           ;main.c: 319:     step_size stepSize1 = NullStep;
  3438  003F  01C6               	clrf	basicStepperInstruction@stepSize1
  3439  0040                     l3269:
  3440                           
  3441                           ;main.c: 320:     step_size stepSize2 = NullStep;
  3442  0040  01C7               	clrf	basicStepperInstruction@stepSize2
  3443  0041                     l3271:
  3444                           
  3445                           ;main.c: 321:     uint8_t stepMultiplier1 = 0;
  3446  0041  01C8               	clrf	basicStepperInstruction@stepMultiplier1
  3447  0042                     l3273:
  3448                           
  3449                           ;main.c: 322:     uint8_t stepMultiplier2 = 0;
  3450  0042  01C9               	clrf	basicStepperInstruction@stepMultiplier2
  3451                           
  3452                           ;main.c: 323:  switch(charIn){
  3453  0043  2B6B               	goto	l3423
  3454  0044                     l348:	
  3455                           ;main.c: 326:   case 's': {
  3456                           
  3457                           
  3458                           ;main.c: 329:             numRotations = 1;
  3459  0044  01CA               	clrf	basicStepperInstruction@numRotations
  3460  0045  0ACA               	incf	basicStepperInstruction@numRotations,f
  3461  0046                     l3275:
  3462                           
  3463                           ;main.c: 330:             stepSize1 = Sixteenth;
  3464  0046  3010               	movlw	16
  3465  0047  00BD               	movwf	??_basicStepperInstruction
  3466  0048  083D               	movf	??_basicStepperInstruction,w
  3467  0049  00C6               	movwf	basicStepperInstruction@stepSize1
  3468                           
  3469                           ;main.c: 331:             stepMultiplier1 = 16;
  3470  004A  3010               	movlw	16
  3471  004B  00BD               	movwf	??_basicStepperInstruction
  3472  004C  083D               	movf	??_basicStepperInstruction,w
  3473  004D  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3474                           
  3475                           ;main.c: 332:             stepSize2 = Sixteenth;
  3476  004E  3010               	movlw	16
  3477  004F  00BD               	movwf	??_basicStepperInstruction
  3478  0050  083D               	movf	??_basicStepperInstruction,w
  3479  0051  00C7               	movwf	basicStepperInstruction@stepSize2
  3480                           
  3481                           ;main.c: 333:             stepMultiplier2 = 16;
  3482  0052  3010               	movlw	16
  3483  0053  00BD               	movwf	??_basicStepperInstruction
  3484  0054  083D               	movf	??_basicStepperInstruction,w
  3485  0055  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3486                           
  3487                           ;main.c: 340:    break;
  3488  0056  2C0B               	goto	l3425
  3489  0057                     l3277:
  3490                           
  3491                           ;main.c: 344:             numRotations = 4;
  3492  0057  3004               	movlw	4
  3493  0058  00BD               	movwf	??_basicStepperInstruction
  3494  0059  083D               	movf	??_basicStepperInstruction,w
  3495  005A  00CA               	movwf	basicStepperInstruction@numRotations
  3496                           
  3497                           ;main.c: 345:             stepSize1 = Half;
  3498  005B  3002               	movlw	2
  3499  005C  00BD               	movwf	??_basicStepperInstruction
  3500  005D  083D               	movf	??_basicStepperInstruction,w
  3501  005E  00C6               	movwf	basicStepperInstruction@stepSize1
  3502                           
  3503                           ;main.c: 346:             stepMultiplier1 = 2;
  3504  005F  3002               	movlw	2
  3505  0060  00BD               	movwf	??_basicStepperInstruction
  3506  0061  083D               	movf	??_basicStepperInstruction,w
  3507  0062  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3508                           
  3509                           ;main.c: 347:             stepSize2 = Half;
  3510  0063  3002               	movlw	2
  3511  0064  00BD               	movwf	??_basicStepperInstruction
  3512  0065  083D               	movf	??_basicStepperInstruction,w
  3513  0066  00C7               	movwf	basicStepperInstruction@stepSize2
  3514                           
  3515                           ;main.c: 348:             stepMultiplier2 = 2;
  3516  0067  3002               	movlw	2
  3517  0068  00BD               	movwf	??_basicStepperInstruction
  3518  0069  083D               	movf	??_basicStepperInstruction,w
  3519  006A  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3520                           
  3521                           ;main.c: 353:    break;
  3522  006B  2C0B               	goto	l3425
  3523  006C                     l3279:
  3524                           
  3525                           ;main.c: 357:             numRotations = 2;
  3526  006C  3002               	movlw	2
  3527  006D  00BD               	movwf	??_basicStepperInstruction
  3528  006E  083D               	movf	??_basicStepperInstruction,w
  3529  006F  00CA               	movwf	basicStepperInstruction@numRotations
  3530                           
  3531                           ;main.c: 358:             stepSize1 = Half;
  3532  0070  3002               	movlw	2
  3533  0071  00BD               	movwf	??_basicStepperInstruction
  3534  0072  083D               	movf	??_basicStepperInstruction,w
  3535  0073  00C6               	movwf	basicStepperInstruction@stepSize1
  3536                           
  3537                           ;main.c: 359:             stepMultiplier1 = 2;
  3538  0074  3002               	movlw	2
  3539  0075  00BD               	movwf	??_basicStepperInstruction
  3540  0076  083D               	movf	??_basicStepperInstruction,w
  3541  0077  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3542                           
  3543                           ;main.c: 360:             stepSize2 = Quarter;
  3544  0078  3004               	movlw	4
  3545  0079  00BD               	movwf	??_basicStepperInstruction
  3546  007A  083D               	movf	??_basicStepperInstruction,w
  3547  007B  00C7               	movwf	basicStepperInstruction@stepSize2
  3548                           
  3549                           ;main.c: 361:             stepMultiplier2 = 4;
  3550  007C  3004               	movlw	4
  3551  007D  00BD               	movwf	??_basicStepperInstruction
  3552  007E  083D               	movf	??_basicStepperInstruction,w
  3553  007F  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3554                           
  3555                           ;main.c: 368:    break;
  3556  0080  2C0B               	goto	l3425
  3557  0081                     l3281:
  3558                           
  3559                           ;main.c: 372:             numRotations = 3;
  3560  0081  3003               	movlw	3
  3561  0082  00BD               	movwf	??_basicStepperInstruction
  3562  0083  083D               	movf	??_basicStepperInstruction,w
  3563  0084  00CA               	movwf	basicStepperInstruction@numRotations
  3564                           
  3565                           ;main.c: 373:             stepSize1 = Half;
  3566  0085  3002               	movlw	2
  3567  0086  00BD               	movwf	??_basicStepperInstruction
  3568  0087  083D               	movf	??_basicStepperInstruction,w
  3569  0088  00C6               	movwf	basicStepperInstruction@stepSize1
  3570                           
  3571                           ;main.c: 374:             stepMultiplier1 = 2;
  3572  0089  3002               	movlw	2
  3573  008A  00BD               	movwf	??_basicStepperInstruction
  3574  008B  083D               	movf	??_basicStepperInstruction,w
  3575  008C  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3576                           
  3577                           ;main.c: 375:             stepSize2 = Half;
  3578  008D  3002               	movlw	2
  3579  008E  00BD               	movwf	??_basicStepperInstruction
  3580  008F  083D               	movf	??_basicStepperInstruction,w
  3581  0090  00C7               	movwf	basicStepperInstruction@stepSize2
  3582                           
  3583                           ;main.c: 376:             stepMultiplier2 = 2;
  3584  0091  3002               	movlw	2
  3585  0092  00BD               	movwf	??_basicStepperInstruction
  3586  0093  083D               	movf	??_basicStepperInstruction,w
  3587  0094  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3588                           
  3589                           ;main.c: 381:    break;
  3590  0095  2C0B               	goto	l3425
  3591  0096                     l3283:
  3592                           
  3593                           ;main.c: 385:             numRotations = 2;
  3594  0096  3002               	movlw	2
  3595  0097  00BD               	movwf	??_basicStepperInstruction
  3596  0098  083D               	movf	??_basicStepperInstruction,w
  3597  0099  00CA               	movwf	basicStepperInstruction@numRotations
  3598                           
  3599                           ;main.c: 386:             stepSize1 = Half;
  3600  009A  3002               	movlw	2
  3601  009B  00BD               	movwf	??_basicStepperInstruction
  3602  009C  083D               	movf	??_basicStepperInstruction,w
  3603  009D  00C6               	movwf	basicStepperInstruction@stepSize1
  3604                           
  3605                           ;main.c: 387:             stepMultiplier1 = 2;
  3606  009E  3002               	movlw	2
  3607  009F  00BD               	movwf	??_basicStepperInstruction
  3608  00A0  083D               	movf	??_basicStepperInstruction,w
  3609  00A1  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3610                           
  3611                           ;main.c: 388:             stepSize2 = Half;
  3612  00A2  3002               	movlw	2
  3613  00A3  00BD               	movwf	??_basicStepperInstruction
  3614  00A4  083D               	movf	??_basicStepperInstruction,w
  3615  00A5  00C7               	movwf	basicStepperInstruction@stepSize2
  3616                           
  3617                           ;main.c: 389:             stepMultiplier2 = 2;
  3618  00A6  3002               	movlw	2
  3619  00A7  00BD               	movwf	??_basicStepperInstruction
  3620  00A8  083D               	movf	??_basicStepperInstruction,w
  3621  00A9  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3622                           
  3623                           ;main.c: 394:    break;
  3624  00AA  2C0B               	goto	l3425
  3625  00AB                     l355:	
  3626                           ;main.c: 404:   }case 0xB1: {
  3627                           
  3628                           
  3629                           ;main.c: 407:    numRotations = 1;
  3630  00AB  01CA               	clrf	basicStepperInstruction@numRotations
  3631  00AC  0ACA               	incf	basicStepperInstruction@numRotations,f
  3632  00AD                     l3287:
  3633                           
  3634                           ;main.c: 408:    stepSize1 = Eighth;
  3635  00AD  3008               	movlw	8
  3636  00AE  00BD               	movwf	??_basicStepperInstruction
  3637  00AF  083D               	movf	??_basicStepperInstruction,w
  3638  00B0  00C6               	movwf	basicStepperInstruction@stepSize1
  3639                           
  3640                           ;main.c: 409:    stepMultiplier1 = 8;
  3641  00B1  3008               	movlw	8
  3642  00B2  00BD               	movwf	??_basicStepperInstruction
  3643  00B3  083D               	movf	??_basicStepperInstruction,w
  3644  00B4  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3645                           
  3646                           ;main.c: 410:    stepSize2 = Sixteenth;
  3647  00B5  3010               	movlw	16
  3648  00B6  00BD               	movwf	??_basicStepperInstruction
  3649  00B7  083D               	movf	??_basicStepperInstruction,w
  3650  00B8  00C7               	movwf	basicStepperInstruction@stepSize2
  3651                           
  3652                           ;main.c: 411:    stepMultiplier2 = 16;
  3653  00B9  3010               	movlw	16
  3654  00BA  00BD               	movwf	??_basicStepperInstruction
  3655  00BB  083D               	movf	??_basicStepperInstruction,w
  3656  00BC  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3657                           
  3658                           ;main.c: 412:    break;
  3659  00BD  2C0B               	goto	l3425
  3660  00BE                     l356:	
  3661                           ;main.c: 413:   }case 0xB2: {
  3662                           
  3663                           
  3664                           ;main.c: 416:    numRotations = 1;
  3665  00BE  01CA               	clrf	basicStepperInstruction@numRotations
  3666  00BF  0ACA               	incf	basicStepperInstruction@numRotations,f
  3667  00C0                     l3289:
  3668                           
  3669                           ;main.c: 417:    stepSize1 = Eighth;
  3670  00C0  3008               	movlw	8
  3671  00C1  00BD               	movwf	??_basicStepperInstruction
  3672  00C2  083D               	movf	??_basicStepperInstruction,w
  3673  00C3  00C6               	movwf	basicStepperInstruction@stepSize1
  3674                           
  3675                           ;main.c: 418:    stepMultiplier1 = 8;
  3676  00C4  3008               	movlw	8
  3677  00C5  00BD               	movwf	??_basicStepperInstruction
  3678  00C6  083D               	movf	??_basicStepperInstruction,w
  3679  00C7  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3680                           
  3681                           ;main.c: 419:    stepSize2 = Eighth;
  3682  00C8  3008               	movlw	8
  3683  00C9  00BD               	movwf	??_basicStepperInstruction
  3684  00CA  083D               	movf	??_basicStepperInstruction,w
  3685  00CB  00C7               	movwf	basicStepperInstruction@stepSize2
  3686                           
  3687                           ;main.c: 420:    stepMultiplier2 = 8;
  3688  00CC  3008               	movlw	8
  3689  00CD  00BD               	movwf	??_basicStepperInstruction
  3690  00CE  083D               	movf	??_basicStepperInstruction,w
  3691  00CF  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3692                           
  3693                           ;main.c: 421:    break;
  3694  00D0  2C0B               	goto	l3425
  3695  00D1                     l357:	
  3696                           ;main.c: 422:   }case 0xB3: {
  3697                           
  3698                           
  3699                           ;main.c: 425:    numRotations = 1;
  3700  00D1  01CA               	clrf	basicStepperInstruction@numRotations
  3701  00D2  0ACA               	incf	basicStepperInstruction@numRotations,f
  3702  00D3                     l3291:
  3703                           
  3704                           ;main.c: 426:    stepSize1 = Eighth;
  3705  00D3  3008               	movlw	8
  3706  00D4  00BD               	movwf	??_basicStepperInstruction
  3707  00D5  083D               	movf	??_basicStepperInstruction,w
  3708  00D6  00C6               	movwf	basicStepperInstruction@stepSize1
  3709                           
  3710                           ;main.c: 427:    stepMultiplier1 = 8;
  3711  00D7  3008               	movlw	8
  3712  00D8  00BD               	movwf	??_basicStepperInstruction
  3713  00D9  083D               	movf	??_basicStepperInstruction,w
  3714  00DA  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3715                           
  3716                           ;main.c: 428:    stepSize2 = Quarter;
  3717  00DB  3004               	movlw	4
  3718  00DC  00BD               	movwf	??_basicStepperInstruction
  3719  00DD  083D               	movf	??_basicStepperInstruction,w
  3720  00DE  00C7               	movwf	basicStepperInstruction@stepSize2
  3721                           
  3722                           ;main.c: 429:    stepMultiplier2 = 4;
  3723  00DF  3004               	movlw	4
  3724  00E0  00BD               	movwf	??_basicStepperInstruction
  3725  00E1  083D               	movf	??_basicStepperInstruction,w
  3726  00E2  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3727                           
  3728                           ;main.c: 430:    break;
  3729  00E3  2C0B               	goto	l3425
  3730  00E4                     l358:	
  3731                           ;main.c: 431:   }case 0xB4: {
  3732                           
  3733                           
  3734                           ;main.c: 434:    numRotations = 1;
  3735  00E4  01CA               	clrf	basicStepperInstruction@numRotations
  3736  00E5  0ACA               	incf	basicStepperInstruction@numRotations,f
  3737  00E6                     l3293:
  3738                           
  3739                           ;main.c: 435:    stepSize1 = Quarter;
  3740  00E6  3004               	movlw	4
  3741  00E7  00BD               	movwf	??_basicStepperInstruction
  3742  00E8  083D               	movf	??_basicStepperInstruction,w
  3743  00E9  00C6               	movwf	basicStepperInstruction@stepSize1
  3744                           
  3745                           ;main.c: 436:    stepMultiplier1 = 4;
  3746  00EA  3004               	movlw	4
  3747  00EB  00BD               	movwf	??_basicStepperInstruction
  3748  00EC  083D               	movf	??_basicStepperInstruction,w
  3749  00ED  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3750                           
  3751                           ;main.c: 437:    stepSize2 = Quarter;
  3752  00EE  3004               	movlw	4
  3753  00EF  00BD               	movwf	??_basicStepperInstruction
  3754  00F0  083D               	movf	??_basicStepperInstruction,w
  3755  00F1  00C7               	movwf	basicStepperInstruction@stepSize2
  3756                           
  3757                           ;main.c: 438:    stepMultiplier2 = 4;
  3758  00F2  3004               	movlw	4
  3759  00F3  00BD               	movwf	??_basicStepperInstruction
  3760  00F4  083D               	movf	??_basicStepperInstruction,w
  3761  00F5  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3762                           
  3763                           ;main.c: 439:    break;
  3764  00F6  2C0B               	goto	l3425
  3765  00F7                     l359:	
  3766                           ;main.c: 440:   }case 0xB5: {
  3767                           
  3768                           
  3769                           ;main.c: 443:    numRotations = 1;
  3770  00F7  01CA               	clrf	basicStepperInstruction@numRotations
  3771  00F8  0ACA               	incf	basicStepperInstruction@numRotations,f
  3772  00F9                     l3295:
  3773                           
  3774                           ;main.c: 444:    stepSize1 = Half;
  3775  00F9  3002               	movlw	2
  3776  00FA  00BD               	movwf	??_basicStepperInstruction
  3777  00FB  083D               	movf	??_basicStepperInstruction,w
  3778  00FC  00C6               	movwf	basicStepperInstruction@stepSize1
  3779                           
  3780                           ;main.c: 445:    stepMultiplier1 = 2;
  3781  00FD  3002               	movlw	2
  3782  00FE  00BD               	movwf	??_basicStepperInstruction
  3783  00FF  083D               	movf	??_basicStepperInstruction,w
  3784  0100  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3785                           
  3786                           ;main.c: 446:    stepSize2 = Quarter;
  3787  0101  3004               	movlw	4
  3788  0102  00BD               	movwf	??_basicStepperInstruction
  3789  0103  083D               	movf	??_basicStepperInstruction,w
  3790  0104  00C7               	movwf	basicStepperInstruction@stepSize2
  3791                           
  3792                           ;main.c: 447:    stepMultiplier2 = 4;
  3793  0105  3004               	movlw	4
  3794  0106  00BD               	movwf	??_basicStepperInstruction
  3795  0107  083D               	movf	??_basicStepperInstruction,w
  3796  0108  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3797                           
  3798                           ;main.c: 448:    break;
  3799  0109  2C0B               	goto	l3425
  3800  010A                     l360:	
  3801                           ;main.c: 449:   }case 0xB6: {
  3802                           
  3803                           
  3804                           ;main.c: 452:    numRotations = 1;
  3805  010A  01CA               	clrf	basicStepperInstruction@numRotations
  3806  010B  0ACA               	incf	basicStepperInstruction@numRotations,f
  3807  010C                     l3297:
  3808                           
  3809                           ;main.c: 453:    stepSize1 = Half;
  3810  010C  3002               	movlw	2
  3811  010D  00BD               	movwf	??_basicStepperInstruction
  3812  010E  083D               	movf	??_basicStepperInstruction,w
  3813  010F  00C6               	movwf	basicStepperInstruction@stepSize1
  3814                           
  3815                           ;main.c: 454:    stepMultiplier1 = 2;
  3816  0110  3002               	movlw	2
  3817  0111  00BD               	movwf	??_basicStepperInstruction
  3818  0112  083D               	movf	??_basicStepperInstruction,w
  3819  0113  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3820                           
  3821                           ;main.c: 455:    stepSize2 = Half;
  3822  0114  3002               	movlw	2
  3823  0115  00BD               	movwf	??_basicStepperInstruction
  3824  0116  083D               	movf	??_basicStepperInstruction,w
  3825  0117  00C7               	movwf	basicStepperInstruction@stepSize2
  3826                           
  3827                           ;main.c: 456:    stepMultiplier2 = 2;
  3828  0118  3002               	movlw	2
  3829  0119  00BD               	movwf	??_basicStepperInstruction
  3830  011A  083D               	movf	??_basicStepperInstruction,w
  3831  011B  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3832                           
  3833                           ;main.c: 457:    break;
  3834  011C  2C0B               	goto	l3425
  3835  011D                     l361:	
  3836                           ;main.c: 458:   }case 0xB7: {
  3837                           
  3838                           
  3839                           ;main.c: 461:    numRotations = 1;
  3840  011D  01CA               	clrf	basicStepperInstruction@numRotations
  3841  011E  0ACA               	incf	basicStepperInstruction@numRotations,f
  3842                           
  3843                           ;main.c: 462:    stepSize1 = Full;
  3844  011F  01C6               	clrf	basicStepperInstruction@stepSize1
  3845  0120  0AC6               	incf	basicStepperInstruction@stepSize1,f
  3846                           
  3847                           ;main.c: 463:    stepMultiplier1 = 1;
  3848  0121  01C8               	clrf	basicStepperInstruction@stepMultiplier1
  3849  0122  0AC8               	incf	basicStepperInstruction@stepMultiplier1,f
  3850  0123                     l3299:
  3851                           
  3852                           ;main.c: 464:    stepSize2 = Half;
  3853  0123  3002               	movlw	2
  3854  0124  00BD               	movwf	??_basicStepperInstruction
  3855  0125  083D               	movf	??_basicStepperInstruction,w
  3856  0126  00C7               	movwf	basicStepperInstruction@stepSize2
  3857                           
  3858                           ;main.c: 465:    stepMultiplier2 = 2;
  3859  0127  3002               	movlw	2
  3860  0128  00BD               	movwf	??_basicStepperInstruction
  3861  0129  083D               	movf	??_basicStepperInstruction,w
  3862  012A  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3863                           
  3864                           ;main.c: 466:    break;
  3865  012B  2C0B               	goto	l3425
  3866  012C                     l362:	
  3867                           ;main.c: 467:   }case 0xB8: {
  3868                           
  3869                           
  3870                           ;main.c: 470:    numRotations = 1;
  3871  012C  01CA               	clrf	basicStepperInstruction@numRotations
  3872  012D  0ACA               	incf	basicStepperInstruction@numRotations,f
  3873                           
  3874                           ;main.c: 471:    stepSize1 = Full;
  3875  012E  01C6               	clrf	basicStepperInstruction@stepSize1
  3876  012F  0AC6               	incf	basicStepperInstruction@stepSize1,f
  3877                           
  3878                           ;main.c: 472:    stepMultiplier1 = 1;
  3879  0130  01C8               	clrf	basicStepperInstruction@stepMultiplier1
  3880  0131  0AC8               	incf	basicStepperInstruction@stepMultiplier1,f
  3881                           
  3882                           ;main.c: 473:    stepSize2 = Full;
  3883  0132  01C7               	clrf	basicStepperInstruction@stepSize2
  3884  0133  0AC7               	incf	basicStepperInstruction@stepSize2,f
  3885                           
  3886                           ;main.c: 474:    stepMultiplier2 = 1;
  3887  0134  01C9               	clrf	basicStepperInstruction@stepMultiplier2
  3888  0135  0AC9               	incf	basicStepperInstruction@stepMultiplier2,f
  3889                           
  3890                           ;main.c: 475:    break;
  3891  0136  2C0B               	goto	l3425
  3892  0137                     l3301:
  3893                           
  3894                           ;main.c: 479:    numRotations = 2;
  3895  0137  3002               	movlw	2
  3896  0138  00BD               	movwf	??_basicStepperInstruction
  3897  0139  083D               	movf	??_basicStepperInstruction,w
  3898  013A  00CA               	movwf	basicStepperInstruction@numRotations
  3899                           
  3900                           ;main.c: 480:    stepSize1 = Sixteenth;
  3901  013B  3010               	movlw	16
  3902  013C  00BD               	movwf	??_basicStepperInstruction
  3903  013D  083D               	movf	??_basicStepperInstruction,w
  3904  013E  00C6               	movwf	basicStepperInstruction@stepSize1
  3905                           
  3906                           ;main.c: 481:    stepMultiplier1 = 16;
  3907  013F  3010               	movlw	16
  3908  0140  00BD               	movwf	??_basicStepperInstruction
  3909  0141  083D               	movf	??_basicStepperInstruction,w
  3910  0142  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3911                           
  3912                           ;main.c: 482:    stepSize2 = Sixteenth;
  3913  0143  3010               	movlw	16
  3914  0144  00BD               	movwf	??_basicStepperInstruction
  3915  0145  083D               	movf	??_basicStepperInstruction,w
  3916  0146  00C7               	movwf	basicStepperInstruction@stepSize2
  3917                           
  3918                           ;main.c: 483:    stepMultiplier2 = 16;
  3919  0147  3010               	movlw	16
  3920  0148  00BD               	movwf	??_basicStepperInstruction
  3921  0149  083D               	movf	??_basicStepperInstruction,w
  3922  014A  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3923                           
  3924                           ;main.c: 484:    break;
  3925  014B  2C0B               	goto	l3425
  3926  014C                     l3303:
  3927                           
  3928                           ;main.c: 488:    numRotations = 2;
  3929  014C  3002               	movlw	2
  3930  014D  00BD               	movwf	??_basicStepperInstruction
  3931  014E  083D               	movf	??_basicStepperInstruction,w
  3932  014F  00CA               	movwf	basicStepperInstruction@numRotations
  3933                           
  3934                           ;main.c: 489:    stepSize1 = Eighth;
  3935  0150  3008               	movlw	8
  3936  0151  00BD               	movwf	??_basicStepperInstruction
  3937  0152  083D               	movf	??_basicStepperInstruction,w
  3938  0153  00C6               	movwf	basicStepperInstruction@stepSize1
  3939                           
  3940                           ;main.c: 490:    stepMultiplier1 = 8;
  3941  0154  3008               	movlw	8
  3942  0155  00BD               	movwf	??_basicStepperInstruction
  3943  0156  083D               	movf	??_basicStepperInstruction,w
  3944  0157  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3945                           
  3946                           ;main.c: 491:    stepSize2 = Sixteenth;
  3947  0158  3010               	movlw	16
  3948  0159  00BD               	movwf	??_basicStepperInstruction
  3949  015A  083D               	movf	??_basicStepperInstruction,w
  3950  015B  00C7               	movwf	basicStepperInstruction@stepSize2
  3951                           
  3952                           ;main.c: 492:    stepMultiplier2 = 16;
  3953  015C  3010               	movlw	16
  3954  015D  00BD               	movwf	??_basicStepperInstruction
  3955  015E  083D               	movf	??_basicStepperInstruction,w
  3956  015F  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3957                           
  3958                           ;main.c: 493:    break;
  3959  0160  2C0B               	goto	l3425
  3960  0161                     l3305:
  3961                           
  3962                           ;main.c: 497:    numRotations = 2;
  3963  0161  3002               	movlw	2
  3964  0162  00BD               	movwf	??_basicStepperInstruction
  3965  0163  083D               	movf	??_basicStepperInstruction,w
  3966  0164  00CA               	movwf	basicStepperInstruction@numRotations
  3967                           
  3968                           ;main.c: 498:    stepSize1 = Eighth;
  3969  0165  3008               	movlw	8
  3970  0166  00BD               	movwf	??_basicStepperInstruction
  3971  0167  083D               	movf	??_basicStepperInstruction,w
  3972  0168  00C6               	movwf	basicStepperInstruction@stepSize1
  3973                           
  3974                           ;main.c: 499:    stepMultiplier1 = 8;
  3975  0169  3008               	movlw	8
  3976  016A  00BD               	movwf	??_basicStepperInstruction
  3977  016B  083D               	movf	??_basicStepperInstruction,w
  3978  016C  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  3979                           
  3980                           ;main.c: 500:    stepSize2 = Eighth;
  3981  016D  3008               	movlw	8
  3982  016E  00BD               	movwf	??_basicStepperInstruction
  3983  016F  083D               	movf	??_basicStepperInstruction,w
  3984  0170  00C7               	movwf	basicStepperInstruction@stepSize2
  3985                           
  3986                           ;main.c: 501:    stepMultiplier2 = 8;
  3987  0171  3008               	movlw	8
  3988  0172  00BD               	movwf	??_basicStepperInstruction
  3989  0173  083D               	movf	??_basicStepperInstruction,w
  3990  0174  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  3991                           
  3992                           ;main.c: 502:    break;
  3993  0175  2C0B               	goto	l3425
  3994  0176                     l3307:
  3995                           
  3996                           ;main.c: 506:    numRotations = 2;
  3997  0176  3002               	movlw	2
  3998  0177  00BD               	movwf	??_basicStepperInstruction
  3999  0178  083D               	movf	??_basicStepperInstruction,w
  4000  0179  00CA               	movwf	basicStepperInstruction@numRotations
  4001                           
  4002                           ;main.c: 507:    stepSize1 = Eighth;
  4003  017A  3008               	movlw	8
  4004  017B  00BD               	movwf	??_basicStepperInstruction
  4005  017C  083D               	movf	??_basicStepperInstruction,w
  4006  017D  00C6               	movwf	basicStepperInstruction@stepSize1
  4007                           
  4008                           ;main.c: 508:    stepMultiplier1 = 8;
  4009  017E  3008               	movlw	8
  4010  017F  00BD               	movwf	??_basicStepperInstruction
  4011  0180  083D               	movf	??_basicStepperInstruction,w
  4012  0181  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4013                           
  4014                           ;main.c: 509:    stepSize2 = Quarter;
  4015  0182  3004               	movlw	4
  4016  0183  00BD               	movwf	??_basicStepperInstruction
  4017  0184  083D               	movf	??_basicStepperInstruction,w
  4018  0185  00C7               	movwf	basicStepperInstruction@stepSize2
  4019                           
  4020                           ;main.c: 510:    stepMultiplier2 = 4;
  4021  0186  3004               	movlw	4
  4022  0187  00BD               	movwf	??_basicStepperInstruction
  4023  0188  083D               	movf	??_basicStepperInstruction,w
  4024  0189  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4025                           
  4026                           ;main.c: 511:    break;
  4027  018A  2C0B               	goto	l3425
  4028  018B                     l3309:
  4029                           
  4030                           ;main.c: 515:    numRotations = 2;
  4031  018B  3002               	movlw	2
  4032  018C  00BD               	movwf	??_basicStepperInstruction
  4033  018D  083D               	movf	??_basicStepperInstruction,w
  4034  018E  00CA               	movwf	basicStepperInstruction@numRotations
  4035                           
  4036                           ;main.c: 516:    stepSize1 = Quarter;
  4037  018F  3004               	movlw	4
  4038  0190  00BD               	movwf	??_basicStepperInstruction
  4039  0191  083D               	movf	??_basicStepperInstruction,w
  4040  0192  00C6               	movwf	basicStepperInstruction@stepSize1
  4041                           
  4042                           ;main.c: 517:    stepMultiplier1 = 4;
  4043  0193  3004               	movlw	4
  4044  0194  00BD               	movwf	??_basicStepperInstruction
  4045  0195  083D               	movf	??_basicStepperInstruction,w
  4046  0196  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4047                           
  4048                           ;main.c: 518:    stepSize2 = Quarter;
  4049  0197  3004               	movlw	4
  4050  0198  00BD               	movwf	??_basicStepperInstruction
  4051  0199  083D               	movf	??_basicStepperInstruction,w
  4052  019A  00C7               	movwf	basicStepperInstruction@stepSize2
  4053                           
  4054                           ;main.c: 519:    stepMultiplier2 = 4;
  4055  019B  3004               	movlw	4
  4056  019C  00BD               	movwf	??_basicStepperInstruction
  4057  019D  083D               	movf	??_basicStepperInstruction,w
  4058  019E  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4059                           
  4060                           ;main.c: 520:    break;
  4061  019F  2C0B               	goto	l3425
  4062  01A0                     l3315:
  4063                           
  4064                           ;main.c: 542:    numRotations = 2;
  4065  01A0  3002               	movlw	2
  4066  01A1  00BD               	movwf	??_basicStepperInstruction
  4067  01A2  083D               	movf	??_basicStepperInstruction,w
  4068  01A3  00CA               	movwf	basicStepperInstruction@numRotations
  4069  01A4                     l3317:
  4070                           
  4071                           ;main.c: 543:    stepSize1 = Full;
  4072  01A4  01C6               	clrf	basicStepperInstruction@stepSize1
  4073  01A5  0AC6               	incf	basicStepperInstruction@stepSize1,f
  4074  01A6                     l3319:
  4075                           
  4076                           ;main.c: 544:    stepMultiplier1 = 1;
  4077  01A6  01C8               	clrf	basicStepperInstruction@stepMultiplier1
  4078  01A7  0AC8               	incf	basicStepperInstruction@stepMultiplier1,f
  4079                           
  4080                           ;main.c: 545:    stepSize2 = Half;
  4081  01A8  3002               	movlw	2
  4082  01A9  00BD               	movwf	??_basicStepperInstruction
  4083  01AA  083D               	movf	??_basicStepperInstruction,w
  4084  01AB  00C7               	movwf	basicStepperInstruction@stepSize2
  4085                           
  4086                           ;main.c: 546:    stepMultiplier2 = 2;
  4087  01AC  3002               	movlw	2
  4088  01AD  00BD               	movwf	??_basicStepperInstruction
  4089  01AE  083D               	movf	??_basicStepperInstruction,w
  4090  01AF  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4091                           
  4092                           ;main.c: 547:    break;
  4093  01B0  2C0B               	goto	l3425
  4094  01B1                     l3321:
  4095                           
  4096                           ;main.c: 551:    numRotations = 2;
  4097  01B1  3002               	movlw	2
  4098  01B2  00BD               	movwf	??_basicStepperInstruction
  4099  01B3  083D               	movf	??_basicStepperInstruction,w
  4100  01B4  00CA               	movwf	basicStepperInstruction@numRotations
  4101  01B5                     l3323:
  4102                           
  4103                           ;main.c: 552:    stepSize1 = Full;
  4104  01B5  01C6               	clrf	basicStepperInstruction@stepSize1
  4105  01B6  0AC6               	incf	basicStepperInstruction@stepSize1,f
  4106  01B7                     l3325:
  4107                           
  4108                           ;main.c: 553:    stepMultiplier1 = 1;
  4109  01B7  01C8               	clrf	basicStepperInstruction@stepMultiplier1
  4110  01B8  0AC8               	incf	basicStepperInstruction@stepMultiplier1,f
  4111  01B9                     l3327:
  4112                           
  4113                           ;main.c: 554:    stepSize2 = Full;
  4114  01B9  01C7               	clrf	basicStepperInstruction@stepSize2
  4115  01BA  0AC7               	incf	basicStepperInstruction@stepSize2,f
  4116  01BB                     l3329:
  4117                           
  4118                           ;main.c: 555:    stepMultiplier2 = 1;
  4119  01BB  01C9               	clrf	basicStepperInstruction@stepMultiplier2
  4120  01BC  0AC9               	incf	basicStepperInstruction@stepMultiplier2,f
  4121                           
  4122                           ;main.c: 556:    break;
  4123  01BD  2C0B               	goto	l3425
  4124  01BE                     l3331:
  4125                           
  4126                           ;main.c: 560:    numRotations = 3;
  4127  01BE  3003               	movlw	3
  4128  01BF  00BD               	movwf	??_basicStepperInstruction
  4129  01C0  083D               	movf	??_basicStepperInstruction,w
  4130  01C1  00CA               	movwf	basicStepperInstruction@numRotations
  4131                           
  4132                           ;main.c: 561:    stepSize1 = Sixteenth;
  4133  01C2  3010               	movlw	16
  4134  01C3  00BD               	movwf	??_basicStepperInstruction
  4135  01C4  083D               	movf	??_basicStepperInstruction,w
  4136  01C5  00C6               	movwf	basicStepperInstruction@stepSize1
  4137                           
  4138                           ;main.c: 562:    stepMultiplier1 = 16;
  4139  01C6  3010               	movlw	16
  4140  01C7  00BD               	movwf	??_basicStepperInstruction
  4141  01C8  083D               	movf	??_basicStepperInstruction,w
  4142  01C9  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4143                           
  4144                           ;main.c: 563:    stepSize2 = Sixteenth;
  4145  01CA  3010               	movlw	16
  4146  01CB  00BD               	movwf	??_basicStepperInstruction
  4147  01CC  083D               	movf	??_basicStepperInstruction,w
  4148  01CD  00C7               	movwf	basicStepperInstruction@stepSize2
  4149                           
  4150                           ;main.c: 564:    stepMultiplier2 = 16;
  4151  01CE  3010               	movlw	16
  4152  01CF  00BD               	movwf	??_basicStepperInstruction
  4153  01D0  083D               	movf	??_basicStepperInstruction,w
  4154  01D1  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4155                           
  4156                           ;main.c: 565:    break;
  4157  01D2  2C0B               	goto	l3425
  4158  01D3                     l3333:
  4159                           
  4160                           ;main.c: 569:    numRotations = 3;
  4161  01D3  3003               	movlw	3
  4162  01D4  00BD               	movwf	??_basicStepperInstruction
  4163  01D5  083D               	movf	??_basicStepperInstruction,w
  4164  01D6  00CA               	movwf	basicStepperInstruction@numRotations
  4165                           
  4166                           ;main.c: 570:    stepSize1 = Eighth;
  4167  01D7  3008               	movlw	8
  4168  01D8  00BD               	movwf	??_basicStepperInstruction
  4169  01D9  083D               	movf	??_basicStepperInstruction,w
  4170  01DA  00C6               	movwf	basicStepperInstruction@stepSize1
  4171                           
  4172                           ;main.c: 571:    stepMultiplier1 = 8;
  4173  01DB  3008               	movlw	8
  4174  01DC  00BD               	movwf	??_basicStepperInstruction
  4175  01DD  083D               	movf	??_basicStepperInstruction,w
  4176  01DE  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4177                           
  4178                           ;main.c: 572:    stepSize2 = Sixteenth;
  4179  01DF  3010               	movlw	16
  4180  01E0  00BD               	movwf	??_basicStepperInstruction
  4181  01E1  083D               	movf	??_basicStepperInstruction,w
  4182  01E2  00C7               	movwf	basicStepperInstruction@stepSize2
  4183                           
  4184                           ;main.c: 573:    stepMultiplier2 = 16;
  4185  01E3  3010               	movlw	16
  4186  01E4  00BD               	movwf	??_basicStepperInstruction
  4187  01E5  083D               	movf	??_basicStepperInstruction,w
  4188  01E6  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4189                           
  4190                           ;main.c: 574:    break;
  4191  01E7  2C0B               	goto	l3425
  4192  01E8                     l3335:
  4193                           
  4194                           ;main.c: 578:    numRotations = 3;
  4195  01E8  3003               	movlw	3
  4196  01E9  00BD               	movwf	??_basicStepperInstruction
  4197  01EA  083D               	movf	??_basicStepperInstruction,w
  4198  01EB  00CA               	movwf	basicStepperInstruction@numRotations
  4199                           
  4200                           ;main.c: 579:    stepSize1 = Eighth;
  4201  01EC  3008               	movlw	8
  4202  01ED  00BD               	movwf	??_basicStepperInstruction
  4203  01EE  083D               	movf	??_basicStepperInstruction,w
  4204  01EF  00C6               	movwf	basicStepperInstruction@stepSize1
  4205                           
  4206                           ;main.c: 580:    stepMultiplier1 = 8;
  4207  01F0  3008               	movlw	8
  4208  01F1  00BD               	movwf	??_basicStepperInstruction
  4209  01F2  083D               	movf	??_basicStepperInstruction,w
  4210  01F3  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4211                           
  4212                           ;main.c: 581:    stepSize2 = Eighth;
  4213  01F4  3008               	movlw	8
  4214  01F5  00BD               	movwf	??_basicStepperInstruction
  4215  01F6  083D               	movf	??_basicStepperInstruction,w
  4216  01F7  00C7               	movwf	basicStepperInstruction@stepSize2
  4217                           
  4218                           ;main.c: 582:    stepMultiplier2 = 8;
  4219  01F8  3008               	movlw	8
  4220  01F9  00BD               	movwf	??_basicStepperInstruction
  4221  01FA  083D               	movf	??_basicStepperInstruction,w
  4222  01FB  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4223                           
  4224                           ;main.c: 583:    break;
  4225  01FC  2C0B               	goto	l3425
  4226  01FD                     l3337:
  4227                           
  4228                           ;main.c: 587:    numRotations = 3;
  4229  01FD  3003               	movlw	3
  4230  01FE  00BD               	movwf	??_basicStepperInstruction
  4231  01FF  083D               	movf	??_basicStepperInstruction,w
  4232  0200  00CA               	movwf	basicStepperInstruction@numRotations
  4233                           
  4234                           ;main.c: 588:    stepSize1 = Eighth;
  4235  0201  3008               	movlw	8
  4236  0202  00BD               	movwf	??_basicStepperInstruction
  4237  0203  083D               	movf	??_basicStepperInstruction,w
  4238  0204  00C6               	movwf	basicStepperInstruction@stepSize1
  4239                           
  4240                           ;main.c: 589:    stepMultiplier1 = 8;
  4241  0205  3008               	movlw	8
  4242  0206  00BD               	movwf	??_basicStepperInstruction
  4243  0207  083D               	movf	??_basicStepperInstruction,w
  4244  0208  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4245                           
  4246                           ;main.c: 590:    stepSize2 = Quarter;
  4247  0209  3004               	movlw	4
  4248  020A  00BD               	movwf	??_basicStepperInstruction
  4249  020B  083D               	movf	??_basicStepperInstruction,w
  4250  020C  00C7               	movwf	basicStepperInstruction@stepSize2
  4251                           
  4252                           ;main.c: 591:    stepMultiplier2 = 4;
  4253  020D  3004               	movlw	4
  4254  020E  00BD               	movwf	??_basicStepperInstruction
  4255  020F  083D               	movf	??_basicStepperInstruction,w
  4256  0210  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4257                           
  4258                           ;main.c: 592:    break;
  4259  0211  2C0B               	goto	l3425
  4260  0212                     l3339:
  4261                           
  4262                           ;main.c: 596:    numRotations = 3;
  4263  0212  3003               	movlw	3
  4264  0213  00BD               	movwf	??_basicStepperInstruction
  4265  0214  083D               	movf	??_basicStepperInstruction,w
  4266  0215  00CA               	movwf	basicStepperInstruction@numRotations
  4267                           
  4268                           ;main.c: 597:    stepSize1 = Quarter;
  4269  0216  3004               	movlw	4
  4270  0217  00BD               	movwf	??_basicStepperInstruction
  4271  0218  083D               	movf	??_basicStepperInstruction,w
  4272  0219  00C6               	movwf	basicStepperInstruction@stepSize1
  4273                           
  4274                           ;main.c: 598:    stepMultiplier1 = 4;
  4275  021A  3004               	movlw	4
  4276  021B  00BD               	movwf	??_basicStepperInstruction
  4277  021C  083D               	movf	??_basicStepperInstruction,w
  4278  021D  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4279                           
  4280                           ;main.c: 599:    stepSize2 = Quarter;
  4281  021E  3004               	movlw	4
  4282  021F  00BD               	movwf	??_basicStepperInstruction
  4283  0220  083D               	movf	??_basicStepperInstruction,w
  4284  0221  00C7               	movwf	basicStepperInstruction@stepSize2
  4285                           
  4286                           ;main.c: 600:    stepMultiplier2 = 4;
  4287  0222  3004               	movlw	4
  4288  0223  00BD               	movwf	??_basicStepperInstruction
  4289  0224  083D               	movf	??_basicStepperInstruction,w
  4290  0225  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4291                           
  4292                           ;main.c: 601:    break;
  4293  0226  2C0B               	goto	l3425
  4294  0227                     l3341:
  4295                           
  4296                           ;main.c: 605:    numRotations = 3;
  4297  0227  3003               	movlw	3
  4298  0228  00BD               	movwf	??_basicStepperInstruction
  4299  0229  083D               	movf	??_basicStepperInstruction,w
  4300  022A  00CA               	movwf	basicStepperInstruction@numRotations
  4301                           
  4302                           ;main.c: 606:    stepSize1 = Half;
  4303  022B  3002               	movlw	2
  4304  022C  00BD               	movwf	??_basicStepperInstruction
  4305  022D  083D               	movf	??_basicStepperInstruction,w
  4306  022E  00C6               	movwf	basicStepperInstruction@stepSize1
  4307                           
  4308                           ;main.c: 607:    stepMultiplier1 = 2;
  4309  022F  3002               	movlw	2
  4310  0230  00BD               	movwf	??_basicStepperInstruction
  4311  0231  083D               	movf	??_basicStepperInstruction,w
  4312  0232  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4313                           
  4314                           ;main.c: 608:    stepSize2 = Quarter;
  4315  0233  3004               	movlw	4
  4316  0234  00BD               	movwf	??_basicStepperInstruction
  4317  0235  083D               	movf	??_basicStepperInstruction,w
  4318  0236  00C7               	movwf	basicStepperInstruction@stepSize2
  4319                           
  4320                           ;main.c: 609:    stepMultiplier2 = 4;
  4321  0237  3004               	movlw	4
  4322  0238  00BD               	movwf	??_basicStepperInstruction
  4323  0239  083D               	movf	??_basicStepperInstruction,w
  4324  023A  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4325                           
  4326                           ;main.c: 610:    break;
  4327  023B  2C0B               	goto	l3425
  4328  023C                     l3345:
  4329                           
  4330                           ;main.c: 623:    numRotations = 3;
  4331  023C  3003               	movlw	3
  4332  023D  00BD               	movwf	??_basicStepperInstruction
  4333  023E  083D               	movf	??_basicStepperInstruction,w
  4334  023F  00CA               	movwf	basicStepperInstruction@numRotations
  4335  0240  29A4               	goto	l3317
  4336  0241                     l3351:
  4337                           
  4338                           ;main.c: 632:    numRotations = 3;
  4339  0241  3003               	movlw	3
  4340  0242  00BD               	movwf	??_basicStepperInstruction
  4341  0243  083D               	movf	??_basicStepperInstruction,w
  4342  0244  00CA               	movwf	basicStepperInstruction@numRotations
  4343  0245  29B5               	goto	l3323
  4344  0246                     l3361:
  4345                           
  4346                           ;main.c: 641:    numRotations = 4;
  4347  0246  3004               	movlw	4
  4348  0247  00BD               	movwf	??_basicStepperInstruction
  4349  0248  083D               	movf	??_basicStepperInstruction,w
  4350  0249  00CA               	movwf	basicStepperInstruction@numRotations
  4351                           
  4352                           ;main.c: 642:    stepSize1 = Sixteenth;
  4353  024A  3010               	movlw	16
  4354  024B  00BD               	movwf	??_basicStepperInstruction
  4355  024C  083D               	movf	??_basicStepperInstruction,w
  4356  024D  00C6               	movwf	basicStepperInstruction@stepSize1
  4357                           
  4358                           ;main.c: 643:    stepMultiplier1 = 16;
  4359  024E  3010               	movlw	16
  4360  024F  00BD               	movwf	??_basicStepperInstruction
  4361  0250  083D               	movf	??_basicStepperInstruction,w
  4362  0251  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4363                           
  4364                           ;main.c: 644:    stepSize2 = Sixteenth;
  4365  0252  3010               	movlw	16
  4366  0253  00BD               	movwf	??_basicStepperInstruction
  4367  0254  083D               	movf	??_basicStepperInstruction,w
  4368  0255  00C7               	movwf	basicStepperInstruction@stepSize2
  4369                           
  4370                           ;main.c: 645:    stepMultiplier2 = 16;
  4371  0256  3010               	movlw	16
  4372  0257  00BD               	movwf	??_basicStepperInstruction
  4373  0258  083D               	movf	??_basicStepperInstruction,w
  4374  0259  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4375                           
  4376                           ;main.c: 646:    break;
  4377  025A  2C0B               	goto	l3425
  4378  025B                     l3363:
  4379                           
  4380                           ;main.c: 650:    numRotations = 4;
  4381  025B  3004               	movlw	4
  4382  025C  00BD               	movwf	??_basicStepperInstruction
  4383  025D  083D               	movf	??_basicStepperInstruction,w
  4384  025E  00CA               	movwf	basicStepperInstruction@numRotations
  4385                           
  4386                           ;main.c: 651:    stepSize1 = Eighth;
  4387  025F  3008               	movlw	8
  4388  0260  00BD               	movwf	??_basicStepperInstruction
  4389  0261  083D               	movf	??_basicStepperInstruction,w
  4390  0262  00C6               	movwf	basicStepperInstruction@stepSize1
  4391                           
  4392                           ;main.c: 652:    stepMultiplier1 = 8;
  4393  0263  3008               	movlw	8
  4394  0264  00BD               	movwf	??_basicStepperInstruction
  4395  0265  083D               	movf	??_basicStepperInstruction,w
  4396  0266  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4397                           
  4398                           ;main.c: 653:    stepSize2 = Sixteenth;
  4399  0267  3010               	movlw	16
  4400  0268  00BD               	movwf	??_basicStepperInstruction
  4401  0269  083D               	movf	??_basicStepperInstruction,w
  4402  026A  00C7               	movwf	basicStepperInstruction@stepSize2
  4403                           
  4404                           ;main.c: 654:    stepMultiplier2 = 16;
  4405  026B  3010               	movlw	16
  4406  026C  00BD               	movwf	??_basicStepperInstruction
  4407  026D  083D               	movf	??_basicStepperInstruction,w
  4408  026E  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4409                           
  4410                           ;main.c: 655:    break;
  4411  026F  2C0B               	goto	l3425
  4412  0270                     l3365:
  4413                           
  4414                           ;main.c: 659:    numRotations = 4;
  4415  0270  3004               	movlw	4
  4416  0271  00BD               	movwf	??_basicStepperInstruction
  4417  0272  083D               	movf	??_basicStepperInstruction,w
  4418  0273  00CA               	movwf	basicStepperInstruction@numRotations
  4419                           
  4420                           ;main.c: 660:    stepSize1 = Eighth;
  4421  0274  3008               	movlw	8
  4422  0275  00BD               	movwf	??_basicStepperInstruction
  4423  0276  083D               	movf	??_basicStepperInstruction,w
  4424  0277  00C6               	movwf	basicStepperInstruction@stepSize1
  4425                           
  4426                           ;main.c: 661:    stepMultiplier1 = 8;
  4427  0278  3008               	movlw	8
  4428  0279  00BD               	movwf	??_basicStepperInstruction
  4429  027A  083D               	movf	??_basicStepperInstruction,w
  4430  027B  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4431                           
  4432                           ;main.c: 662:    stepSize2 = Eighth;
  4433  027C  3008               	movlw	8
  4434  027D  00BD               	movwf	??_basicStepperInstruction
  4435  027E  083D               	movf	??_basicStepperInstruction,w
  4436  027F  00C7               	movwf	basicStepperInstruction@stepSize2
  4437                           
  4438                           ;main.c: 663:    stepMultiplier2 = 8;
  4439  0280  3008               	movlw	8
  4440  0281  00BD               	movwf	??_basicStepperInstruction
  4441  0282  083D               	movf	??_basicStepperInstruction,w
  4442  0283  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4443                           
  4444                           ;main.c: 664:    break;
  4445  0284  2C0B               	goto	l3425
  4446  0285                     l3367:
  4447                           
  4448                           ;main.c: 668:    numRotations = 4;
  4449  0285  3004               	movlw	4
  4450  0286  00BD               	movwf	??_basicStepperInstruction
  4451  0287  083D               	movf	??_basicStepperInstruction,w
  4452  0288  00CA               	movwf	basicStepperInstruction@numRotations
  4453                           
  4454                           ;main.c: 669:    stepSize1 = Eighth;
  4455  0289  3008               	movlw	8
  4456  028A  00BD               	movwf	??_basicStepperInstruction
  4457  028B  083D               	movf	??_basicStepperInstruction,w
  4458  028C  00C6               	movwf	basicStepperInstruction@stepSize1
  4459                           
  4460                           ;main.c: 670:    stepMultiplier1 = 8;
  4461  028D  3008               	movlw	8
  4462  028E  00BD               	movwf	??_basicStepperInstruction
  4463  028F  083D               	movf	??_basicStepperInstruction,w
  4464  0290  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4465                           
  4466                           ;main.c: 671:    stepSize2 = Quarter;
  4467  0291  3004               	movlw	4
  4468  0292  00BD               	movwf	??_basicStepperInstruction
  4469  0293  083D               	movf	??_basicStepperInstruction,w
  4470  0294  00C7               	movwf	basicStepperInstruction@stepSize2
  4471                           
  4472                           ;main.c: 672:    stepMultiplier2 = 4;
  4473  0295  3004               	movlw	4
  4474  0296  00BD               	movwf	??_basicStepperInstruction
  4475  0297  083D               	movf	??_basicStepperInstruction,w
  4476  0298  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4477                           
  4478                           ;main.c: 673:    break;
  4479  0299  2C0B               	goto	l3425
  4480  029A                     l3369:
  4481                           
  4482                           ;main.c: 677:    numRotations = 4;
  4483  029A  3004               	movlw	4
  4484  029B  00BD               	movwf	??_basicStepperInstruction
  4485  029C  083D               	movf	??_basicStepperInstruction,w
  4486  029D  00CA               	movwf	basicStepperInstruction@numRotations
  4487                           
  4488                           ;main.c: 678:    stepSize1 = Quarter;
  4489  029E  3004               	movlw	4
  4490  029F  00BD               	movwf	??_basicStepperInstruction
  4491  02A0  083D               	movf	??_basicStepperInstruction,w
  4492  02A1  00C6               	movwf	basicStepperInstruction@stepSize1
  4493                           
  4494                           ;main.c: 679:    stepMultiplier1 = 4;
  4495  02A2  3004               	movlw	4
  4496  02A3  00BD               	movwf	??_basicStepperInstruction
  4497  02A4  083D               	movf	??_basicStepperInstruction,w
  4498  02A5  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4499                           
  4500                           ;main.c: 680:    stepSize2 = Quarter;
  4501  02A6  3004               	movlw	4
  4502  02A7  00BD               	movwf	??_basicStepperInstruction
  4503  02A8  083D               	movf	??_basicStepperInstruction,w
  4504  02A9  00C7               	movwf	basicStepperInstruction@stepSize2
  4505                           
  4506                           ;main.c: 681:    stepMultiplier2 = 4;
  4507  02AA  3004               	movlw	4
  4508  02AB  00BD               	movwf	??_basicStepperInstruction
  4509  02AC  083D               	movf	??_basicStepperInstruction,w
  4510  02AD  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4511                           
  4512                           ;main.c: 682:    break;
  4513  02AE  2C0B               	goto	l3425
  4514  02AF                     l3371:
  4515                           
  4516                           ;main.c: 686:    numRotations = 4;
  4517  02AF  3004               	movlw	4
  4518  02B0  00BD               	movwf	??_basicStepperInstruction
  4519  02B1  083D               	movf	??_basicStepperInstruction,w
  4520  02B2  00CA               	movwf	basicStepperInstruction@numRotations
  4521                           
  4522                           ;main.c: 687:    stepSize1 = Quarter;
  4523  02B3  3004               	movlw	4
  4524  02B4  00BD               	movwf	??_basicStepperInstruction
  4525  02B5  083D               	movf	??_basicStepperInstruction,w
  4526  02B6  00C6               	movwf	basicStepperInstruction@stepSize1
  4527                           
  4528                           ;main.c: 688:    stepMultiplier1 = 4;
  4529  02B7  3004               	movlw	4
  4530  02B8  00BD               	movwf	??_basicStepperInstruction
  4531  02B9  083D               	movf	??_basicStepperInstruction,w
  4532  02BA  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4533                           
  4534                           ;main.c: 689:    stepSize2 = Half;
  4535  02BB  3002               	movlw	2
  4536  02BC  00BD               	movwf	??_basicStepperInstruction
  4537  02BD  083D               	movf	??_basicStepperInstruction,w
  4538  02BE  00C7               	movwf	basicStepperInstruction@stepSize2
  4539                           
  4540                           ;main.c: 690:    stepMultiplier2 = 2;
  4541  02BF  3002               	movlw	2
  4542  02C0  00BD               	movwf	??_basicStepperInstruction
  4543  02C1  083D               	movf	??_basicStepperInstruction,w
  4544  02C2  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4545                           
  4546                           ;main.c: 691:    break;
  4547  02C3  2C0B               	goto	l3425
  4548  02C4                     l3375:
  4549                           
  4550                           ;main.c: 704:    numRotations = 4;
  4551  02C4  3004               	movlw	4
  4552  02C5  00BD               	movwf	??_basicStepperInstruction
  4553  02C6  083D               	movf	??_basicStepperInstruction,w
  4554  02C7  00CA               	movwf	basicStepperInstruction@numRotations
  4555  02C8  29A4               	goto	l3317
  4556  02C9                     l3381:
  4557                           
  4558                           ;main.c: 713:    numRotations = 4;
  4559  02C9  3004               	movlw	4
  4560  02CA  00BD               	movwf	??_basicStepperInstruction
  4561  02CB  083D               	movf	??_basicStepperInstruction,w
  4562  02CC  00CA               	movwf	basicStepperInstruction@numRotations
  4563  02CD  29B5               	goto	l3323
  4564  02CE                     l3391:
  4565                           
  4566                           ;main.c: 722:    numRotations = 5;
  4567  02CE  3005               	movlw	5
  4568  02CF  00BD               	movwf	??_basicStepperInstruction
  4569  02D0  083D               	movf	??_basicStepperInstruction,w
  4570  02D1  00CA               	movwf	basicStepperInstruction@numRotations
  4571                           
  4572                           ;main.c: 723:    stepSize1 = Sixteenth;
  4573  02D2  3010               	movlw	16
  4574  02D3  00BD               	movwf	??_basicStepperInstruction
  4575  02D4  083D               	movf	??_basicStepperInstruction,w
  4576  02D5  00C6               	movwf	basicStepperInstruction@stepSize1
  4577                           
  4578                           ;main.c: 724:    stepMultiplier1 = 16;
  4579  02D6  3010               	movlw	16
  4580  02D7  00BD               	movwf	??_basicStepperInstruction
  4581  02D8  083D               	movf	??_basicStepperInstruction,w
  4582  02D9  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4583                           
  4584                           ;main.c: 725:    stepSize2 = Sixteenth;
  4585  02DA  3010               	movlw	16
  4586  02DB  00BD               	movwf	??_basicStepperInstruction
  4587  02DC  083D               	movf	??_basicStepperInstruction,w
  4588  02DD  00C7               	movwf	basicStepperInstruction@stepSize2
  4589                           
  4590                           ;main.c: 726:    stepMultiplier2 = 16;
  4591  02DE  3010               	movlw	16
  4592  02DF  00BD               	movwf	??_basicStepperInstruction
  4593  02E0  083D               	movf	??_basicStepperInstruction,w
  4594  02E1  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4595                           
  4596                           ;main.c: 727:    break;
  4597  02E2  2C0B               	goto	l3425
  4598  02E3                     l3393:
  4599                           
  4600                           ;main.c: 731:    numRotations = 5;
  4601  02E3  3005               	movlw	5
  4602  02E4  00BD               	movwf	??_basicStepperInstruction
  4603  02E5  083D               	movf	??_basicStepperInstruction,w
  4604  02E6  00CA               	movwf	basicStepperInstruction@numRotations
  4605                           
  4606                           ;main.c: 732:    stepSize1 = Eighth;
  4607  02E7  3008               	movlw	8
  4608  02E8  00BD               	movwf	??_basicStepperInstruction
  4609  02E9  083D               	movf	??_basicStepperInstruction,w
  4610  02EA  00C6               	movwf	basicStepperInstruction@stepSize1
  4611                           
  4612                           ;main.c: 733:    stepMultiplier1 = 8;
  4613  02EB  3008               	movlw	8
  4614  02EC  00BD               	movwf	??_basicStepperInstruction
  4615  02ED  083D               	movf	??_basicStepperInstruction,w
  4616  02EE  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4617                           
  4618                           ;main.c: 734:    stepSize2 = Sixteenth;
  4619  02EF  3010               	movlw	16
  4620  02F0  00BD               	movwf	??_basicStepperInstruction
  4621  02F1  083D               	movf	??_basicStepperInstruction,w
  4622  02F2  00C7               	movwf	basicStepperInstruction@stepSize2
  4623                           
  4624                           ;main.c: 735:    stepMultiplier2 = 16;
  4625  02F3  3010               	movlw	16
  4626  02F4  00BD               	movwf	??_basicStepperInstruction
  4627  02F5  083D               	movf	??_basicStepperInstruction,w
  4628  02F6  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4629                           
  4630                           ;main.c: 736:    break;
  4631  02F7  2C0B               	goto	l3425
  4632  02F8                     l3395:
  4633                           
  4634                           ;main.c: 740:    numRotations = 5;
  4635  02F8  3005               	movlw	5
  4636  02F9  00BD               	movwf	??_basicStepperInstruction
  4637  02FA  083D               	movf	??_basicStepperInstruction,w
  4638  02FB  00CA               	movwf	basicStepperInstruction@numRotations
  4639                           
  4640                           ;main.c: 741:    stepSize1 = Eighth;
  4641  02FC  3008               	movlw	8
  4642  02FD  00BD               	movwf	??_basicStepperInstruction
  4643  02FE  083D               	movf	??_basicStepperInstruction,w
  4644  02FF  00C6               	movwf	basicStepperInstruction@stepSize1
  4645                           
  4646                           ;main.c: 742:    stepMultiplier1 = 8;
  4647  0300  3008               	movlw	8
  4648  0301  00BD               	movwf	??_basicStepperInstruction
  4649  0302  083D               	movf	??_basicStepperInstruction,w
  4650  0303  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4651                           
  4652                           ;main.c: 743:    stepSize2 = Eighth;
  4653  0304  3008               	movlw	8
  4654  0305  00BD               	movwf	??_basicStepperInstruction
  4655  0306  083D               	movf	??_basicStepperInstruction,w
  4656  0307  00C7               	movwf	basicStepperInstruction@stepSize2
  4657                           
  4658                           ;main.c: 744:    stepMultiplier2 = 8;
  4659  0308  3008               	movlw	8
  4660  0309  00BD               	movwf	??_basicStepperInstruction
  4661  030A  083D               	movf	??_basicStepperInstruction,w
  4662  030B  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4663                           
  4664                           ;main.c: 745:    break;
  4665  030C  2C0B               	goto	l3425
  4666  030D                     l3397:
  4667                           
  4668                           ;main.c: 749:    numRotations = 5;
  4669  030D  3005               	movlw	5
  4670  030E  00BD               	movwf	??_basicStepperInstruction
  4671  030F  083D               	movf	??_basicStepperInstruction,w
  4672  0310  00CA               	movwf	basicStepperInstruction@numRotations
  4673                           
  4674                           ;main.c: 750:    stepSize1 = Eighth;
  4675  0311  3008               	movlw	8
  4676  0312  00BD               	movwf	??_basicStepperInstruction
  4677  0313  083D               	movf	??_basicStepperInstruction,w
  4678  0314  00C6               	movwf	basicStepperInstruction@stepSize1
  4679                           
  4680                           ;main.c: 751:    stepMultiplier1 = 8;
  4681  0315  3008               	movlw	8
  4682  0316  00BD               	movwf	??_basicStepperInstruction
  4683  0317  083D               	movf	??_basicStepperInstruction,w
  4684  0318  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4685                           
  4686                           ;main.c: 752:    stepSize2 = Quarter;
  4687  0319  3004               	movlw	4
  4688  031A  00BD               	movwf	??_basicStepperInstruction
  4689  031B  083D               	movf	??_basicStepperInstruction,w
  4690  031C  00C7               	movwf	basicStepperInstruction@stepSize2
  4691                           
  4692                           ;main.c: 753:    stepMultiplier2 = 4;
  4693  031D  3004               	movlw	4
  4694  031E  00BD               	movwf	??_basicStepperInstruction
  4695  031F  083D               	movf	??_basicStepperInstruction,w
  4696  0320  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4697                           
  4698                           ;main.c: 754:    break;
  4699  0321  2C0B               	goto	l3425
  4700  0322                     l3399:
  4701                           
  4702                           ;main.c: 758:    numRotations = 5;
  4703  0322  3005               	movlw	5
  4704  0323  00BD               	movwf	??_basicStepperInstruction
  4705  0324  083D               	movf	??_basicStepperInstruction,w
  4706  0325  00CA               	movwf	basicStepperInstruction@numRotations
  4707                           
  4708                           ;main.c: 759:    stepSize1 = Quarter;
  4709  0326  3004               	movlw	4
  4710  0327  00BD               	movwf	??_basicStepperInstruction
  4711  0328  083D               	movf	??_basicStepperInstruction,w
  4712  0329  00C6               	movwf	basicStepperInstruction@stepSize1
  4713                           
  4714                           ;main.c: 760:    stepMultiplier1 = 4;
  4715  032A  3004               	movlw	4
  4716  032B  00BD               	movwf	??_basicStepperInstruction
  4717  032C  083D               	movf	??_basicStepperInstruction,w
  4718  032D  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4719                           
  4720                           ;main.c: 761:    stepSize2 = Quarter;
  4721  032E  3004               	movlw	4
  4722  032F  00BD               	movwf	??_basicStepperInstruction
  4723  0330  083D               	movf	??_basicStepperInstruction,w
  4724  0331  00C7               	movwf	basicStepperInstruction@stepSize2
  4725                           
  4726                           ;main.c: 762:    stepMultiplier2 = 4;
  4727  0332  3004               	movlw	4
  4728  0333  00BD               	movwf	??_basicStepperInstruction
  4729  0334  083D               	movf	??_basicStepperInstruction,w
  4730  0335  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4731                           
  4732                           ;main.c: 763:    break;
  4733  0336  2C0B               	goto	l3425
  4734  0337                     l3401:
  4735                           
  4736                           ;main.c: 767:    numRotations = 5;
  4737  0337  3005               	movlw	5
  4738  0338  00BD               	movwf	??_basicStepperInstruction
  4739  0339  083D               	movf	??_basicStepperInstruction,w
  4740  033A  00CA               	movwf	basicStepperInstruction@numRotations
  4741                           
  4742                           ;main.c: 768:    stepSize1 = Half;
  4743  033B  3002               	movlw	2
  4744  033C  00BD               	movwf	??_basicStepperInstruction
  4745  033D  083D               	movf	??_basicStepperInstruction,w
  4746  033E  00C6               	movwf	basicStepperInstruction@stepSize1
  4747                           
  4748                           ;main.c: 769:    stepMultiplier1 = 2;
  4749  033F  3002               	movlw	2
  4750  0340  00BD               	movwf	??_basicStepperInstruction
  4751  0341  083D               	movf	??_basicStepperInstruction,w
  4752  0342  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4753                           
  4754                           ;main.c: 770:    stepSize2 = Quarter;
  4755  0343  3004               	movlw	4
  4756  0344  00BD               	movwf	??_basicStepperInstruction
  4757  0345  083D               	movf	??_basicStepperInstruction,w
  4758  0346  00C7               	movwf	basicStepperInstruction@stepSize2
  4759                           
  4760                           ;main.c: 771:    stepMultiplier2 = 4;
  4761  0347  3004               	movlw	4
  4762  0348  00BD               	movwf	??_basicStepperInstruction
  4763  0349  083D               	movf	??_basicStepperInstruction,w
  4764  034A  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4765                           
  4766                           ;main.c: 772:    break;
  4767  034B  2C0B               	goto	l3425
  4768  034C                     l3403:
  4769                           
  4770                           ;main.c: 776:    numRotations = 5;
  4771  034C  3005               	movlw	5
  4772  034D  00BD               	movwf	??_basicStepperInstruction
  4773  034E  083D               	movf	??_basicStepperInstruction,w
  4774  034F  00CA               	movwf	basicStepperInstruction@numRotations
  4775                           
  4776                           ;main.c: 777:    stepSize1 = Half;
  4777  0350  3002               	movlw	2
  4778  0351  00BD               	movwf	??_basicStepperInstruction
  4779  0352  083D               	movf	??_basicStepperInstruction,w
  4780  0353  00C6               	movwf	basicStepperInstruction@stepSize1
  4781                           
  4782                           ;main.c: 778:    stepMultiplier1 = 2;
  4783  0354  3002               	movlw	2
  4784  0355  00BD               	movwf	??_basicStepperInstruction
  4785  0356  083D               	movf	??_basicStepperInstruction,w
  4786  0357  00C8               	movwf	basicStepperInstruction@stepMultiplier1
  4787                           
  4788                           ;main.c: 779:    stepSize2 = Half;
  4789  0358  3002               	movlw	2
  4790  0359  00BD               	movwf	??_basicStepperInstruction
  4791  035A  083D               	movf	??_basicStepperInstruction,w
  4792  035B  00C7               	movwf	basicStepperInstruction@stepSize2
  4793                           
  4794                           ;main.c: 780:    stepMultiplier2 = 2;
  4795  035C  3002               	movlw	2
  4796  035D  00BD               	movwf	??_basicStepperInstruction
  4797  035E  083D               	movf	??_basicStepperInstruction,w
  4798  035F  00C9               	movwf	basicStepperInstruction@stepMultiplier2
  4799                           
  4800                           ;main.c: 781:    break;
  4801  0360  2C0B               	goto	l3425
  4802  0361                     l3405:
  4803                           
  4804                           ;main.c: 785:    numRotations = 5;
  4805  0361  3005               	movlw	5
  4806  0362  00BD               	movwf	??_basicStepperInstruction
  4807  0363  083D               	movf	??_basicStepperInstruction,w
  4808  0364  00CA               	movwf	basicStepperInstruction@numRotations
  4809  0365  29A4               	goto	l3317
  4810  0366                     l3411:
  4811                           
  4812                           ;main.c: 794:    numRotations = 5;
  4813  0366  3005               	movlw	5
  4814  0367  00BD               	movwf	??_basicStepperInstruction
  4815  0368  083D               	movf	??_basicStepperInstruction,w
  4816  0369  00CA               	movwf	basicStepperInstruction@numRotations
  4817  036A  29B5               	goto	l3323
  4818  036B                     l3423:
  4819  036B  0841               	movf	basicStepperInstruction@charIn,w
  4820  036C  00BD               	movwf	??_basicStepperInstruction
  4821  036D  01BE               	clrf	??_basicStepperInstruction+1
  4822                           
  4823                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4824                           ; Switch size 1, requested type "simple"
  4825                           ; Number of cases is 1, Range of values is 0 to 0
  4826                           ; switch strategies available:
  4827                           ; Name         Instructions Cycles
  4828                           ; simple_byte            4     3 (average)
  4829                           ; direct_byte            8     6 (fixed)
  4830                           ; jumptable            260     6 (fixed)
  4831                           ;	Chosen strategy is simple_byte
  4832  036E  083E               	movf	??_basicStepperInstruction+1,w
  4833  036F  3A00               	xorlw	0	; case 0
  4834  0370  1903               	skipnz
  4835  0371  2B73               	goto	l3825
  4836  0372  2C0B               	goto	l3425
  4837  0373                     l3825:
  4838                           
  4839                           ; Switch size 1, requested type "simple"
  4840                           ; Number of cases is 50, Range of values is 115 to 220
  4841                           ; switch strategies available:
  4842                           ; Name         Instructions Cycles
  4843                           ; simple_byte          151    76 (average)
  4844                           ; direct_byte          221     9 (fixed)
  4845                           ; jumptable            263     9 (fixed)
  4846                           ;	Chosen strategy is simple_byte
  4847  0373  083D               	movf	??_basicStepperInstruction,w
  4848  0374  3A73               	xorlw	115	; case 115
  4849  0375  1903               	skipnz
  4850  0376  2844               	goto	l348
  4851  0377  3A07               	xorlw	7	; case 116
  4852  0378  1903               	skipnz
  4853  0379  2857               	goto	l3277
  4854  037A  3A01               	xorlw	1	; case 117
  4855  037B  1903               	skipnz
  4856  037C  286C               	goto	l3279
  4857  037D  3A03               	xorlw	3	; case 118
  4858  037E  1903               	skipnz
  4859  037F  2881               	goto	l3281
  4860  0380  3A01               	xorlw	1	; case 119
  4861  0381  1903               	skipnz
  4862  0382  2896               	goto	l3283
  4863  0383  3AC7               	xorlw	199	; case 176
  4864  0384  1903               	skipnz
  4865  0385  2844               	goto	l348
  4866  0386  3A01               	xorlw	1	; case 177
  4867  0387  1903               	skipnz
  4868  0388  28AB               	goto	l355
  4869  0389  3A03               	xorlw	3	; case 178
  4870  038A  1903               	skipnz
  4871  038B  28BE               	goto	l356
  4872  038C  3A01               	xorlw	1	; case 179
  4873  038D  1903               	skipnz
  4874  038E  28D1               	goto	l357
  4875  038F  3A07               	xorlw	7	; case 180
  4876  0390  1903               	skipnz
  4877  0391  28E4               	goto	l358
  4878  0392  3A01               	xorlw	1	; case 181
  4879  0393  1903               	skipnz
  4880  0394  28F7               	goto	l359
  4881  0395  3A03               	xorlw	3	; case 182
  4882  0396  1903               	skipnz
  4883  0397  290A               	goto	l360
  4884  0398  3A01               	xorlw	1	; case 183
  4885  0399  1903               	skipnz
  4886  039A  291D               	goto	l361
  4887  039B  3A0F               	xorlw	15	; case 184
  4888  039C  1903               	skipnz
  4889  039D  292C               	goto	l362
  4890  039E  3A01               	xorlw	1	; case 185
  4891  039F  1903               	skipnz
  4892  03A0  2937               	goto	l3301
  4893  03A1  3A03               	xorlw	3	; case 186
  4894  03A2  1903               	skipnz
  4895  03A3  294C               	goto	l3303
  4896  03A4  3A01               	xorlw	1	; case 187
  4897  03A5  1903               	skipnz
  4898  03A6  2961               	goto	l3305
  4899  03A7  3A07               	xorlw	7	; case 188
  4900  03A8  1903               	skipnz
  4901  03A9  2976               	goto	l3307
  4902  03AA  3A01               	xorlw	1	; case 189
  4903  03AB  1903               	skipnz
  4904  03AC  298B               	goto	l3309
  4905  03AD  3A03               	xorlw	3	; case 190
  4906  03AE  1903               	skipnz
  4907  03AF  286C               	goto	l3279
  4908  03B0  3A01               	xorlw	1	; case 191
  4909  03B1  1903               	skipnz
  4910  03B2  2896               	goto	l3283
  4911  03B3  3A7F               	xorlw	127	; case 192
  4912  03B4  1903               	skipnz
  4913  03B5  29A0               	goto	l3315
  4914  03B6  3A01               	xorlw	1	; case 193
  4915  03B7  1903               	skipnz
  4916  03B8  29B1               	goto	l3321
  4917  03B9  3A03               	xorlw	3	; case 194
  4918  03BA  1903               	skipnz
  4919  03BB  29BE               	goto	l3331
  4920  03BC  3A01               	xorlw	1	; case 195
  4921  03BD  1903               	skipnz
  4922  03BE  29D3               	goto	l3333
  4923  03BF  3A07               	xorlw	7	; case 196
  4924  03C0  1903               	skipnz
  4925  03C1  29E8               	goto	l3335
  4926  03C2  3A01               	xorlw	1	; case 197
  4927  03C3  1903               	skipnz
  4928  03C4  29FD               	goto	l3337
  4929  03C5  3A03               	xorlw	3	; case 198
  4930  03C6  1903               	skipnz
  4931  03C7  2A12               	goto	l3339
  4932  03C8  3A01               	xorlw	1	; case 199
  4933  03C9  1903               	skipnz
  4934  03CA  2A27               	goto	l3341
  4935  03CB  3A0F               	xorlw	15	; case 200
  4936  03CC  1903               	skipnz
  4937  03CD  2881               	goto	l3281
  4938  03CE  3A01               	xorlw	1	; case 201
  4939  03CF  1903               	skipnz
  4940  03D0  2A3C               	goto	l3345
  4941  03D1  3A03               	xorlw	3	; case 202
  4942  03D2  1903               	skipnz
  4943  03D3  2A41               	goto	l3351
  4944  03D4  3A01               	xorlw	1	; case 203
  4945  03D5  1903               	skipnz
  4946  03D6  2A46               	goto	l3361
  4947  03D7  3A07               	xorlw	7	; case 204
  4948  03D8  1903               	skipnz
  4949  03D9  2A5B               	goto	l3363
  4950  03DA  3A01               	xorlw	1	; case 205
  4951  03DB  1903               	skipnz
  4952  03DC  2A70               	goto	l3365
  4953  03DD  3A03               	xorlw	3	; case 206
  4954  03DE  1903               	skipnz
  4955  03DF  2A85               	goto	l3367
  4956  03E0  3A01               	xorlw	1	; case 207
  4957  03E1  1903               	skipnz
  4958  03E2  2A9A               	goto	l3369
  4959  03E3  3A1F               	xorlw	31	; case 208
  4960  03E4  1903               	skipnz
  4961  03E5  2AAF               	goto	l3371
  4962  03E6  3A01               	xorlw	1	; case 209
  4963  03E7  1903               	skipnz
  4964  03E8  2857               	goto	l3277
  4965  03E9  3A03               	xorlw	3	; case 210
  4966  03EA  1903               	skipnz
  4967  03EB  2AC4               	goto	l3375
  4968  03EC  3A01               	xorlw	1	; case 211
  4969  03ED  1903               	skipnz
  4970  03EE  2AC9               	goto	l3381
  4971  03EF  3A07               	xorlw	7	; case 212
  4972  03F0  1903               	skipnz
  4973  03F1  2ACE               	goto	l3391
  4974  03F2  3A01               	xorlw	1	; case 213
  4975  03F3  1903               	skipnz
  4976  03F4  2AE3               	goto	l3393
  4977  03F5  3A03               	xorlw	3	; case 214
  4978  03F6  1903               	skipnz
  4979  03F7  2AF8               	goto	l3395
  4980  03F8  3A01               	xorlw	1	; case 215
  4981  03F9  1903               	skipnz
  4982  03FA  2B0D               	goto	l3397
  4983  03FB  3A0F               	xorlw	15	; case 216
  4984  03FC  1903               	skipnz
  4985  03FD  2B22               	goto	l3399
  4986  03FE  3A01               	xorlw	1	; case 217
  4987  03FF  1903               	skipnz
  4988  0400  2B37               	goto	l3401
  4989  0401  3A03               	xorlw	3	; case 218
  4990  0402  1903               	skipnz
  4991  0403  2B4C               	goto	l3403
  4992  0404  3A01               	xorlw	1	; case 219
  4993  0405  1903               	skipnz
  4994  0406  2B61               	goto	l3405
  4995  0407  3A07               	xorlw	7	; case 220
  4996  0408  1903               	skipnz
  4997  0409  2B66               	goto	l3411
  4998  040A  2C0B               	goto	l3425
  4999  040B                     l3425:
  5000                           
  5001                           ;main.c: 806:     _delay((unsigned long)((10)*(4000000/4000.0)));
  5002  040B  300D               	movlw	13
  5003  040C  0020               	movlb	0	; select bank0
  5004  040D  00BD               	movwf	??_basicStepperInstruction
  5005  040E  30FB               	movlw	251
  5006  040F                     u1407:
  5007  040F  0B89               	decfsz	9,f
  5008  0410  2C0F               	goto	u1407
  5009  0411  0BBD               	decfsz	??_basicStepperInstruction,f
  5010  0412  2C0F               	goto	u1407
  5011  0413  3200               	nop2
  5012  0414                     l3427:
  5013                           
  5014                           ;main.c: 809:     Step(UP, (numRotations*stepMultiplier1*200/2), stepSize1, (numRotation
      +                          s*stepMultiplier2*200/2), stepSize2, 1);
  5015  0414  0020               	movlb	0	; select bank0
  5016  0415  084A               	movf	basicStepperInstruction@numRotations,w
  5017  0416  00BD               	movwf	??_basicStepperInstruction
  5018  0417  01BE               	clrf	??_basicStepperInstruction+1
  5019  0418  083D               	movf	??_basicStepperInstruction,w
  5020  0419  00A1               	movwf	___wmul@multiplier
  5021  041A  083E               	movf	??_basicStepperInstruction+1,w
  5022  041B  00A2               	movwf	___wmul@multiplier+1
  5023  041C  0848               	movf	basicStepperInstruction@stepMultiplier1,w
  5024  041D  00BF               	movwf	??_basicStepperInstruction+2
  5025  041E  01C0               	clrf	??_basicStepperInstruction+3
  5026  041F  083F               	movf	??_basicStepperInstruction+2,w
  5027  0420  00A3               	movwf	___wmul@multiplicand
  5028  0421  0840               	movf	??_basicStepperInstruction+3,w
  5029  0422  00A4               	movwf	___wmul@multiplicand+1
  5030  0423  318C  24E4  3180   	fcall	___wmul
  5031  0426  0020               	movlb	0	; select bank0
  5032  0427  0822               	movf	?___wmul+1,w
  5033  0428  00C3               	movwf	_basicStepperInstruction$1121+1
  5034  0429  0821               	movf	?___wmul,w
  5035  042A  00C2               	movwf	_basicStepperInstruction$1121
  5036  042B                     l3429:
  5037                           
  5038                           ;main.c: 809:     Step(UP, (numRotations*stepMultiplier1*200/2), stepSize1, (numRotation
      +                          s*stepMultiplier2*200/2), stepSize2, 1);
  5039  042B  084A               	movf	basicStepperInstruction@numRotations,w
  5040  042C  00BD               	movwf	??_basicStepperInstruction
  5041  042D  01BE               	clrf	??_basicStepperInstruction+1
  5042  042E  083D               	movf	??_basicStepperInstruction,w
  5043  042F  00A1               	movwf	___wmul@multiplier
  5044  0430  083E               	movf	??_basicStepperInstruction+1,w
  5045  0431  00A2               	movwf	___wmul@multiplier+1
  5046  0432  0849               	movf	basicStepperInstruction@stepMultiplier2,w
  5047  0433  00BF               	movwf	??_basicStepperInstruction+2
  5048  0434  01C0               	clrf	??_basicStepperInstruction+3
  5049  0435  083F               	movf	??_basicStepperInstruction+2,w
  5050  0436  00A3               	movwf	___wmul@multiplicand
  5051  0437  0840               	movf	??_basicStepperInstruction+3,w
  5052  0438  00A4               	movwf	___wmul@multiplicand+1
  5053  0439  318C  24E4  3180   	fcall	___wmul
  5054  043C  0020               	movlb	0	; select bank0
  5055  043D  0822               	movf	?___wmul+1,w
  5056  043E  00C5               	movwf	_basicStepperInstruction$1122+1
  5057  043F  0821               	movf	?___wmul,w
  5058  0440  00C4               	movwf	_basicStepperInstruction$1122
  5059  0441                     l3431:
  5060                           
  5061                           ;main.c: 809:     Step(UP, (numRotations*stepMultiplier1*200/2), stepSize1, (numRotation
      +                          s*stepMultiplier2*200/2), stepSize2, 1);
  5062  0441  3002               	movlw	2
  5063  0442  00A7               	movwf	___awdiv@divisor
  5064  0443  3000               	movlw	0
  5065  0444  00A8               	movwf	___awdiv@divisor+1
  5066  0445  0843               	movf	_basicStepperInstruction$1121+1,w
  5067  0446  00A2               	movwf	___wmul@multiplier+1
  5068  0447  0842               	movf	_basicStepperInstruction$1121,w
  5069  0448  00A1               	movwf	___wmul@multiplier
  5070  0449  30C8               	movlw	200
  5071  044A  00A3               	movwf	___wmul@multiplicand
  5072  044B  3000               	movlw	0
  5073  044C  00A4               	movwf	___wmul@multiplicand+1
  5074  044D  318C  24E4  3180   	fcall	___wmul
  5075  0450  0020               	movlb	0	; select bank0
  5076  0451  0822               	movf	?___wmul+1,w
  5077  0452  00AA               	movwf	___awdiv@dividend+1
  5078  0453  0821               	movf	?___wmul,w
  5079  0454  00A9               	movwf	___awdiv@dividend
  5080  0455  318E  268E  3180   	fcall	___awdiv
  5081  0458  0020               	movlb	0	; select bank0
  5082  0459  0828               	movf	?___awdiv+1,w
  5083  045A  00B1               	movwf	Step@num_steps1+1
  5084  045B  0827               	movf	?___awdiv,w
  5085  045C  00B0               	movwf	Step@num_steps1
  5086  045D  0846               	movf	basicStepperInstruction@stepSize1,w
  5087  045E  00BD               	movwf	??_basicStepperInstruction
  5088  045F  083D               	movf	??_basicStepperInstruction,w
  5089  0460  00B2               	movwf	Step@size1
  5090  0461  3002               	movlw	2
  5091  0462  00A7               	movwf	___awdiv@divisor
  5092  0463  3000               	movlw	0
  5093  0464  00A8               	movwf	___awdiv@divisor+1
  5094  0465  0845               	movf	_basicStepperInstruction$1122+1,w
  5095  0466  00A2               	movwf	___wmul@multiplier+1
  5096  0467  0844               	movf	_basicStepperInstruction$1122,w
  5097  0468  00A1               	movwf	___wmul@multiplier
  5098  0469  30C8               	movlw	200
  5099  046A  00A3               	movwf	___wmul@multiplicand
  5100  046B  3000               	movlw	0
  5101  046C  00A4               	movwf	___wmul@multiplicand+1
  5102  046D  318C  24E4  3180   	fcall	___wmul
  5103  0470  0020               	movlb	0	; select bank0
  5104  0471  0822               	movf	?___wmul+1,w
  5105  0472  00AA               	movwf	___awdiv@dividend+1
  5106  0473  0821               	movf	?___wmul,w
  5107  0474  00A9               	movwf	___awdiv@dividend
  5108  0475  318E  268E  3180   	fcall	___awdiv
  5109  0478  0020               	movlb	0	; select bank0
  5110  0479  0828               	movf	?___awdiv+1,w
  5111  047A  00B4               	movwf	Step@num_steps2+1
  5112  047B  0827               	movf	?___awdiv,w
  5113  047C  00B3               	movwf	Step@num_steps2
  5114  047D  0847               	movf	basicStepperInstruction@stepSize2,w
  5115  047E  00BE               	movwf	??_basicStepperInstruction+1
  5116  047F  083E               	movf	??_basicStepperInstruction+1,w
  5117  0480  00B5               	movwf	Step@size2
  5118  0481  01B6               	clrf	Step@haptic_breaths
  5119  0482  0AB6               	incf	Step@haptic_breaths,f
  5120  0483  3000               	movlw	0
  5121  0484  3187  276A  3180   	fcall	_Step
  5122  0487                     l3433:
  5123                           
  5124                           ;main.c: 812:     _delay((unsigned long)((10)*(4000000/4000.0)));
  5125  0487  300D               	movlw	13
  5126  0488  0020               	movlb	0	; select bank0
  5127  0489  00BD               	movwf	??_basicStepperInstruction
  5128  048A  30FB               	movlw	251
  5129  048B                     u1417:
  5130  048B  0B89               	decfsz	9,f
  5131  048C  2C8B               	goto	u1417
  5132  048D  0BBD               	decfsz	??_basicStepperInstruction,f
  5133  048E  2C8B               	goto	u1417
  5134  048F  3200               	nop2
  5135  0490                     l3435:
  5136                           
  5137                           ;main.c: 813:     Step(DOWN, (numRotations*stepMultiplier2*200/2), stepSize2, (numRotati
      +                          ons*stepMultiplier1*200/2), stepSize1, 1);
  5138  0490  0020               	movlb	0	; select bank0
  5139  0491  084A               	movf	basicStepperInstruction@numRotations,w
  5140  0492  00BD               	movwf	??_basicStepperInstruction
  5141  0493  01BE               	clrf	??_basicStepperInstruction+1
  5142  0494  083D               	movf	??_basicStepperInstruction,w
  5143  0495  00A1               	movwf	___wmul@multiplier
  5144  0496  083E               	movf	??_basicStepperInstruction+1,w
  5145  0497  00A2               	movwf	___wmul@multiplier+1
  5146  0498  0849               	movf	basicStepperInstruction@stepMultiplier2,w
  5147  0499  00BF               	movwf	??_basicStepperInstruction+2
  5148  049A  01C0               	clrf	??_basicStepperInstruction+3
  5149  049B  083F               	movf	??_basicStepperInstruction+2,w
  5150  049C  00A3               	movwf	___wmul@multiplicand
  5151  049D  0840               	movf	??_basicStepperInstruction+3,w
  5152  049E  00A4               	movwf	___wmul@multiplicand+1
  5153  049F  318C  24E4  3180   	fcall	___wmul
  5154  04A2  0020               	movlb	0	; select bank0
  5155  04A3  0822               	movf	?___wmul+1,w
  5156  04A4  00C3               	movwf	_basicStepperInstruction$1121+1
  5157  04A5  0821               	movf	?___wmul,w
  5158  04A6  00C2               	movwf	_basicStepperInstruction$1121
  5159  04A7                     l3437:
  5160                           
  5161                           ;main.c: 813:     Step(DOWN, (numRotations*stepMultiplier2*200/2), stepSize2, (numRotati
      +                          ons*stepMultiplier1*200/2), stepSize1, 1);
  5162  04A7  084A               	movf	basicStepperInstruction@numRotations,w
  5163  04A8  00BD               	movwf	??_basicStepperInstruction
  5164  04A9  01BE               	clrf	??_basicStepperInstruction+1
  5165  04AA  083D               	movf	??_basicStepperInstruction,w
  5166  04AB  00A1               	movwf	___wmul@multiplier
  5167  04AC  083E               	movf	??_basicStepperInstruction+1,w
  5168  04AD  00A2               	movwf	___wmul@multiplier+1
  5169  04AE  0848               	movf	basicStepperInstruction@stepMultiplier1,w
  5170  04AF  00BF               	movwf	??_basicStepperInstruction+2
  5171  04B0  01C0               	clrf	??_basicStepperInstruction+3
  5172  04B1  083F               	movf	??_basicStepperInstruction+2,w
  5173  04B2  00A3               	movwf	___wmul@multiplicand
  5174  04B3  0840               	movf	??_basicStepperInstruction+3,w
  5175  04B4  00A4               	movwf	___wmul@multiplicand+1
  5176  04B5  318C  24E4  3180   	fcall	___wmul
  5177  04B8  0020               	movlb	0	; select bank0
  5178  04B9  0822               	movf	?___wmul+1,w
  5179  04BA  00C5               	movwf	_basicStepperInstruction$1122+1
  5180  04BB  0821               	movf	?___wmul,w
  5181  04BC  00C4               	movwf	_basicStepperInstruction$1122
  5182                           
  5183                           ;main.c: 813:     Step(DOWN, (numRotations*stepMultiplier2*200/2), stepSize2, (numRotati
      +                          ons*stepMultiplier1*200/2), stepSize1, 1);
  5184  04BD  3002               	movlw	2
  5185  04BE  00A7               	movwf	___awdiv@divisor
  5186  04BF  3000               	movlw	0
  5187  04C0  00A8               	movwf	___awdiv@divisor+1
  5188  04C1  0843               	movf	_basicStepperInstruction$1121+1,w
  5189  04C2  00A2               	movwf	___wmul@multiplier+1
  5190  04C3  0842               	movf	_basicStepperInstruction$1121,w
  5191  04C4  00A1               	movwf	___wmul@multiplier
  5192  04C5  30C8               	movlw	200
  5193  04C6  00A3               	movwf	___wmul@multiplicand
  5194  04C7  3000               	movlw	0
  5195  04C8  00A4               	movwf	___wmul@multiplicand+1
  5196  04C9  318C  24E4  3180   	fcall	___wmul
  5197  04CC  0020               	movlb	0	; select bank0
  5198  04CD  0822               	movf	?___wmul+1,w
  5199  04CE  00AA               	movwf	___awdiv@dividend+1
  5200  04CF  0821               	movf	?___wmul,w
  5201  04D0  00A9               	movwf	___awdiv@dividend
  5202  04D1  318E  268E  3180   	fcall	___awdiv
  5203  04D4  0020               	movlb	0	; select bank0
  5204  04D5  0828               	movf	?___awdiv+1,w
  5205  04D6  00B1               	movwf	Step@num_steps1+1
  5206  04D7  0827               	movf	?___awdiv,w
  5207  04D8  00B0               	movwf	Step@num_steps1
  5208  04D9  0847               	movf	basicStepperInstruction@stepSize2,w
  5209  04DA  00BD               	movwf	??_basicStepperInstruction
  5210  04DB  083D               	movf	??_basicStepperInstruction,w
  5211  04DC  00B2               	movwf	Step@size1
  5212  04DD  3002               	movlw	2
  5213  04DE  00A7               	movwf	___awdiv@divisor
  5214  04DF  3000               	movlw	0
  5215  04E0  00A8               	movwf	___awdiv@divisor+1
  5216  04E1  0845               	movf	_basicStepperInstruction$1122+1,w
  5217  04E2  00A2               	movwf	___wmul@multiplier+1
  5218  04E3  0844               	movf	_basicStepperInstruction$1122,w
  5219  04E4  00A1               	movwf	___wmul@multiplier
  5220  04E5  30C8               	movlw	200
  5221  04E6  00A3               	movwf	___wmul@multiplicand
  5222  04E7  3000               	movlw	0
  5223  04E8  00A4               	movwf	___wmul@multiplicand+1
  5224  04E9  318C  24E4  3180   	fcall	___wmul
  5225  04EC  0020               	movlb	0	; select bank0
  5226  04ED  0822               	movf	?___wmul+1,w
  5227  04EE  00AA               	movwf	___awdiv@dividend+1
  5228  04EF  0821               	movf	?___wmul,w
  5229  04F0  00A9               	movwf	___awdiv@dividend
  5230  04F1  318E  268E  3180   	fcall	___awdiv
  5231  04F4  0020               	movlb	0	; select bank0
  5232  04F5  0828               	movf	?___awdiv+1,w
  5233  04F6  00B4               	movwf	Step@num_steps2+1
  5234  04F7  0827               	movf	?___awdiv,w
  5235  04F8  00B3               	movwf	Step@num_steps2
  5236  04F9  0846               	movf	basicStepperInstruction@stepSize1,w
  5237  04FA  00BE               	movwf	??_basicStepperInstruction+1
  5238  04FB  083E               	movf	??_basicStepperInstruction+1,w
  5239  04FC  00B5               	movwf	Step@size2
  5240  04FD  01B6               	clrf	Step@haptic_breaths
  5241  04FE  0AB6               	incf	Step@haptic_breaths,f
  5242  04FF  3001               	movlw	1
  5243  0500  3187  276A  3180   	fcall	_Step
  5244  0503                     l3439:
  5245                           
  5246                           ;main.c: 816:     _delay((unsigned long)((10)*(4000000/4000.0)));
  5247  0503  300D               	movlw	13
  5248  0504  0020               	movlb	0	; select bank0
  5249  0505  00BD               	movwf	??_basicStepperInstruction
  5250  0506  30FB               	movlw	251
  5251  0507                     u1427:
  5252  0507  0B89               	decfsz	9,f
  5253  0508  2D07               	goto	u1427
  5254  0509  0BBD               	decfsz	??_basicStepperInstruction,f
  5255  050A  2D07               	goto	u1427
  5256  050B  3200               	nop2
  5257  050C                     l3441:
  5258                           
  5259                           ;main.c: 819:     _delay((unsigned long)((10)*(4000000/4000.0)));
  5260  050C  300D               	movlw	13
  5261  050D  0020               	movlb	0	; select bank0
  5262  050E  00BD               	movwf	??_basicStepperInstruction
  5263  050F  30FB               	movlw	251
  5264  0510                     u1437:
  5265  0510  0B89               	decfsz	9,f
  5266  0511  2D10               	goto	u1437
  5267  0512  0BBD               	decfsz	??_basicStepperInstruction,f
  5268  0513  2D10               	goto	u1437
  5269  0514  3200               	nop2
  5270  0515                     l400:
  5271  0515  0008               	return
  5272  0516                     __end_of_basicStepperInstruction:
  5273                           
  5274                           	psect	text17
  5275  0C2E                     __ptext17:	
  5276 ;; *************** function _set_INTERRUPT_BREAK_FLAG *****************
  5277 ;; Defined at:
  5278 ;;		line 65 in file "AvthorStates/AvthorStates.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;  in              1    wreg     _Bool 
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;  in              1    1[BANK0 ] _Bool 
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  1    wreg      void 
  5285 ;; Registers used:
  5286 ;;		wreg
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;Total ram usage:        2 bytes
  5297 ;; Hardware stack levels used: 1
  5298 ;; Hardware stack levels required when called: 3
  5299 ;; This function calls:
  5300 ;;		Nothing
  5301 ;; This function is called by:
  5302 ;;		_main
  5303 ;;		_basicStepperInstruction
  5304 ;;		_slowStepTest
  5305 ;;		_calibrate
  5306 ;;		_topButtonTrigger
  5307 ;;		_bottomButtonTrigger
  5308 ;;		_eighthsTest
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312  0C2E                     _set_INTERRUPT_BREAK_FLAG:	
  5313                           ;psect for function _set_INTERRUPT_BREAK_FLAG
  5314                           
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in _set_INTERRUPT_BREAK_FLAG: [wreg]
  5318                           ;set_INTERRUPT_BREAK_FLAG@in stored from wreg
  5319  0C2E  0020               	movlb	0	; select bank0
  5320  0C2F  00A1               	movwf	set_INTERRUPT_BREAK_FLAG@in
  5321  0C30                     l3057:
  5322                           
  5323                           ;AvthorStates/AvthorStates.c: 66:     Avthor_States.INTERRUPT_BREAK_FLAG = in;
  5324  0C30  0821               	movf	set_INTERRUPT_BREAK_FLAG@in,w
  5325  0C31  00A0               	movwf	??_set_INTERRUPT_BREAK_FLAG
  5326  0C32  0820               	movf	??_set_INTERRUPT_BREAK_FLAG,w
  5327  0C33  00E1               	movwf	_Avthor_States+1	;volatile
  5328  0C34                     l44:
  5329  0C34  0008               	return
  5330  0C35                     __end_of_set_INTERRUPT_BREAK_FLAG:
  5331                           
  5332                           	psect	text18
  5333  0CE4                     __ptext18:	
  5334 ;; *************** function ___wmul *****************
  5335 ;; Defined at:
  5336 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  multiplier      2    1[BANK0 ] unsigned int 
  5339 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  product         2    5[BANK0 ] unsigned int 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  2    1[BANK0 ] unsigned int 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5351 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;Total ram usage:        6 bytes
  5356 ;; Hardware stack levels used: 1
  5357 ;; Hardware stack levels required when called: 3
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_main
  5362 ;;		_basicStepperInstruction
  5363 ;;		_topButtonTrigger
  5364 ;;		_bottomButtonTrigger
  5365 ;;		_eighthsTest
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369  0CE4                     ___wmul:	
  5370                           ;psect for function ___wmul
  5371                           
  5372  0CE4                     l3119:	
  5373                           ;incstack = 0
  5374                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5375                           
  5376  0CE4  0020               	movlb	0	; select bank0
  5377  0CE5  01A5               	clrf	___wmul@product
  5378  0CE6  01A6               	clrf	___wmul@product+1
  5379  0CE7                     l3121:
  5380  0CE7  1C21               	btfss	___wmul@multiplier,0
  5381  0CE8  2CEA               	goto	u1061
  5382  0CE9  2CEB               	goto	u1060
  5383  0CEA                     u1061:
  5384  0CEA  2CEF               	goto	l637
  5385  0CEB                     u1060:
  5386  0CEB                     l3123:
  5387  0CEB  0823               	movf	___wmul@multiplicand,w
  5388  0CEC  07A5               	addwf	___wmul@product,f
  5389  0CED  0824               	movf	___wmul@multiplicand+1,w
  5390  0CEE  3DA6               	addwfc	___wmul@product+1,f
  5391  0CEF                     l637:
  5392  0CEF  3001               	movlw	1
  5393  0CF0                     u1075:
  5394  0CF0  35A3               	lslf	___wmul@multiplicand,f
  5395  0CF1  0DA4               	rlf	___wmul@multiplicand+1,f
  5396  0CF2  0B89               	decfsz	9,f
  5397  0CF3  2CF0               	goto	u1075
  5398  0CF4                     l3125:
  5399  0CF4  3001               	movlw	1
  5400  0CF5                     u1085:
  5401  0CF5  36A2               	lsrf	___wmul@multiplier+1,f
  5402  0CF6  0CA1               	rrf	___wmul@multiplier,f
  5403  0CF7  0B89               	decfsz	9,f
  5404  0CF8  2CF5               	goto	u1085
  5405  0CF9                     l3127:
  5406  0CF9  0821               	movf	___wmul@multiplier,w
  5407  0CFA  0422               	iorwf	___wmul@multiplier+1,w
  5408  0CFB  1D03               	btfss	3,2
  5409  0CFC  2CFE               	goto	u1091
  5410  0CFD  2CFF               	goto	u1090
  5411  0CFE                     u1091:
  5412  0CFE  2CE7               	goto	l3121
  5413  0CFF                     u1090:
  5414  0CFF                     l3129:
  5415  0CFF  0826               	movf	___wmul@product+1,w
  5416  0D00  00A2               	movwf	?___wmul+1
  5417  0D01  0825               	movf	___wmul@product,w
  5418  0D02  00A1               	movwf	?___wmul
  5419  0D03                     l639:
  5420  0D03  0008               	return
  5421  0D04                     __end_of___wmul:
  5422                           
  5423                           	psect	text19
  5424  0E8E                     __ptext19:	
  5425 ;; *************** function ___awdiv *****************
  5426 ;; Defined at:
  5427 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\awdiv.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  divisor         2    7[BANK0 ] int 
  5430 ;;  dividend        2    9[BANK0 ] int 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  quotient        2   14[BANK0 ] int 
  5433 ;;  sign            1   13[BANK0 ] unsigned char 
  5434 ;;  counter         1   12[BANK0 ] unsigned char 
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  2    7[BANK0 ] int 
  5437 ;; Registers used:
  5438 ;;		wreg, status,2, status,0
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;Total ram usage:        9 bytes
  5449 ;; Hardware stack levels used: 1
  5450 ;; Hardware stack levels required when called: 3
  5451 ;; This function calls:
  5452 ;;		Nothing
  5453 ;; This function is called by:
  5454 ;;		_basicStepperInstruction
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458  0E8E                     ___awdiv:	
  5459                           ;psect for function ___awdiv
  5460                           
  5461  0E8E                     l3133:	
  5462                           ;incstack = 0
  5463                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5464                           
  5465  0E8E  0020               	movlb	0	; select bank0
  5466  0E8F  01AD               	clrf	___awdiv@sign
  5467  0E90                     l3135:
  5468  0E90  1FA8               	btfss	___awdiv@divisor+1,7
  5469  0E91  2E93               	goto	u1101
  5470  0E92  2E94               	goto	u1100
  5471  0E93                     u1101:
  5472  0E93  2E9B               	goto	l3141
  5473  0E94                     u1100:
  5474  0E94                     l3137:
  5475  0E94  09A7               	comf	___awdiv@divisor,f
  5476  0E95  09A8               	comf	___awdiv@divisor+1,f
  5477  0E96  0AA7               	incf	___awdiv@divisor,f
  5478  0E97  1903               	skipnz
  5479  0E98  0AA8               	incf	___awdiv@divisor+1,f
  5480  0E99                     l3139:
  5481  0E99  01AD               	clrf	___awdiv@sign
  5482  0E9A  0AAD               	incf	___awdiv@sign,f
  5483  0E9B                     l3141:
  5484  0E9B  1FAA               	btfss	___awdiv@dividend+1,7
  5485  0E9C  2E9E               	goto	u1111
  5486  0E9D  2E9F               	goto	u1110
  5487  0E9E                     u1111:
  5488  0E9E  2EA8               	goto	l3147
  5489  0E9F                     u1110:
  5490  0E9F                     l3143:
  5491  0E9F  09A9               	comf	___awdiv@dividend,f
  5492  0EA0  09AA               	comf	___awdiv@dividend+1,f
  5493  0EA1  0AA9               	incf	___awdiv@dividend,f
  5494  0EA2  1903               	skipnz
  5495  0EA3  0AAA               	incf	___awdiv@dividend+1,f
  5496  0EA4                     l3145:
  5497  0EA4  3001               	movlw	1
  5498  0EA5  00AB               	movwf	??___awdiv
  5499  0EA6  082B               	movf	??___awdiv,w
  5500  0EA7  06AD               	xorwf	___awdiv@sign,f
  5501  0EA8                     l3147:
  5502  0EA8  01AE               	clrf	___awdiv@quotient
  5503  0EA9  01AF               	clrf	___awdiv@quotient+1
  5504  0EAA                     l3149:
  5505  0EAA  0827               	movf	___awdiv@divisor,w
  5506  0EAB  0428               	iorwf	___awdiv@divisor+1,w
  5507  0EAC  1903               	btfsc	3,2
  5508  0EAD  2EAF               	goto	u1121
  5509  0EAE  2EB0               	goto	u1120
  5510  0EAF                     u1121:
  5511  0EAF  2EDF               	goto	l3169
  5512  0EB0                     u1120:
  5513  0EB0                     l3151:
  5514  0EB0  01AC               	clrf	___awdiv@counter
  5515  0EB1  0AAC               	incf	___awdiv@counter,f
  5516  0EB2  2EBC               	goto	l3157
  5517  0EB3                     l3153:
  5518  0EB3  3001               	movlw	1
  5519  0EB4                     u1135:
  5520  0EB4  35A7               	lslf	___awdiv@divisor,f
  5521  0EB5  0DA8               	rlf	___awdiv@divisor+1,f
  5522  0EB6  0B89               	decfsz	9,f
  5523  0EB7  2EB4               	goto	u1135
  5524  0EB8                     l3155:
  5525  0EB8  3001               	movlw	1
  5526  0EB9  00AB               	movwf	??___awdiv
  5527  0EBA  082B               	movf	??___awdiv,w
  5528  0EBB  07AC               	addwf	___awdiv@counter,f
  5529  0EBC                     l3157:
  5530  0EBC  1FA8               	btfss	___awdiv@divisor+1,7
  5531  0EBD  2EBF               	goto	u1141
  5532  0EBE  2EC0               	goto	u1140
  5533  0EBF                     u1141:
  5534  0EBF  2EB3               	goto	l3153
  5535  0EC0                     u1140:
  5536  0EC0                     l3159:
  5537  0EC0  3001               	movlw	1
  5538  0EC1                     u1155:
  5539  0EC1  35AE               	lslf	___awdiv@quotient,f
  5540  0EC2  0DAF               	rlf	___awdiv@quotient+1,f
  5541  0EC3  0B89               	decfsz	9,f
  5542  0EC4  2EC1               	goto	u1155
  5543  0EC5  0828               	movf	___awdiv@divisor+1,w
  5544  0EC6  022A               	subwf	___awdiv@dividend+1,w
  5545  0EC7  1D03               	skipz
  5546  0EC8  2ECB               	goto	u1165
  5547  0EC9  0827               	movf	___awdiv@divisor,w
  5548  0ECA  0229               	subwf	___awdiv@dividend,w
  5549  0ECB                     u1165:
  5550  0ECB  1C03               	skipc
  5551  0ECC  2ECE               	goto	u1161
  5552  0ECD  2ECF               	goto	u1160
  5553  0ECE                     u1161:
  5554  0ECE  2ED4               	goto	l3165
  5555  0ECF                     u1160:
  5556  0ECF                     l3161:
  5557  0ECF  0827               	movf	___awdiv@divisor,w
  5558  0ED0  02A9               	subwf	___awdiv@dividend,f
  5559  0ED1  0828               	movf	___awdiv@divisor+1,w
  5560  0ED2  3BAA               	subwfb	___awdiv@dividend+1,f
  5561  0ED3                     l3163:
  5562  0ED3  142E               	bsf	___awdiv@quotient,0
  5563  0ED4                     l3165:
  5564  0ED4  3001               	movlw	1
  5565  0ED5                     u1175:
  5566  0ED5  36A8               	lsrf	___awdiv@divisor+1,f
  5567  0ED6  0CA7               	rrf	___awdiv@divisor,f
  5568  0ED7  0B89               	decfsz	9,f
  5569  0ED8  2ED5               	goto	u1175
  5570  0ED9                     l3167:
  5571  0ED9  3001               	movlw	1
  5572  0EDA  02AC               	subwf	___awdiv@counter,f
  5573  0EDB  1D03               	btfss	3,2
  5574  0EDC  2EDE               	goto	u1181
  5575  0EDD  2EDF               	goto	u1180
  5576  0EDE                     u1181:
  5577  0EDE  2EC0               	goto	l3159
  5578  0EDF                     u1180:
  5579  0EDF                     l3169:
  5580  0EDF  082D               	movf	___awdiv@sign,w
  5581  0EE0  1903               	btfsc	3,2
  5582  0EE1  2EE3               	goto	u1191
  5583  0EE2  2EE4               	goto	u1190
  5584  0EE3                     u1191:
  5585  0EE3  2EE9               	goto	l3173
  5586  0EE4                     u1190:
  5587  0EE4                     l3171:
  5588  0EE4  09AE               	comf	___awdiv@quotient,f
  5589  0EE5  09AF               	comf	___awdiv@quotient+1,f
  5590  0EE6  0AAE               	incf	___awdiv@quotient,f
  5591  0EE7  1903               	skipnz
  5592  0EE8  0AAF               	incf	___awdiv@quotient+1,f
  5593  0EE9                     l3173:
  5594  0EE9  082F               	movf	___awdiv@quotient+1,w
  5595  0EEA  00A8               	movwf	?___awdiv+1
  5596  0EEB  082E               	movf	___awdiv@quotient,w
  5597  0EEC  00A7               	movwf	?___awdiv
  5598  0EED                     l790:
  5599  0EED  0008               	return
  5600  0EEE                     __end_of___awdiv:
  5601                           
  5602                           	psect	text20
  5603  076A                     __ptext20:	
  5604 ;; *************** function _Step *****************
  5605 ;; Defined at:
  5606 ;;		line 4 in file "step/step.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  dir             1    wreg     enum E2177
  5609 ;;  num_steps1      2   16[BANK0 ] unsigned short 
  5610 ;;  size1           1   18[BANK0 ] enum E2181
  5611 ;;  num_steps2      2   19[BANK0 ] unsigned short 
  5612 ;;  size2           1   21[BANK0 ] enum E2181
  5613 ;;  haptic_breat    1   22[BANK0 ] _Bool 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  dir             1   28[BANK0 ] enum E2177
  5616 ;;  i               2   26[BANK0 ] unsigned short 
  5617 ;;  i               2   24[BANK0 ] unsigned short 
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  1    wreg      void 
  5620 ;; Registers used:
  5621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5627 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5628 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;Total ram usage:       13 bytes
  5632 ;; Hardware stack levels used: 1
  5633 ;; Hardware stack levels required when called: 5
  5634 ;; This function calls:
  5635 ;;		_get_INTERRUPT_BREAK_FLAG
  5636 ;;		_sendHapticCommand
  5637 ;;		_setDirection
  5638 ;;		_setStepSize
  5639 ;;		_stepperSleep
  5640 ;; This function is called by:
  5641 ;;		_main
  5642 ;;		_basicStepperInstruction
  5643 ;;		_inchUp
  5644 ;;		_inchDown
  5645 ;;		_topButtonTrigger
  5646 ;;		_bottomButtonTrigger
  5647 ;;		_eighthsTest
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651  076A                     _Step:	
  5652                           ;psect for function _Step
  5653                           
  5654                           
  5655                           ;incstack = 0
  5656                           ; Regs used in _Step: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5657                           ;Step@dir stored from wreg
  5658  076A  0020               	movlb	0	; select bank0
  5659  076B  00BC               	movwf	Step@dir
  5660  076C                     l3071:
  5661                           
  5662                           ;step/step.c: 6:     stepperSleep(0);
  5663  076C  3000               	movlw	0
  5664  076D  318C  2483  3187   	fcall	_stepperSleep
  5665                           
  5666                           ;step/step.c: 7:     setDirection(dir);
  5667  0770  0020               	movlb	0	; select bank0
  5668  0771  083C               	movf	Step@dir,w
  5669  0772  318C  2476  3187   	fcall	_setDirection
  5670  0775                     l3073:
  5671                           
  5672                           ;step/step.c: 9:     setStepSize(size1);
  5673  0775  0020               	movlb	0	; select bank0
  5674  0776  0832               	movf	Step@size1,w
  5675  0777  318E  2650  3187   	fcall	_setStepSize
  5676  077A                     l3075:
  5677                           
  5678                           ;step/step.c: 12:     if(dir == UP){
  5679  077A  0020               	movlb	0	; select bank0
  5680  077B  083C               	movf	Step@dir,w
  5681  077C  1D03               	btfss	3,2
  5682  077D  2F7F               	goto	u1001
  5683  077E  2F80               	goto	u1000
  5684  077F                     u1001:
  5685  077F  2F85               	goto	l3079
  5686  0780                     u1000:
  5687  0780                     l3077:
  5688                           
  5689                           ;step/step.c: 15:         sendHapticCommand(1);
  5690  0780  3001               	movlw	1
  5691  0781  3187  27FF  3187   	fcall	_sendHapticCommand
  5692                           
  5693                           ;step/step.c: 16:     }else {
  5694  0784  2F89               	goto	l3081
  5695  0785                     l3079:
  5696                           
  5697                           ;step/step.c: 19:         sendHapticCommand(5);
  5698  0785  3005               	movlw	5
  5699  0786  3187  27FF  3187   	fcall	_sendHapticCommand
  5700  0789                     l3081:
  5701                           
  5702                           ;step/step.c: 35:     _delay((unsigned long)((20)*(4000000/4000.0)));
  5703  0789  301A               	movlw	26
  5704  078A  0020               	movlb	0	; select bank0
  5705  078B  00B7               	movwf	??_Step
  5706  078C  30F8               	movlw	248
  5707  078D                     u1447:
  5708  078D  0B89               	decfsz	9,f
  5709  078E  2F8D               	goto	u1447
  5710  078F  0BB7               	decfsz	??_Step,f
  5711  0790  2F8D               	goto	u1447
  5712  0791  0000               	nop
  5713  0792                     l3083:
  5714                           
  5715                           ;step/step.c: 45:     for(uint16_t i = 0; i < (num_steps1); i++){
  5716  0792  0020               	movlb	0	; select bank0
  5717  0793  01B8               	clrf	Step@i
  5718  0794  01B9               	clrf	Step@i+1
  5719  0795  2FB0               	goto	l440
  5720  0796                     l3085:
  5721                           
  5722                           ;step/step.c: 46:         if(get_INTERRUPT_BREAK_FLAG()){
  5723  0796  318B  23F6  3187   	fcall	_get_INTERRUPT_BREAK_FLAG
  5724  0799  3A00               	xorlw	0
  5725  079A  1903               	skipnz
  5726  079B  2F9D               	goto	u1011
  5727  079C  2F9E               	goto	u1010
  5728  079D                     u1011:
  5729  079D  2F9F               	goto	l445
  5730  079E                     u1010:
  5731  079E  2FBA               	goto	l3095
  5732  079F                     l445:	
  5733                           ;step/step.c: 49:             do { LATCbits.LATC1 = 1; } while(0);
  5734                           
  5735  079F  0022               	movlb	2	; select bank2
  5736  07A0  148E               	bsf	14,1	;volatile
  5737  07A1                     l3091:
  5738                           
  5739                           ;step/step.c: 50:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  5740  07A1  30A6               	movlw	166
  5741  07A2                     u1457:
  5742  07A2  0B89               	decfsz	9,f
  5743  07A3  2FA2               	goto	u1457
  5744  07A4  3200               	nop2
  5745  07A5                     l3093:
  5746  07A5  0022               	movlb	2	; select bank2
  5747  07A6  108E               	bcf	14,1	;volatile
  5748  07A7                     l448:
  5749                           
  5750                           ;step/step.c: 52:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  5751  07A7  30A6               	movlw	166
  5752  07A8                     u1467:
  5753  07A8  0B89               	decfsz	9,f
  5754  07A9  2FA8               	goto	u1467
  5755  07AA  3200               	nop2
  5756  07AB                     l444:	
  5757                           ;step/step.c: 65:         }
  5758                           
  5759                           
  5760                           ;step/step.c: 66:     }
  5761  07AB  3001               	movlw	1
  5762  07AC  0020               	movlb	0	; select bank0
  5763  07AD  07B8               	addwf	Step@i,f
  5764  07AE  3000               	movlw	0
  5765  07AF  3DB9               	addwfc	Step@i+1,f
  5766  07B0                     l440:
  5767  07B0  0831               	movf	Step@num_steps1+1,w
  5768  07B1  0239               	subwf	Step@i+1,w
  5769  07B2  1D03               	skipz
  5770  07B3  2FB6               	goto	u1025
  5771  07B4  0830               	movf	Step@num_steps1,w
  5772  07B5  0238               	subwf	Step@i,w
  5773  07B6                     u1025:
  5774  07B6  1C03               	skipc
  5775  07B7  2FB9               	goto	u1021
  5776  07B8  2FBA               	goto	u1020
  5777  07B9                     u1021:
  5778  07B9  2F96               	goto	l3085
  5779  07BA                     u1020:
  5780  07BA                     l3095:
  5781                           
  5782                           ;step/step.c: 70:     stepperSleep(0);
  5783  07BA  3000               	movlw	0
  5784  07BB  318C  2483  3187   	fcall	_stepperSleep
  5785  07BE                     l3097:
  5786                           
  5787                           ;step/step.c: 71:     setStepSize(size2);
  5788  07BE  0020               	movlb	0	; select bank0
  5789  07BF  0835               	movf	Step@size2,w
  5790  07C0  318E  2650  3187   	fcall	_setStepSize
  5791  07C3                     l3099:
  5792                           
  5793                           ;step/step.c: 74:     for(uint16_t i = 0; i < (num_steps2); i++){
  5794  07C3  0020               	movlb	0	; select bank0
  5795  07C4  01BA               	clrf	Step@i_616
  5796  07C5  01BB               	clrf	Step@i_616+1
  5797  07C6  2FE1               	goto	l449
  5798  07C7                     l3101:
  5799                           
  5800                           ;step/step.c: 75:         if(get_INTERRUPT_BREAK_FLAG()){
  5801  07C7  318B  23F6  3187   	fcall	_get_INTERRUPT_BREAK_FLAG
  5802  07CA  3A00               	xorlw	0
  5803  07CB  1903               	skipnz
  5804  07CC  2FCE               	goto	u1031
  5805  07CD  2FCF               	goto	u1030
  5806  07CE                     u1031:
  5807  07CE  2FD0               	goto	l454
  5808  07CF                     u1030:
  5809  07CF  2FEB               	goto	l3111
  5810  07D0                     l454:	
  5811                           ;step/step.c: 78:             do { LATCbits.LATC1 = 1; } while(0);
  5812                           
  5813  07D0  0022               	movlb	2	; select bank2
  5814  07D1  148E               	bsf	14,1	;volatile
  5815  07D2                     l3107:
  5816                           
  5817                           ;step/step.c: 79:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  5818  07D2  30A6               	movlw	166
  5819  07D3                     u1477:
  5820  07D3  0B89               	decfsz	9,f
  5821  07D4  2FD3               	goto	u1477
  5822  07D5  3200               	nop2
  5823  07D6                     l3109:
  5824  07D6  0022               	movlb	2	; select bank2
  5825  07D7  108E               	bcf	14,1	;volatile
  5826  07D8                     l457:
  5827                           
  5828                           ;step/step.c: 81:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  5829  07D8  30A6               	movlw	166
  5830  07D9                     u1487:
  5831  07D9  0B89               	decfsz	9,f
  5832  07DA  2FD9               	goto	u1487
  5833  07DB  3200               	nop2
  5834  07DC                     l453:	
  5835                           ;step/step.c: 94:         }
  5836                           
  5837                           
  5838                           ;step/step.c: 95:     }
  5839  07DC  3001               	movlw	1
  5840  07DD  0020               	movlb	0	; select bank0
  5841  07DE  07BA               	addwf	Step@i_616,f
  5842  07DF  3000               	movlw	0
  5843  07E0  3DBB               	addwfc	Step@i_616+1,f
  5844  07E1                     l449:
  5845  07E1  0834               	movf	Step@num_steps2+1,w
  5846  07E2  023B               	subwf	Step@i_616+1,w
  5847  07E3  1D03               	skipz
  5848  07E4  2FE7               	goto	u1045
  5849  07E5  0833               	movf	Step@num_steps2,w
  5850  07E6  023A               	subwf	Step@i_616,w
  5851  07E7                     u1045:
  5852  07E7  1C03               	skipc
  5853  07E8  2FEA               	goto	u1041
  5854  07E9  2FEB               	goto	u1040
  5855  07EA                     u1041:
  5856  07EA  2FC7               	goto	l3101
  5857  07EB                     u1040:
  5858  07EB                     l3111:
  5859                           
  5860                           ;step/step.c: 97:     stepperSleep(1);
  5861  07EB  3001               	movlw	1
  5862  07EC  318C  2483  3187   	fcall	_stepperSleep
  5863  07EF                     l3113:
  5864                           
  5865                           ;step/step.c: 99:     if(dir == UP){
  5866  07EF  0020               	movlb	0	; select bank0
  5867  07F0  083C               	movf	Step@dir,w
  5868  07F1  1D03               	btfss	3,2
  5869  07F2  2FF4               	goto	u1051
  5870  07F3  2FF5               	goto	u1050
  5871  07F4                     u1051:
  5872  07F4  2FFA               	goto	l3117
  5873  07F5                     u1050:
  5874  07F5                     l3115:
  5875                           
  5876                           ;step/step.c: 102:         sendHapticCommand(2);
  5877  07F5  3002               	movlw	2
  5878  07F6  3187  27FF  3187   	fcall	_sendHapticCommand
  5879                           
  5880                           ;step/step.c: 103:     }else {
  5881  07F9  2FFE               	goto	l460
  5882  07FA                     l3117:
  5883                           
  5884                           ;step/step.c: 106:         sendHapticCommand(4);
  5885  07FA  3004               	movlw	4
  5886  07FB  3187  27FF  3187   	fcall	_sendHapticCommand
  5887  07FE                     l460:
  5888  07FE  0008               	return
  5889  07FF                     __end_of_Step:
  5890                           
  5891                           	psect	text21
  5892  0E50                     __ptext21:	
  5893 ;; *************** function _setStepSize *****************
  5894 ;; Defined at:
  5895 ;;		line 198 in file "step/step.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  size            1    wreg     enum E2181
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  size            1    3[BANK0 ] enum E2181
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      void 
  5902 ;; Registers used:
  5903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;Total ram usage:        3 bytes
  5914 ;; Hardware stack levels used: 1
  5915 ;; Hardware stack levels required when called: 4
  5916 ;; This function calls:
  5917 ;;		_stepperSleep
  5918 ;; This function is called by:
  5919 ;;		_Step
  5920 ;;		_slowStepTest
  5921 ;;		_moveUntilZ
  5922 ;;		_calibrate
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926  0E50                     _setStepSize:	
  5927                           ;psect for function _setStepSize
  5928                           
  5929                           
  5930                           ;incstack = 0
  5931                           ; Regs used in _setStepSize: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5932                           ;setStepSize@size stored from wreg
  5933  0E50  0020               	movlb	0	; select bank0
  5934  0E51  00A3               	movwf	setStepSize@size
  5935  0E52                     l3033:
  5936                           
  5937                           ;step/step.c: 199:     switch(size){
  5938  0E52  2E71               	goto	l3039
  5939  0E53                     l520:	
  5940                           ;step/step.c: 201:             do { LATAbits.LATA5 = 0; } while(0);
  5941                           
  5942  0E53  0022               	movlb	2	; select bank2
  5943  0E54  128C               	bcf	12,5	;volatile
  5944  0E55                     l522:	
  5945                           ;step/step.c: 202:             do { LATCbits.LATC3 = 0; } while(0);
  5946                           
  5947  0E55  118E               	bcf	14,3	;volatile
  5948  0E56                     l524:	
  5949                           ;step/step.c: 203:             do { LATAbits.LATA4 = 0; } while(0);
  5950                           
  5951  0E56  120C               	bcf	12,4	;volatile
  5952  0E57  2E8D               	goto	l557
  5953  0E58                     l528:	
  5954                           ;step/step.c: 206:             do { LATAbits.LATA5 = 1; } while(0);
  5955                           
  5956  0E58  0022               	movlb	2	; select bank2
  5957  0E59  168C               	bsf	12,5	;volatile
  5958  0E5A                     l530:	
  5959                           ;step/step.c: 207:             do { LATCbits.LATC3 = 0; } while(0);
  5960                           
  5961  0E5A  118E               	bcf	14,3	;volatile
  5962  0E5B                     l532:	
  5963                           ;step/step.c: 208:             do { LATAbits.LATA4 = 0; } while(0);
  5964                           
  5965  0E5B  120C               	bcf	12,4	;volatile
  5966  0E5C  2E8D               	goto	l557
  5967  0E5D                     l535:	
  5968                           ;step/step.c: 211:             do { LATAbits.LATA5 = 0; } while(0);
  5969                           
  5970  0E5D  0022               	movlb	2	; select bank2
  5971  0E5E  128C               	bcf	12,5	;volatile
  5972  0E5F                     l537:	
  5973                           ;step/step.c: 212:             do { LATCbits.LATC3 = 1; } while(0);
  5974                           
  5975  0E5F  158E               	bsf	14,3	;volatile
  5976  0E60                     l539:	
  5977                           ;step/step.c: 213:             do { LATAbits.LATA4 = 0; } while(0);
  5978                           
  5979  0E60  120C               	bcf	12,4	;volatile
  5980  0E61  2E8D               	goto	l557
  5981  0E62                     l542:	
  5982                           ;step/step.c: 216:             do { LATAbits.LATA5 = 1; } while(0);
  5983                           
  5984  0E62  0022               	movlb	2	; select bank2
  5985  0E63  168C               	bsf	12,5	;volatile
  5986  0E64                     l544:	
  5987                           ;step/step.c: 217:             do { LATCbits.LATC3 = 1; } while(0);
  5988                           
  5989  0E64  158E               	bsf	14,3	;volatile
  5990  0E65                     l546:	
  5991                           ;step/step.c: 218:             do { LATAbits.LATA4 = 0; } while(0);
  5992                           
  5993  0E65  120C               	bcf	12,4	;volatile
  5994  0E66  2E8D               	goto	l557
  5995  0E67                     l549:	
  5996                           ;step/step.c: 221:             do { LATAbits.LATA5 = 1; } while(0);
  5997                           
  5998  0E67  0022               	movlb	2	; select bank2
  5999  0E68  168C               	bsf	12,5	;volatile
  6000  0E69                     l551:	
  6001                           ;step/step.c: 222:             do { LATCbits.LATC3 = 1; } while(0);
  6002                           
  6003  0E69  158E               	bsf	14,3	;volatile
  6004  0E6A                     l553:	
  6005                           ;step/step.c: 223:             do { LATAbits.LATA4 = 1; } while(0);
  6006                           
  6007  0E6A  160C               	bsf	12,4	;volatile
  6008  0E6B  2E8D               	goto	l557
  6009  0E6C                     l3035:
  6010                           
  6011                           ;step/step.c: 227:             stepperSleep(1);
  6012  0E6C  3001               	movlw	1
  6013  0E6D  318C  2483  318E   	fcall	_stepperSleep
  6014                           
  6015                           ;step/step.c: 232:             break;
  6016  0E70  2E8D               	goto	l557
  6017  0E71                     l3039:
  6018  0E71  0823               	movf	setStepSize@size,w
  6019  0E72  00A1               	movwf	??_setStepSize
  6020  0E73  01A2               	clrf	??_setStepSize+1
  6021                           
  6022                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6023                           ; Switch size 1, requested type "simple"
  6024                           ; Number of cases is 1, Range of values is 0 to 0
  6025                           ; switch strategies available:
  6026                           ; Name         Instructions Cycles
  6027                           ; simple_byte            4     3 (average)
  6028                           ; direct_byte            8     6 (fixed)
  6029                           ; jumptable            260     6 (fixed)
  6030                           ;	Chosen strategy is simple_byte
  6031  0E74  0822               	movf	??_setStepSize+1,w
  6032  0E75  3A00               	xorlw	0	; case 0
  6033  0E76  1903               	skipnz
  6034  0E77  2E79               	goto	l3827
  6035  0E78  2E6C               	goto	l3035
  6036  0E79                     l3827:
  6037                           
  6038                           ; Switch size 1, requested type "simple"
  6039                           ; Number of cases is 6, Range of values is 0 to 16
  6040                           ; switch strategies available:
  6041                           ; Name         Instructions Cycles
  6042                           ; simple_byte           19    10 (average)
  6043                           ; direct_byte           40     6 (fixed)
  6044                           ; jumptable            260     6 (fixed)
  6045                           ;	Chosen strategy is simple_byte
  6046  0E79  0821               	movf	??_setStepSize,w
  6047  0E7A  3A00               	xorlw	0	; case 0
  6048  0E7B  1903               	skipnz
  6049  0E7C  2E6C               	goto	l3035
  6050  0E7D  3A01               	xorlw	1	; case 1
  6051  0E7E  1903               	skipnz
  6052  0E7F  2E53               	goto	l520
  6053  0E80  3A03               	xorlw	3	; case 2
  6054  0E81  1903               	skipnz
  6055  0E82  2E58               	goto	l528
  6056  0E83  3A06               	xorlw	6	; case 4
  6057  0E84  1903               	skipnz
  6058  0E85  2E5D               	goto	l535
  6059  0E86  3A0C               	xorlw	12	; case 8
  6060  0E87  1903               	skipnz
  6061  0E88  2E62               	goto	l542
  6062  0E89  3A18               	xorlw	24	; case 16
  6063  0E8A  1903               	skipnz
  6064  0E8B  2E67               	goto	l549
  6065  0E8C  2E6C               	goto	l3035
  6066  0E8D                     l557:
  6067  0E8D  0008               	return
  6068  0E8E                     __end_of_setStepSize:
  6069                           
  6070                           	psect	text22
  6071  0C83                     __ptext22:	
  6072 ;; *************** function _stepperSleep *****************
  6073 ;; Defined at:
  6074 ;;		line 190 in file "step/step.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  in              1    wreg     _Bool 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  in              1    0[BANK0 ] _Bool 
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1    wreg      void 
  6081 ;; Registers used:
  6082 ;;		wreg, status,2, status,0
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;Total ram usage:        1 bytes
  6093 ;; Hardware stack levels used: 1
  6094 ;; Hardware stack levels required when called: 3
  6095 ;; This function calls:
  6096 ;;		Nothing
  6097 ;; This function is called by:
  6098 ;;		_main
  6099 ;;		_Step
  6100 ;;		_slowStepTest
  6101 ;;		_moveUntilZ
  6102 ;;		_calibrate
  6103 ;;		_setStepSize
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107  0C83                     _stepperSleep:	
  6108                           ;psect for function _stepperSleep
  6109                           
  6110                           
  6111                           ;incstack = 0
  6112                           ; Regs used in _stepperSleep: [wreg+status,2+status,0]
  6113                           ;stepperSleep@in stored from wreg
  6114  0C83  0020               	movlb	0	; select bank0
  6115  0C84  00A0               	movwf	stepperSleep@in
  6116  0C85                     l3019:
  6117                           
  6118                           ;step/step.c: 191:     if(in){
  6119  0C85  0820               	movf	stepperSleep@in,w
  6120  0C86  1903               	btfsc	3,2
  6121  0C87  2C89               	goto	u971
  6122  0C88  2C8A               	goto	u970
  6123  0C89                     u971:
  6124  0C89  2C8D               	goto	l513
  6125  0C8A                     u970:
  6126  0C8A                     l510:	
  6127                           ;step/step.c: 192:         do { LATCbits.LATC2 = 0; } while(0);
  6128                           
  6129  0C8A  0022               	movlb	2	; select bank2
  6130  0C8B  110E               	bcf	14,2	;volatile
  6131  0C8C  2C8F               	goto	l515
  6132  0C8D                     l513:	
  6133                           ;step/step.c: 194:         do { LATCbits.LATC2 = 1; } while(0);
  6134                           
  6135  0C8D  0022               	movlb	2	; select bank2
  6136  0C8E  150E               	bsf	14,2	;volatile
  6137  0C8F                     l515:
  6138  0C8F  0008               	return
  6139  0C90                     __end_of_stepperSleep:
  6140                           
  6141                           	psect	text23
  6142  0C76                     __ptext23:	
  6143 ;; *************** function _setDirection *****************
  6144 ;; Defined at:
  6145 ;;		line 237 in file "step/step.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;  dir             1    wreg     enum E2177
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  dir             1    0[BANK0 ] enum E2177
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  1    wreg      void 
  6152 ;; Registers used:
  6153 ;;		wreg, status,2, status,0
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;Total ram usage:        1 bytes
  6164 ;; Hardware stack levels used: 1
  6165 ;; Hardware stack levels required when called: 3
  6166 ;; This function calls:
  6167 ;;		Nothing
  6168 ;; This function is called by:
  6169 ;;		_Step
  6170 ;;		_slowStepTest
  6171 ;;		_moveUntilZ
  6172 ;;		_calibrate
  6173 ;; This function uses a non-reentrant model
  6174 ;;
  6175                           
  6176  0C76                     _setDirection:	
  6177                           ;psect for function _setDirection
  6178                           
  6179                           
  6180                           ;incstack = 0
  6181                           ; Regs used in _setDirection: [wreg+status,2+status,0]
  6182                           ;setDirection@dir stored from wreg
  6183  0C76  0020               	movlb	0	; select bank0
  6184  0C77  00A0               	movwf	setDirection@dir
  6185  0C78                     l3031:
  6186                           
  6187                           ;step/step.c: 238:     if(dir == UP){
  6188  0C78  0820               	movf	setDirection@dir,w
  6189  0C79  1D03               	btfss	3,2
  6190  0C7A  2C7C               	goto	u991
  6191  0C7B  2C7D               	goto	u990
  6192  0C7C                     u991:
  6193  0C7C  2C80               	goto	l564
  6194  0C7D                     u990:
  6195  0C7D                     l561:	
  6196                           ;step/step.c: 240:         do { LATCbits.LATC0 = 1; } while(0);
  6197                           
  6198  0C7D  0022               	movlb	2	; select bank2
  6199  0C7E  140E               	bsf	14,0	;volatile
  6200  0C7F  2C82               	goto	l566
  6201  0C80                     l564:	
  6202                           ;step/step.c: 243:         do { LATCbits.LATC0 = 0; } while(0);
  6203                           
  6204  0C80  0022               	movlb	2	; select bank2
  6205  0C81  100E               	bcf	14,0	;volatile
  6206  0C82                     l566:
  6207  0C82  0008               	return
  6208  0C83                     __end_of_setDirection:
  6209                           
  6210                           	psect	text24
  6211  07FF                     __ptext24:	
  6212 ;; *************** function _sendHapticCommand *****************
  6213 ;; Defined at:
  6214 ;;		line 247 in file "step/step.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  input           1    wreg     unsigned char 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  input           1    1[BANK0 ] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      void 
  6221 ;; Registers used:
  6222 ;;		wreg
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;Total ram usage:        1 bytes
  6233 ;; Hardware stack levels used: 1
  6234 ;; Hardware stack levels required when called: 4
  6235 ;; This function calls:
  6236 ;;		_EUSART_Write
  6237 ;; This function is called by:
  6238 ;;		_Step
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242  07FF                     _sendHapticCommand:	
  6243                           ;psect for function _sendHapticCommand
  6244                           
  6245  07FF                     l3047:	
  6246                           ;incstack = 0
  6247                           ; Regs used in _sendHapticCommand: [wreg]
  6248                           
  6249  07FF                     l569:	
  6250                           ;step/step.c: 248:     return;
  6251                           
  6252  07FF  0008               	return
  6253  0800                     __end_of_sendHapticCommand:
  6254                           
  6255                           	psect	text25
  6256  0C47                     __ptext25:	
  6257 ;; *************** function _EUSART_Write *****************
  6258 ;; Defined at:
  6259 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  txData          1    wreg     unsigned char 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  txData          1    0[BANK0 ] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;Total ram usage:        1 bytes
  6278 ;; Hardware stack levels used: 1
  6279 ;; Hardware stack levels required when called: 3
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_main
  6284 ;;		_smallVent
  6285 ;;		_sendHapticCommand
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289  0C47                     _EUSART_Write:	
  6290                           ;psect for function _EUSART_Write
  6291                           
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _EUSART_Write: [wreg]
  6295                           ;EUSART_Write@txData stored from wreg
  6296  0C47  0020               	movlb	0	; select bank0
  6297  0C48  00A0               	movwf	EUSART_Write@txData
  6298  0C49                     l3021:
  6299  0C49                     l175:	
  6300                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  6301                           
  6302                           
  6303                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  6304  0C49  1E11               	btfss	17,4	;volatile
  6305  0C4A  2C4C               	goto	u981
  6306  0C4B  2C4D               	goto	u980
  6307  0C4C                     u981:
  6308  0C4C  2C49               	goto	l175
  6309  0C4D                     u980:
  6310  0C4D                     l3023:
  6311                           
  6312                           ;mcc_generated_files/eusart.c: 138:     TXREG = txData;
  6313  0C4D  0820               	movf	EUSART_Write@txData,w
  6314  0C4E  0023               	movlb	3	; select bank3
  6315  0C4F  009A               	movwf	26	;volatile
  6316  0C50                     l178:
  6317  0C50  0008               	return
  6318  0C51                     __end_of_EUSART_Write:
  6319                           
  6320                           	psect	text26
  6321  0BF6                     __ptext26:	
  6322 ;; *************** function _get_INTERRUPT_BREAK_FLAG *****************
  6323 ;; Defined at:
  6324 ;;		line 36 in file "AvthorStates/AvthorStates.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;		None
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      _Bool 
  6331 ;; Registers used:
  6332 ;;		wreg
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;Total ram usage:        0 bytes
  6343 ;; Hardware stack levels used: 1
  6344 ;; Hardware stack levels required when called: 3
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		_Step
  6349 ;;		_slowStepTest
  6350 ;;		_moveUntilZ
  6351 ;;		_calibrate
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355  0BF6                     _get_INTERRUPT_BREAK_FLAG:	
  6356                           ;psect for function _get_INTERRUPT_BREAK_FLAG
  6357                           
  6358  0BF6                     l2079:	
  6359                           ;incstack = 0
  6360                           ; Regs used in _get_INTERRUPT_BREAK_FLAG: [wreg]
  6361                           
  6362                           
  6363                           ;AvthorStates/AvthorStates.c: 37:     return Avthor_States.INTERRUPT_BREAK_FLAG;
  6364  0BF6  0020               	movlb	0	; select bank0
  6365  0BF7  0861               	movf	_Avthor_States+1,w	;volatile
  6366  0BF8                     l19:
  6367  0BF8  0008               	return
  6368  0BF9                     __end_of_get_INTERRUPT_BREAK_FLAG:
  6369                           
  6370                           	psect	text27
  6371  0C69                     __ptext27:	
  6372 ;; *************** function _SYSTEM_Initialize *****************
  6373 ;; Defined at:
  6374 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;		None
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;		None
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      void 
  6381 ;; Registers used:
  6382 ;;		wreg, status,2, status,0, pclath, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;Total ram usage:        0 bytes
  6393 ;; Hardware stack levels used: 1
  6394 ;; Hardware stack levels required when called: 5
  6395 ;; This function calls:
  6396 ;;		_EUSART_Initialize
  6397 ;;		_OSCILLATOR_Initialize
  6398 ;;		_PIN_MANAGER_Initialize
  6399 ;;		_WDT_Initialize
  6400 ;; This function is called by:
  6401 ;;		_main
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405  0C69                     _SYSTEM_Initialize:	
  6406                           ;psect for function _SYSTEM_Initialize
  6407                           
  6408  0C69                     l3205:	
  6409                           ;incstack = 0
  6410                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6411                           
  6412                           
  6413                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6414  0C69  318C  24AD  318C   	fcall	_PIN_MANAGER_Initialize
  6415                           
  6416                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6417  0C6C  318C  2490  318C   	fcall	_OSCILLATOR_Initialize
  6418                           
  6419                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6420  0C6F  318C  2402  318C   	fcall	_WDT_Initialize
  6421                           
  6422                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
  6423  0C72  318D  2504  318C   	fcall	_EUSART_Initialize
  6424  0C75                     l99:
  6425  0C75  0008               	return
  6426  0C76                     __end_of_SYSTEM_Initialize:
  6427                           
  6428                           	psect	text28
  6429  0C02                     __ptext28:	
  6430 ;; *************** function _WDT_Initialize *****************
  6431 ;; Defined at:
  6432 ;;		line 75 in file "mcc_generated_files/mcc.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;		None
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  1    wreg      void 
  6439 ;; Registers used:
  6440 ;;		wreg
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;Total ram usage:        0 bytes
  6451 ;; Hardware stack levels used: 1
  6452 ;; Hardware stack levels required when called: 3
  6453 ;; This function calls:
  6454 ;;		Nothing
  6455 ;; This function is called by:
  6456 ;;		_SYSTEM_Initialize
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460  0C02                     _WDT_Initialize:	
  6461                           ;psect for function _WDT_Initialize
  6462                           
  6463  0C02                     l2137:	
  6464                           ;incstack = 0
  6465                           ; Regs used in _WDT_Initialize: [wreg]
  6466                           
  6467                           
  6468                           ;mcc_generated_files/mcc.c: 78:     WDTCON = 0x16;
  6469  0C02  3016               	movlw	22
  6470  0C03  0021               	movlb	1	; select bank1
  6471  0C04  0097               	movwf	23	;volatile
  6472  0C05                     l108:
  6473  0C05  0008               	return
  6474  0C06                     __end_of_WDT_Initialize:
  6475                           
  6476                           	psect	text29
  6477  0CAD                     __ptext29:	
  6478 ;; *************** function _PIN_MANAGER_Initialize *****************
  6479 ;; Defined at:
  6480 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      void 
  6487 ;; Registers used:
  6488 ;;		wreg, status,2
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;Total ram usage:        0 bytes
  6499 ;; Hardware stack levels used: 1
  6500 ;; Hardware stack levels required when called: 3
  6501 ;; This function calls:
  6502 ;;		Nothing
  6503 ;; This function is called by:
  6504 ;;		_SYSTEM_Initialize
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508  0CAD                     _PIN_MANAGER_Initialize:	
  6509                           ;psect for function _PIN_MANAGER_Initialize
  6510                           
  6511  0CAD                     l2115:	
  6512                           ;incstack = 0
  6513                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6514                           
  6515                           
  6516                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  6517  0CAD  0022               	movlb	2	; select bank2
  6518  0CAE  018C               	clrf	12	;volatile
  6519                           
  6520                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  6521  0CAF  018E               	clrf	14	;volatile
  6522                           
  6523                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x00;
  6524  0CB0  0021               	movlb	1	; select bank1
  6525  0CB1  018C               	clrf	12	;volatile
  6526  0CB2                     l2117:
  6527                           
  6528                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x20;
  6529  0CB2  3020               	movlw	32
  6530  0CB3  008E               	movwf	14	;volatile
  6531  0CB4                     l2119:
  6532                           
  6533                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x00;
  6534  0CB4  0023               	movlb	3	; select bank3
  6535  0CB5  018E               	clrf	14	;volatile
  6536  0CB6                     l2121:
  6537                           
  6538                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x00;
  6539  0CB6  018C               	clrf	12	;volatile
  6540  0CB7                     l2123:
  6541                           
  6542                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  6543  0CB7  0024               	movlb	4	; select bank4
  6544  0CB8  018C               	clrf	12	;volatile
  6545  0CB9                     l2125:
  6546                           
  6547                           ;mcc_generated_files/pin_manager.c: 79:     OPTION_REGbits.nWPUEN = 1;
  6548  0CB9  0021               	movlb	1	; select bank1
  6549  0CBA  1795               	bsf	21,7	;volatile
  6550  0CBB                     l2127:
  6551                           
  6552                           ;mcc_generated_files/pin_manager.c: 85:     APFCON = 0x00;
  6553  0CBB  0022               	movlb	2	; select bank2
  6554  0CBC  019D               	clrf	29	;volatile
  6555  0CBD                     l217:
  6556  0CBD  0008               	return
  6557  0CBE                     __end_of_PIN_MANAGER_Initialize:
  6558                           
  6559                           	psect	text30
  6560  0C90                     __ptext30:	
  6561 ;; *************** function _OSCILLATOR_Initialize *****************
  6562 ;; Defined at:
  6563 ;;		line 59 in file "mcc_generated_files/mcc.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg, status,2
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;Total ram usage:        0 bytes
  6582 ;; Hardware stack levels used: 1
  6583 ;; Hardware stack levels required when called: 3
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_SYSTEM_Initialize
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591  0C90                     _OSCILLATOR_Initialize:	
  6592                           ;psect for function _OSCILLATOR_Initialize
  6593                           
  6594  0C90                     l2129:	
  6595                           ;incstack = 0
  6596                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6597                           
  6598                           
  6599                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x78;
  6600  0C90  3078               	movlw	120
  6601  0C91  0021               	movlb	1	; select bank1
  6602  0C92  0099               	movwf	25	;volatile
  6603  0C93                     l2131:
  6604                           
  6605                           ;mcc_generated_files/mcc.c: 64:     OSCTUNE = 0x00;
  6606  0C93  0198               	clrf	24	;volatile
  6607  0C94                     l2133:
  6608                           
  6609                           ;mcc_generated_files/mcc.c: 66:     ACTCON = 0x00;
  6610  0C94  0027               	movlb	7	; select bank7
  6611  0C95  019B               	clrf	27	;volatile
  6612  0C96                     l2135:
  6613                           
  6614                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  6615  0C96  0022               	movlb	2	; select bank2
  6616  0C97  0196               	clrf	22	;volatile
  6617  0C98                     l102:	
  6618                           ;mcc_generated_files/mcc.c: 71:     {;mcc_generated_files/mcc.c: 72:     }
  6619                           
  6620                           
  6621                           ;mcc_generated_files/mcc.c: 70:     while(PLLRDY == 0)
  6622  0C98  0021               	movlb	1	; select bank1
  6623  0C99  1F1A               	btfss	26,6	;volatile
  6624  0C9A  2C9C               	goto	u541
  6625  0C9B  2C9D               	goto	u540
  6626  0C9C                     u541:
  6627  0C9C  2C98               	goto	l102
  6628  0C9D                     u540:
  6629  0C9D                     l105:
  6630  0C9D  0008               	return
  6631  0C9E                     __end_of_OSCILLATOR_Initialize:
  6632                           
  6633                           	psect	text31
  6634  0D04                     __ptext31:	
  6635 ;; *************** function _EUSART_Initialize *****************
  6636 ;; Defined at:
  6637 ;;		line 66 in file "mcc_generated_files/eusart.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;Total ram usage:        0 bytes
  6656 ;; Hardware stack levels used: 1
  6657 ;; Hardware stack levels required when called: 4
  6658 ;; This function calls:
  6659 ;;		_EUSART_SetErrorHandler
  6660 ;;		_EUSART_SetFramingErrorHandler
  6661 ;;		_EUSART_SetOverrunErrorHandler
  6662 ;; This function is called by:
  6663 ;;		_SYSTEM_Initialize
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667  0D04                     _EUSART_Initialize:	
  6668                           ;psect for function _EUSART_Initialize
  6669                           
  6670  0D04                     l3059:	
  6671                           ;incstack = 0
  6672                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6673                           
  6674                           
  6675                           ;mcc_generated_files/eusart.c: 71:     BAUDCON = 0x08;
  6676  0D04  3008               	movlw	8
  6677  0D05  0023               	movlb	3	; select bank3
  6678  0D06  009F               	movwf	31	;volatile
  6679                           
  6680                           ;mcc_generated_files/eusart.c: 74:     RCSTA = 0x90;
  6681  0D07  3090               	movlw	144
  6682  0D08  009D               	movwf	29	;volatile
  6683                           
  6684                           ;mcc_generated_files/eusart.c: 77:     TXSTA = 0x24;
  6685  0D09  3024               	movlw	36
  6686  0D0A  009E               	movwf	30	;volatile
  6687                           
  6688                           ;mcc_generated_files/eusart.c: 80:     SPBRGL = 0x67;
  6689  0D0B  3067               	movlw	103
  6690  0D0C  009B               	movwf	27	;volatile
  6691  0D0D                     l3061:
  6692                           
  6693                           ;mcc_generated_files/eusart.c: 83:     SPBRGH = 0x00;
  6694  0D0D  019C               	clrf	28	;volatile
  6695  0D0E                     l3063:
  6696                           
  6697                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
  6698  0D0E  3000               	movlw	0
  6699  0D0F  0020               	movlb	0	; select bank0
  6700  0D10  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6701  0D11  3000               	movlw	0
  6702  0D12  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6703  0D13  318C  2416  318D   	fcall	_EUSART_SetFramingErrorHandler
  6704  0D16                     l3065:
  6705                           
  6706                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
  6707  0D16  3000               	movlw	0
  6708  0D17  0020               	movlb	0	; select bank0
  6709  0D18  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6710  0D19  3000               	movlw	0
  6711  0D1A  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6712  0D1B  318C  241C  318D   	fcall	_EUSART_SetOverrunErrorHandler
  6713  0D1E                     l3067:
  6714                           
  6715                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
  6716  0D1E  3000               	movlw	0
  6717  0D1F  0020               	movlb	0	; select bank0
  6718  0D20  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  6719  0D21  3000               	movlw	0
  6720  0D22  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6721  0D23  318C  2410  318D   	fcall	_EUSART_SetErrorHandler
  6722  0D26                     l3069:
  6723                           
  6724                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
  6725  0D26  01F8               	clrf	_eusartRxLastError	;volatile
  6726  0D27                     l151:
  6727  0D27  0008               	return
  6728  0D28                     __end_of_EUSART_Initialize:
  6729                           
  6730                           	psect	text32
  6731  0C1C                     __ptext32:	
  6732 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6733 ;; Defined at:
  6734 ;;		line 161 in file "mcc_generated_files/eusart.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6737 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;		None
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      void 
  6742 ;; Registers used:
  6743 ;;		wreg
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6749 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;Total ram usage:        2 bytes
  6754 ;; Hardware stack levels used: 1
  6755 ;; Hardware stack levels required when called: 3
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_EUSART_Initialize
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763  0C1C                     _EUSART_SetOverrunErrorHandler:	
  6764                           ;psect for function _EUSART_SetOverrunErrorHandler
  6765                           
  6766  0C1C                     l3027:	
  6767                           ;incstack = 0
  6768                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6769                           
  6770                           
  6771                           ;mcc_generated_files/eusart.c: 162:     EUSART_OverrunErrorHandler = interruptHandler;
  6772  0C1C  0020               	movlb	0	; select bank0
  6773  0C1D  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6774  0C1E  00DE               	movwf	_EUSART_OverrunErrorHandler+1
  6775  0C1F  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6776  0C20  00DD               	movwf	_EUSART_OverrunErrorHandler
  6777  0C21                     l193:
  6778  0C21  0008               	return
  6779  0C22                     __end_of_EUSART_SetOverrunErrorHandler:
  6780                           
  6781                           	psect	text33
  6782  0C16                     __ptext33:	
  6783 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6784 ;; Defined at:
  6785 ;;		line 157 in file "mcc_generated_files/eusart.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6788 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;		None
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  1    wreg      void 
  6793 ;; Registers used:
  6794 ;;		wreg
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6800 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;Total ram usage:        2 bytes
  6805 ;; Hardware stack levels used: 1
  6806 ;; Hardware stack levels required when called: 3
  6807 ;; This function calls:
  6808 ;;		Nothing
  6809 ;; This function is called by:
  6810 ;;		_EUSART_Initialize
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814  0C16                     _EUSART_SetFramingErrorHandler:	
  6815                           ;psect for function _EUSART_SetFramingErrorHandler
  6816                           
  6817  0C16                     l3025:	
  6818                           ;incstack = 0
  6819                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6820                           
  6821                           
  6822                           ;mcc_generated_files/eusart.c: 158:     EUSART_FramingErrorHandler = interruptHandler;
  6823  0C16  0020               	movlb	0	; select bank0
  6824  0C17  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6825  0C18  00F6               	movwf	_EUSART_FramingErrorHandler+1
  6826  0C19  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6827  0C1A  00F5               	movwf	_EUSART_FramingErrorHandler
  6828  0C1B                     l190:
  6829  0C1B  0008               	return
  6830  0C1C                     __end_of_EUSART_SetFramingErrorHandler:
  6831                           
  6832                           	psect	text34
  6833  0C10                     __ptext34:	
  6834 ;; *************** function _EUSART_SetErrorHandler *****************
  6835 ;; Defined at:
  6836 ;;		line 165 in file "mcc_generated_files/eusart.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  6839 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;		None
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  1    wreg      void 
  6844 ;; Registers used:
  6845 ;;		wreg
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6851 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;Total ram usage:        2 bytes
  6856 ;; Hardware stack levels used: 1
  6857 ;; Hardware stack levels required when called: 3
  6858 ;; This function calls:
  6859 ;;		Nothing
  6860 ;; This function is called by:
  6861 ;;		_EUSART_Initialize
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865  0C10                     _EUSART_SetErrorHandler:	
  6866                           ;psect for function _EUSART_SetErrorHandler
  6867                           
  6868  0C10                     l3029:	
  6869                           ;incstack = 0
  6870                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6871                           
  6872                           
  6873                           ;mcc_generated_files/eusart.c: 166:     EUSART_ErrorHandler = interruptHandler;
  6874  0C10  0020               	movlb	0	; select bank0
  6875  0C11  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6876  0C12  00DC               	movwf	_EUSART_ErrorHandler+1
  6877  0C13  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6878  0C14  00DB               	movwf	_EUSART_ErrorHandler
  6879  0C15                     l196:
  6880  0C15  0008               	return
  6881  0C16                     __end_of_EUSART_SetErrorHandler:
  6882                           
  6883                           	psect	intentry
  6884  0004                     __pintentry:	
  6885 ;; *************** function _INTERRUPT_InterruptManager *****************
  6886 ;; Defined at:
  6887 ;;		line 63 in file "main.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;		None
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;		None
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  1    wreg      void 
  6894 ;; Registers used:
  6895 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;Total ram usage:        1 bytes
  6906 ;; Hardware stack levels used: 1
  6907 ;; Hardware stack levels required when called: 2
  6908 ;; This function calls:
  6909 ;;		_Avthor_Uart_Instruction
  6910 ;;		_EUSART_Read
  6911 ;;		_EUSART_is_rx_ready
  6912 ;; This function is called by:
  6913 ;;		Interrupt level 1
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917  0004                     _INTERRUPT_InterruptManager:
  6918                           
  6919                           ;incstack = 0
  6920  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  6921                           
  6922                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6923  0005  3180               	pagesel	$
  6924  0006                     i1l2645:
  6925                           
  6926                           ;main.c: 66:     if(INTCONbits.PEIE == 1)
  6927  0006  1F0B               	btfss	11,6	;volatile
  6928  0007  2809               	goto	u89_21
  6929  0008  280A               	goto	u89_20
  6930  0009                     u89_21:
  6931  0009  2823               	goto	i1l289
  6932  000A                     u89_20:
  6933  000A                     i1l2647:
  6934                           
  6935                           ;main.c: 67:     {;main.c: 68:         if(PIE1bits.RCIE == 1 && EUSART_is_rx_ready())
  6936  000A  0021               	movlb	1	; select bank1
  6937  000B  1E91               	btfss	17,5	;volatile
  6938  000C  280E               	goto	u90_21
  6939  000D  280F               	goto	u90_20
  6940  000E                     u90_21:
  6941  000E  2823               	goto	i1l289
  6942  000F                     u90_20:
  6943  000F                     i1l2649:
  6944  000F  318C  2406  3180   	fcall	_EUSART_is_rx_ready
  6945  0012  3A00               	xorlw	0
  6946  0013  1903               	skipnz
  6947  0014  2816               	goto	u91_21
  6948  0015  2817               	goto	u91_20
  6949  0016                     u91_21:
  6950  0016  2823               	goto	i1l289
  6951  0017                     u91_20:
  6952  0017                     i1l2651:
  6953                           
  6954                           ;main.c: 69:         {;main.c: 70:             UART_RX_in = EUSART_Read();
  6955  0017  318C  249E  3180   	fcall	_EUSART_Read
  6956  001A  00F4               	movwf	??_INTERRUPT_InterruptManager
  6957  001B  0874               	movf	??_INTERRUPT_InterruptManager,w
  6958  001C  00F7               	movwf	_UART_RX_in	;volatile
  6959  001D                     i1l2653:
  6960                           
  6961                           ;main.c: 71:             PIR1bits.RCIF = 0;
  6962  001D  0020               	movlb	0	; select bank0
  6963  001E  1291               	bcf	17,5	;volatile
  6964  001F                     i1l2655:
  6965                           
  6966                           ;main.c: 72:             Avthor_Uart_Instruction(UART_RX_in);
  6967  001F  0877               	movf	_UART_RX_in,w	;volatile
  6968  0020  318E  26EE  3180   	fcall	_Avthor_Uart_Instruction
  6969  0023                     i1l289:	
  6970                           ;main.c: 73:         }
  6971                           
  6972  0023  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6973  0024  0009               	retfie
  6974  0025                     __end_of_INTERRUPT_InterruptManager:
  6975                           
  6976                           	psect	text36
  6977  0C06                     __ptext36:	
  6978 ;; *************** function _EUSART_is_rx_ready *****************
  6979 ;; Defined at:
  6980 ;;		line 99 in file "mcc_generated_files/eusart.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;		None
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;		None
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  1    wreg      _Bool 
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;Total ram usage:        0 bytes
  6999 ;; Hardware stack levels used: 1
  7000 ;; This function calls:
  7001 ;;		Nothing
  7002 ;; This function is called by:
  7003 ;;		_INTERRUPT_InterruptManager
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007  0C06                     _EUSART_is_rx_ready:	
  7008                           ;psect for function _EUSART_is_rx_ready
  7009                           
  7010  0C06                     i1l1419:	
  7011                           ;incstack = 0
  7012                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  7013                           
  7014                           
  7015                           ;mcc_generated_files/eusart.c: 101:     return (_Bool)(PIR1bits.RCIF);
  7016  0C06  0020               	movlb	0	; select bank0
  7017  0C07  0E11               	swapf	17,w	;volatile
  7018  0C08  0C89               	rrf	9,f
  7019  0C09  3901               	andlw	1
  7020  0C0A                     i1l159:
  7021  0C0A  0008               	return
  7022  0C0B                     __end_of_EUSART_is_rx_ready:
  7023                           
  7024                           	psect	text37
  7025  0C9E                     __ptext37:	
  7026 ;; *************** function _EUSART_Read *****************
  7027 ;; Defined at:
  7028 ;;		line 113 in file "mcc_generated_files/eusart.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;		None
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;		None
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      unsigned char 
  7035 ;; Registers used:
  7036 ;;		wreg, status,2
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7046 ;;Total ram usage:        0 bytes
  7047 ;; Hardware stack levels used: 1
  7048 ;; This function calls:
  7049 ;;		Nothing
  7050 ;; This function is called by:
  7051 ;;		_INTERRUPT_InterruptManager
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055  0C9E                     _EUSART_Read:	
  7056                           ;psect for function _EUSART_Read
  7057                           
  7058  0C9E                     i1l1423:	
  7059                           ;incstack = 0
  7060                           ; Regs used in _EUSART_Read: [wreg+status,2]
  7061                           
  7062  0C9E                     i1l168:	
  7063                           ;mcc_generated_files/eusart.c: 116:     {;mcc_generated_files/eusart.c: 117:     }
  7064                           
  7065                           
  7066                           ;mcc_generated_files/eusart.c: 115:     while(!PIR1bits.RCIF)
  7067  0C9E  0020               	movlb	0	; select bank0
  7068  0C9F  1E91               	btfss	17,5	;volatile
  7069  0CA0  2CA2               	goto	u36_21
  7070  0CA1  2CA3               	goto	u36_20
  7071  0CA2                     u36_21:
  7072  0CA2  2C9E               	goto	i1l168
  7073  0CA3                     u36_20:
  7074  0CA3                     i1l1425:
  7075                           
  7076                           ;mcc_generated_files/eusart.c: 119:     eusartRxLastError.status = 0;
  7077  0CA3  01F8               	clrf	_eusartRxLastError	;volatile
  7078  0CA4                     i1l1427:
  7079                           
  7080                           ;mcc_generated_files/eusart.c: 121:     if(1 == RCSTAbits.OERR)
  7081  0CA4  0023               	movlb	3	; select bank3
  7082  0CA5  1C9D               	btfss	29,1	;volatile
  7083  0CA6  2CA8               	goto	u37_21
  7084  0CA7  2CA9               	goto	u37_20
  7085  0CA8                     u37_21:
  7086  0CA8  2CAB               	goto	i1l1431
  7087  0CA9                     u37_20:
  7088  0CA9                     i1l1429:
  7089                           
  7090                           ;mcc_generated_files/eusart.c: 122:     {;mcc_generated_files/eusart.c: 125:         RCS
      +                          TAbits.CREN = 0;
  7091  0CA9  121D               	bcf	29,4	;volatile
  7092                           
  7093                           ;mcc_generated_files/eusart.c: 126:         RCSTAbits.CREN = 1;
  7094  0CAA  161D               	bsf	29,4	;volatile
  7095  0CAB                     i1l1431:
  7096                           
  7097                           ;mcc_generated_files/eusart.c: 129:     return RCREG;
  7098  0CAB  0819               	movf	25,w	;volatile
  7099  0CAC                     i1l172:
  7100  0CAC  0008               	return
  7101  0CAD                     __end_of_EUSART_Read:
  7102                           
  7103                           	psect	text38
  7104  0EEE                     __ptext38:	
  7105 ;; *************** function _Avthor_Uart_Instruction *****************
  7106 ;; Defined at:
  7107 ;;		line 98 in file "AvthorStates/AvthorStates.c"
  7108 ;; Parameters:    Size  Location     Type
  7109 ;;  instr           1    wreg     unsigned char 
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;  instr           1    3[COMMON] unsigned char 
  7112 ;; Return value:  Size  Location     Type
  7113 ;;                  1    wreg      void 
  7114 ;; Registers used:
  7115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;Total ram usage:        3 bytes
  7126 ;; Hardware stack levels used: 1
  7127 ;; Hardware stack levels required when called: 1
  7128 ;; This function calls:
  7129 ;;		i1_EUSART_Write
  7130 ;;		i1_stepperSleep
  7131 ;; This function is called by:
  7132 ;;		_INTERRUPT_InterruptManager
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136  0EEE                     _Avthor_Uart_Instruction:	
  7137                           ;psect for function _Avthor_Uart_Instruction
  7138                           
  7139                           
  7140                           ;incstack = 0
  7141                           ; Regs used in _Avthor_Uart_Instruction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7142                           ;Avthor_Uart_Instruction@instr stored from wreg
  7143  0EEE  00F3               	movwf	Avthor_Uart_Instruction@instr
  7144  0EEF                     i1l2303:
  7145                           
  7146                           ;AvthorStates/AvthorStates.c: 101:     if(instr == 'z'){
  7147  0EEF  307A               	movlw	122
  7148  0EF0  0673               	xorwf	Avthor_Uart_Instruction@instr,w
  7149  0EF1  1D03               	btfss	3,2
  7150  0EF2  2EF4               	goto	u79_21
  7151  0EF3  2EF5               	goto	u79_20
  7152  0EF4                     u79_21:
  7153  0EF4  2F09               	goto	i1l2319
  7154  0EF5                     u79_20:
  7155  0EF5                     i1l2305:
  7156                           
  7157                           ;AvthorStates/AvthorStates.c: 107:         Avthor_States.stepper_instruction = 0x00;
  7158  0EF5  0020               	movlb	0	; select bank0
  7159  0EF6  01E0               	clrf	_Avthor_States	;volatile
  7160  0EF7                     i1l2307:
  7161                           
  7162                           ;AvthorStates/AvthorStates.c: 108:         Avthor_States.INTERRUPT_BREAK_FLAG = 1;
  7163  0EF7  3001               	movlw	1
  7164  0EF8  00F1               	movwf	??_Avthor_Uart_Instruction
  7165  0EF9  0871               	movf	??_Avthor_Uart_Instruction,w
  7166  0EFA  00E1               	movwf	_Avthor_States+1	;volatile
  7167  0EFB                     i1l2309:
  7168                           
  7169                           ;AvthorStates/AvthorStates.c: 109:         Avthor_States.motor_action = none;
  7170  0EFB  3001               	movlw	1
  7171  0EFC  00F1               	movwf	??_Avthor_Uart_Instruction
  7172  0EFD  0871               	movf	??_Avthor_Uart_Instruction,w
  7173  0EFE  00E2               	movwf	_Avthor_States+2	;volatile
  7174                           
  7175                           ;AvthorStates/AvthorStates.c: 110:         Avthor_States.IS_RECEIVING_COMPLEX_BREATHS_CO
      +                          MMANDS = 0;
  7176  0EFF  01E9               	clrf	_Avthor_States+9	;volatile
  7177  0F00                     i1l2311:
  7178                           
  7179                           ;AvthorStates/AvthorStates.c: 111:         stepperSleep(1);
  7180  0F00  3001               	movlw	1
  7181  0F01  318C  2451  318E   	fcall	i1_stepperSleep
  7182  0F04                     i1l2313:
  7183                           
  7184                           ;AvthorStates/AvthorStates.c: 112:         EUSART_Write(0xFB);
  7185  0F04  30FB               	movlw	251
  7186  0F05  318C  243D  318E   	fcall	i1_EUSART_Write
  7187  0F08  2FFF               	goto	i1l51
  7188  0F09                     i1l2319:
  7189  0F09  3072               	movlw	114
  7190  0F0A  0673               	xorwf	Avthor_Uart_Instruction@instr,w
  7191  0F0B  1D03               	btfss	3,2
  7192  0F0C  2F0E               	goto	u80_21
  7193  0F0D  2F0F               	goto	u80_20
  7194  0F0E                     u80_21:
  7195  0F0E  2F1E               	goto	i1l2333
  7196  0F0F                     u80_20:
  7197  0F0F                     i1l2321:
  7198                           
  7199                           ;AvthorStates/AvthorStates.c: 117:   Avthor_States.stepper_instruction = 0;
  7200  0F0F  0020               	movlb	0	; select bank0
  7201  0F10  01E0               	clrf	_Avthor_States	;volatile
  7202  0F11                     i1l2323:
  7203                           
  7204                           ;AvthorStates/AvthorStates.c: 118:   Avthor_States.motor_action = none;
  7205  0F11  3001               	movlw	1
  7206  0F12  00F1               	movwf	??_Avthor_Uart_Instruction
  7207  0F13  0871               	movf	??_Avthor_Uart_Instruction,w
  7208  0F14  00E2               	movwf	_Avthor_States+2	;volatile
  7209  0F15                     i1l2325:
  7210                           
  7211                           ;AvthorStates/AvthorStates.c: 119:   Avthor_States.INTERRUPT_BREAK_FLAG = 1;
  7212  0F15  3001               	movlw	1
  7213  0F16  00F1               	movwf	??_Avthor_Uart_Instruction
  7214  0F17  0871               	movf	??_Avthor_Uart_Instruction,w
  7215  0F18  00E1               	movwf	_Avthor_States+1	;volatile
  7216  0F19                     i1l2327:
  7217                           
  7218                           ;AvthorStates/AvthorStates.c: 120:         stepperSleep(1);
  7219  0F19  3001               	movlw	1
  7220  0F1A  318C  2451  318E   	fcall	i1_stepperSleep
  7221  0F1D  2FFF               	goto	i1l51
  7222  0F1E                     i1l2333:
  7223  0F1E  30FC               	movlw	252
  7224  0F1F  0673               	xorwf	Avthor_Uart_Instruction@instr,w
  7225  0F20  1D03               	btfss	3,2
  7226  0F21  2F23               	goto	u81_21
  7227  0F22  2F24               	goto	u81_20
  7228  0F23                     u81_21:
  7229  0F23  2F2F               	goto	i1l2343
  7230  0F24                     u81_20:
  7231  0F24                     i1l2335:
  7232                           
  7233                           ;AvthorStates/AvthorStates.c: 125:         Avthor_States.motor_action = topButtonTrigger
      +                          Action;
  7234  0F24  3006               	movlw	6
  7235  0F25  00F1               	movwf	??_Avthor_Uart_Instruction
  7236  0F26  0871               	movf	??_Avthor_Uart_Instruction,w
  7237  0F27  0020               	movlb	0	; select bank0
  7238  0F28  00E2               	movwf	_Avthor_States+2	;volatile
  7239                           
  7240                           ;AvthorStates/AvthorStates.c: 126:         Avthor_States.INTERRUPT_BREAK_FLAG = 1;
  7241  0F29  3001               	movlw	1
  7242  0F2A  00F1               	movwf	??_Avthor_Uart_Instruction
  7243  0F2B  0871               	movf	??_Avthor_Uart_Instruction,w
  7244  0F2C  00E1               	movwf	_Avthor_States+1	;volatile
  7245  0F2D                     i1l2337:
  7246                           
  7247                           ;AvthorStates/AvthorStates.c: 127:         Avthor_States.stepper_instruction = 0;
  7248  0F2D  01E0               	clrf	_Avthor_States	;volatile
  7249  0F2E  2FFF               	goto	i1l51
  7250  0F2F                     i1l2343:
  7251  0F2F  30FD               	movlw	253
  7252  0F30  0673               	xorwf	Avthor_Uart_Instruction@instr,w
  7253  0F31  1D03               	btfss	3,2
  7254  0F32  2F34               	goto	u82_21
  7255  0F33  2F35               	goto	u82_20
  7256  0F34                     u82_21:
  7257  0F34  2F40               	goto	i1l54
  7258  0F35                     u82_20:
  7259  0F35                     i1l2345:
  7260                           
  7261                           ;AvthorStates/AvthorStates.c: 131:         Avthor_States.motor_action = bottomButtonTrig
      +                          gerAction;
  7262  0F35  3007               	movlw	7
  7263  0F36  00F1               	movwf	??_Avthor_Uart_Instruction
  7264  0F37  0871               	movf	??_Avthor_Uart_Instruction,w
  7265  0F38  0020               	movlb	0	; select bank0
  7266  0F39  00E2               	movwf	_Avthor_States+2	;volatile
  7267                           
  7268                           ;AvthorStates/AvthorStates.c: 132:         Avthor_States.INTERRUPT_BREAK_FLAG = 1;
  7269  0F3A  3001               	movlw	1
  7270  0F3B  00F1               	movwf	??_Avthor_Uart_Instruction
  7271  0F3C  0871               	movf	??_Avthor_Uart_Instruction,w
  7272  0F3D  00E1               	movwf	_Avthor_States+1	;volatile
  7273  0F3E                     i1l2347:
  7274                           
  7275                           ;AvthorStates/AvthorStates.c: 133:         Avthor_States.stepper_instruction = 0;
  7276  0F3E  01E0               	clrf	_Avthor_States	;volatile
  7277  0F3F  2FFF               	goto	i1l51
  7278  0F40                     i1l54:
  7279  0F40                     i1l2351:
  7280                           
  7281                           ;AvthorStates/AvthorStates.c: 136:     if((Avthor_States.IS_RECEIVING_COMPLEX_BREATHS_CO
      +                          MMANDS) && (instr != 0xA9)){
  7282  0F40  0020               	movlb	0	; select bank0
  7283  0F41  0869               	movf	_Avthor_States+9,w	;volatile
  7284  0F42  1903               	btfsc	3,2
  7285  0F43  2F45               	goto	u83_21
  7286  0F44  2F46               	goto	u83_20
  7287  0F45                     u83_21:
  7288  0F45  2FD1               	goto	i1l2389
  7289  0F46                     u83_20:
  7290  0F46                     i1l2353:
  7291  0F46  30A9               	movlw	169
  7292  0F47  0673               	xorwf	Avthor_Uart_Instruction@instr,w
  7293  0F48  1903               	btfsc	3,2
  7294  0F49  2F4B               	goto	u84_21
  7295  0F4A  2F4C               	goto	u84_20
  7296  0F4B                     u84_21:
  7297  0F4B  2FD1               	goto	i1l2389
  7298  0F4C                     u84_20:
  7299  0F4C                     i1l2355:
  7300                           
  7301                           ;AvthorStates/AvthorStates.c: 137:         *Avthor_States.complex_breaths_instruction_po
      +                          inter = instr;
  7302  0F4C  0873               	movf	Avthor_Uart_Instruction@instr,w
  7303  0F4D  00F1               	movwf	??_Avthor_Uart_Instruction
  7304  0F4E  0868               	movf	low ((_Avthor_States| 0+8)),w	;volatile
  7305  0F4F  0086               	movwf	6
  7306  0F50  0187               	clrf	7
  7307  0F51  0871               	movf	??_Avthor_Uart_Instruction,w
  7308  0F52  0081               	movwf	1
  7309  0F53                     i1l2357:
  7310                           
  7311                           ;AvthorStates/AvthorStates.c: 139:         Avthor_States.complex_breaths_instruction_poi
      +                          nter++;
  7312  0F53  3001               	movlw	1
  7313  0F54  00F1               	movwf	??_Avthor_Uart_Instruction
  7314  0F55  0871               	movf	??_Avthor_Uart_Instruction,w
  7315  0F56  07E8               	addwf	low ((_Avthor_States| 0+8)),f	;volatile
  7316                           
  7317                           ;AvthorStates/AvthorStates.c: 141:     }else{
  7318  0F57  2FFF               	goto	i1l51
  7319  0F58                     i1l2359:
  7320                           
  7321                           ;AvthorStates/AvthorStates.c: 146:                 if(!Avthor_States.IS_RECEIVING_COMPLE
      +                          X_BREATHS_COMMANDS){
  7322  0F58  0869               	movf	_Avthor_States+9,w	;volatile
  7323  0F59  1D03               	btfss	3,2
  7324  0F5A  2F5C               	goto	u85_21
  7325  0F5B  2F5D               	goto	u85_20
  7326  0F5C                     u85_21:
  7327  0F5C  2F66               	goto	i1l2363
  7328  0F5D                     u85_20:
  7329  0F5D                     i1l2361:
  7330                           
  7331                           ;AvthorStates/AvthorStates.c: 147:                     Avthor_States.IS_RECEIVING_COMPLE
      +                          X_BREATHS_COMMANDS = 1;
  7332  0F5D  3001               	movlw	1
  7333  0F5E  00F1               	movwf	??_Avthor_Uart_Instruction
  7334  0F5F  0871               	movf	??_Avthor_Uart_Instruction,w
  7335  0F60  00E9               	movwf	_Avthor_States+9	;volatile
  7336                           
  7337                           ;AvthorStates/AvthorStates.c: 148:                     Avthor_States.complex_breaths_ins
      +                          truction_pointer = &Avthor_States.complex_breaths_instructions[0];
  7338  0F61  3063               	movlw	(low ((_Avthor_States| 0+3)))& (0+255)
  7339  0F62  00F1               	movwf	??_Avthor_Uart_Instruction
  7340  0F63  0871               	movf	??_Avthor_Uart_Instruction,w
  7341  0F64  00E8               	movwf	low ((_Avthor_States| 0+8))	;volatile
  7342                           
  7343                           ;AvthorStates/AvthorStates.c: 149:                 }else{
  7344  0F65  2FFF               	goto	i1l51
  7345  0F66                     i1l2363:
  7346                           
  7347                           ;AvthorStates/AvthorStates.c: 150:                     Avthor_States.IS_RECEIVING_COMPLE
      +                          X_BREATHS_COMMANDS = 0;
  7348  0F66  01E9               	clrf	_Avthor_States+9	;volatile
  7349  0F67                     i1l2365:
  7350                           
  7351                           ;AvthorStates/AvthorStates.c: 152:                     Avthor_States.motor_action = comp
      +                          lexBreaths;
  7352  0F67  3002               	movlw	2
  7353  0F68  00F1               	movwf	??_Avthor_Uart_Instruction
  7354  0F69  0871               	movf	??_Avthor_Uart_Instruction,w
  7355  0F6A  00E2               	movwf	_Avthor_States+2	;volatile
  7356  0F6B  2FFF               	goto	i1l51
  7357  0F6C                     i1l2367:
  7358                           
  7359                           ;AvthorStates/AvthorStates.c: 164:                 Avthor_States.bellowsHasBeenInchedUpO
      +                          rDownSinceVenting = 0;
  7360  0F6C  01EA               	clrf	_Avthor_States+10	;volatile
  7361                           
  7362                           ;AvthorStates/AvthorStates.c: 170:     break;
  7363  0F6D  2FFF               	goto	i1l51
  7364  0F6E                     i1l2371:
  7365                           
  7366                           ;AvthorStates/AvthorStates.c: 182:     _delay((unsigned long)((10)*(4000000/4000.0)));
  7367  0F6E  300D               	movlw	13
  7368  0F6F  00F1               	movwf	??_Avthor_Uart_Instruction
  7369  0F70  30FC               	movlw	252
  7370  0F71                     u149_27:
  7371  0F71  0B89               	decfsz	9,f
  7372  0F72  2F71               	goto	u149_27
  7373  0F73  0BF1               	decfsz	??_Avthor_Uart_Instruction,f
  7374  0F74  2F71               	goto	u149_27
  7375                           
  7376                           ;AvthorStates/AvthorStates.c: 183:                 Avthor_States.INTERRUPT_BREAK_FLAG = 
      +                          1;
  7377  0F75  3001               	movlw	1
  7378  0F76  00F1               	movwf	??_Avthor_Uart_Instruction
  7379  0F77  0871               	movf	??_Avthor_Uart_Instruction,w
  7380  0F78  0020               	movlb	0	; select bank0
  7381  0F79  00E1               	movwf	_Avthor_States+1	;volatile
  7382                           
  7383                           ;AvthorStates/AvthorStates.c: 184:     Avthor_States.motor_action = inchUpAction;
  7384  0F7A  3004               	movlw	4
  7385  0F7B  00F1               	movwf	??_Avthor_Uart_Instruction
  7386  0F7C  0871               	movf	??_Avthor_Uart_Instruction,w
  7387  0F7D  00E2               	movwf	_Avthor_States+2	;volatile
  7388                           
  7389                           ;AvthorStates/AvthorStates.c: 185:     Avthor_States.bellowsHasBeenInchedUpOrDownSinceVe
      +                          nting = 1;
  7390  0F7E  3001               	movlw	1
  7391  0F7F  00F1               	movwf	??_Avthor_Uart_Instruction
  7392  0F80  0871               	movf	??_Avthor_Uart_Instruction,w
  7393  0F81  00EA               	movwf	_Avthor_States+10	;volatile
  7394                           
  7395                           ;AvthorStates/AvthorStates.c: 190:     break;
  7396  0F82  2FFF               	goto	i1l51
  7397  0F83                     i1l2373:
  7398                           
  7399                           ;AvthorStates/AvthorStates.c: 193:     _delay((unsigned long)((10)*(4000000/4000.0)));
  7400  0F83  300D               	movlw	13
  7401  0F84  00F1               	movwf	??_Avthor_Uart_Instruction
  7402  0F85  30FC               	movlw	252
  7403  0F86                     u150_27:
  7404  0F86  0B89               	decfsz	9,f
  7405  0F87  2F86               	goto	u150_27
  7406  0F88  0BF1               	decfsz	??_Avthor_Uart_Instruction,f
  7407  0F89  2F86               	goto	u150_27
  7408                           
  7409                           ;AvthorStates/AvthorStates.c: 194:                 Avthor_States.INTERRUPT_BREAK_FLAG = 
      +                          1;
  7410  0F8A  3001               	movlw	1
  7411  0F8B  00F1               	movwf	??_Avthor_Uart_Instruction
  7412  0F8C  0871               	movf	??_Avthor_Uart_Instruction,w
  7413  0F8D  0020               	movlb	0	; select bank0
  7414  0F8E  00E1               	movwf	_Avthor_States+1	;volatile
  7415                           
  7416                           ;AvthorStates/AvthorStates.c: 195:     Avthor_States.motor_action = inchDownAction;
  7417  0F8F  3005               	movlw	5
  7418  0F90  00F1               	movwf	??_Avthor_Uart_Instruction
  7419  0F91  0871               	movf	??_Avthor_Uart_Instruction,w
  7420  0F92  00E2               	movwf	_Avthor_States+2	;volatile
  7421                           
  7422                           ;AvthorStates/AvthorStates.c: 196:     Avthor_States.bellowsHasBeenInchedUpOrDownSinceVe
      +                          nting = 1;
  7423  0F93  3001               	movlw	1
  7424  0F94  00F1               	movwf	??_Avthor_Uart_Instruction
  7425  0F95  0871               	movf	??_Avthor_Uart_Instruction,w
  7426  0F96  00EA               	movwf	_Avthor_States+10	;volatile
  7427                           
  7428                           ;AvthorStates/AvthorStates.c: 201:     break;
  7429  0F97  2FFF               	goto	i1l51
  7430  0F98                     i1l2375:
  7431                           
  7432                           ;AvthorStates/AvthorStates.c: 204:                 Avthor_States.motor_action = calibrat
      +                          ing;
  7433  0F98  3003               	movlw	3
  7434  0F99  00F1               	movwf	??_Avthor_Uart_Instruction
  7435  0F9A  0871               	movf	??_Avthor_Uart_Instruction,w
  7436  0F9B  00E2               	movwf	_Avthor_States+2	;volatile
  7437                           
  7438                           ;AvthorStates/AvthorStates.c: 205:                 Avthor_States.INTERRUPT_BREAK_FLAG = 
      +                          1;
  7439  0F9C  3001               	movlw	1
  7440  0F9D  00F1               	movwf	??_Avthor_Uart_Instruction
  7441  0F9E  0871               	movf	??_Avthor_Uart_Instruction,w
  7442  0F9F  00E1               	movwf	_Avthor_States+1	;volatile
  7443  0FA0                     i1l2377:
  7444                           
  7445                           ;AvthorStates/AvthorStates.c: 206:     Avthor_States.stepper_instruction = 0;
  7446  0FA0  01E0               	clrf	_Avthor_States	;volatile
  7447                           
  7448                           ;AvthorStates/AvthorStates.c: 207:     break;
  7449  0FA1  2FFF               	goto	i1l51
  7450  0FA2                     i1l2379:
  7451                           
  7452                           ;AvthorStates/AvthorStates.c: 210:                 Avthor_States.INTERRUPT_BREAK_FLAG = 
      +                          1;
  7453  0FA2  3001               	movlw	1
  7454  0FA3  00F1               	movwf	??_Avthor_Uart_Instruction
  7455  0FA4  0871               	movf	??_Avthor_Uart_Instruction,w
  7456  0FA5  00E1               	movwf	_Avthor_States+1	;volatile
  7457                           
  7458                           ;AvthorStates/AvthorStates.c: 211:     Avthor_States.motor_action = slowStepTestAction;
  7459  0FA6  3009               	movlw	9
  7460  0FA7  00F1               	movwf	??_Avthor_Uart_Instruction
  7461  0FA8  0871               	movf	??_Avthor_Uart_Instruction,w
  7462  0FA9  00E2               	movwf	_Avthor_States+2	;volatile
  7463                           
  7464                           ;AvthorStates/AvthorStates.c: 212:     break;
  7465  0FAA  2FFF               	goto	i1l51
  7466  0FAB                     i1l2381:
  7467                           
  7468                           ;AvthorStates/AvthorStates.c: 215:                 Avthor_States.INTERRUPT_BREAK_FLAG = 
      +                          1;
  7469  0FAB  3001               	movlw	1
  7470  0FAC  00F1               	movwf	??_Avthor_Uart_Instruction
  7471  0FAD  0871               	movf	??_Avthor_Uart_Instruction,w
  7472  0FAE  00E1               	movwf	_Avthor_States+1	;volatile
  7473                           
  7474                           ;AvthorStates/AvthorStates.c: 216:     Avthor_States.motor_action = moveUntilZUp;
  7475  0FAF  300A               	movlw	10
  7476  0FB0  00F1               	movwf	??_Avthor_Uart_Instruction
  7477  0FB1  0871               	movf	??_Avthor_Uart_Instruction,w
  7478  0FB2  00E2               	movwf	_Avthor_States+2	;volatile
  7479                           
  7480                           ;AvthorStates/AvthorStates.c: 217:     break;
  7481  0FB3  2FFF               	goto	i1l51
  7482  0FB4                     i1l2383:
  7483                           
  7484                           ;AvthorStates/AvthorStates.c: 220:                 Avthor_States.INTERRUPT_BREAK_FLAG = 
      +                          1;
  7485  0FB4  3001               	movlw	1
  7486  0FB5  00F1               	movwf	??_Avthor_Uart_Instruction
  7487  0FB6  0871               	movf	??_Avthor_Uart_Instruction,w
  7488  0FB7  00E1               	movwf	_Avthor_States+1	;volatile
  7489                           
  7490                           ;AvthorStates/AvthorStates.c: 221:     Avthor_States.motor_action = moveUntilZDown;
  7491  0FB8  300B               	movlw	11
  7492  0FB9  00F1               	movwf	??_Avthor_Uart_Instruction
  7493  0FBA  0871               	movf	??_Avthor_Uart_Instruction,w
  7494  0FBB  00E2               	movwf	_Avthor_States+2	;volatile
  7495                           
  7496                           ;AvthorStates/AvthorStates.c: 222:     break;
  7497  0FBC  2FFF               	goto	i1l51
  7498  0FBD                     i1l2385:
  7499                           
  7500                           ;AvthorStates/AvthorStates.c: 224:     Avthor_States.stepper_instruction = instr;
  7501  0FBD  0873               	movf	Avthor_Uart_Instruction@instr,w
  7502  0FBE  00F1               	movwf	??_Avthor_Uart_Instruction
  7503  0FBF  0871               	movf	??_Avthor_Uart_Instruction,w
  7504  0FC0  00E0               	movwf	_Avthor_States	;volatile
  7505                           
  7506                           ;AvthorStates/AvthorStates.c: 225:     Avthor_States.motor_action = stepperInstruction;
  7507  0FC1  3008               	movlw	8
  7508  0FC2  00F1               	movwf	??_Avthor_Uart_Instruction
  7509  0FC3  0871               	movf	??_Avthor_Uart_Instruction,w
  7510  0FC4  00E2               	movwf	_Avthor_States+2	;volatile
  7511                           
  7512                           ;AvthorStates/AvthorStates.c: 226:     Avthor_States.INTERRUPT_BREAK_FLAG = 1;
  7513  0FC5  3001               	movlw	1
  7514  0FC6  00F1               	movwf	??_Avthor_Uart_Instruction
  7515  0FC7  0871               	movf	??_Avthor_Uart_Instruction,w
  7516  0FC8  00E1               	movwf	_Avthor_States+1	;volatile
  7517                           
  7518                           ;AvthorStates/AvthorStates.c: 227:     _delay((unsigned long)((10)*(4000000/4000.0)));
  7519  0FC9  300D               	movlw	13
  7520  0FCA  00F1               	movwf	??_Avthor_Uart_Instruction
  7521  0FCB  30FC               	movlw	252
  7522  0FCC                     u151_27:
  7523  0FCC  0B89               	decfsz	9,f
  7524  0FCD  2FCC               	goto	u151_27
  7525  0FCE  0BF1               	decfsz	??_Avthor_Uart_Instruction,f
  7526  0FCF  2FCC               	goto	u151_27
  7527                           
  7528                           ;AvthorStates/AvthorStates.c: 228:     break;
  7529  0FD0  2FFF               	goto	i1l51
  7530  0FD1                     i1l2389:
  7531  0FD1  0873               	movf	Avthor_Uart_Instruction@instr,w
  7532  0FD2  00F1               	movwf	??_Avthor_Uart_Instruction
  7533  0FD3  01F2               	clrf	??_Avthor_Uart_Instruction+1
  7534                           
  7535                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7536                           ; Switch size 1, requested type "simple"
  7537                           ; Number of cases is 1, Range of values is 0 to 0
  7538                           ; switch strategies available:
  7539                           ; Name         Instructions Cycles
  7540                           ; simple_byte            4     3 (average)
  7541                           ; direct_byte            8     6 (fixed)
  7542                           ; jumptable            260     6 (fixed)
  7543                           ;	Chosen strategy is simple_byte
  7544  0FD4  0872               	movf	??_Avthor_Uart_Instruction+1,w
  7545  0FD5  3A00               	xorlw	0	; case 0
  7546  0FD6  1903               	skipnz
  7547  0FD7  2FD9               	goto	i1l3829
  7548  0FD8  2FBD               	goto	i1l2385
  7549  0FD9                     i1l3829:
  7550                           
  7551                           ; Switch size 1, requested type "simple"
  7552                           ; Number of cases is 12, Range of values is 65 to 238
  7553                           ; switch strategies available:
  7554                           ; Name         Instructions Cycles
  7555                           ; simple_byte           37    19 (average)
  7556                           ; jumptable            263     9 (fixed)
  7557                           ;	Chosen strategy is simple_byte
  7558  0FD9  0871               	movf	??_Avthor_Uart_Instruction,w
  7559  0FDA  3A41               	xorlw	65	; case 65
  7560  0FDB  1903               	skipnz
  7561  0FDC  2FFF               	goto	i1l51
  7562  0FDD  3A24               	xorlw	36	; case 101
  7563  0FDE  1903               	skipnz
  7564  0FDF  2F6C               	goto	i1l2367
  7565  0FE0  3A03               	xorlw	3	; case 102
  7566  0FE1  1903               	skipnz
  7567  0FE2  2F6E               	goto	i1l2371
  7568  0FE3  3A01               	xorlw	1	; case 103
  7569  0FE4  1903               	skipnz
  7570  0FE5  2F83               	goto	i1l2373
  7571  0FE6  3A0F               	xorlw	15	; case 104
  7572  0FE7  1903               	skipnz
  7573  0FE8  2F98               	goto	i1l2375
  7574  0FE9  3A01               	xorlw	1	; case 105
  7575  0FEA  1903               	skipnz
  7576  0FEB  2FA2               	goto	i1l2379
  7577  0FEC  3A03               	xorlw	3	; case 106
  7578  0FED  1903               	skipnz
  7579  0FEE  2F6C               	goto	i1l2367
  7580  0FEF  3A01               	xorlw	1	; case 107
  7581  0FF0  1903               	skipnz
  7582  0FF1  2FFF               	goto	i1l51
  7583  0FF2  3AC2               	xorlw	194	; case 169
  7584  0FF3  1903               	skipnz
  7585  0FF4  2F58               	goto	i1l2359
  7586  0FF5  3A4F               	xorlw	79	; case 230
  7587  0FF6  1903               	skipnz
  7588  0FF7  2FAB               	goto	i1l2381
  7589  0FF8  3A01               	xorlw	1	; case 231
  7590  0FF9  1903               	skipnz
  7591  0FFA  2FB4               	goto	i1l2383
  7592  0FFB  3A09               	xorlw	9	; case 238
  7593  0FFC  1903               	skipnz
  7594  0FFD  2FFF               	goto	i1l51
  7595  0FFE  2FBD               	goto	i1l2385
  7596  0FFF                     i1l51:
  7597  0FFF  0008               	return
  7598  1000                     __end_of_Avthor_Uart_Instruction:
  7599                           
  7600                           	psect	text39
  7601  0C51                     __ptext39:	
  7602 ;; *************** function i1_stepperSleep *****************
  7603 ;; Defined at:
  7604 ;;		line 190 in file "step/step.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;  in              1    wreg     _Bool 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;  in              1    0[COMMON] _Bool 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;Total ram usage:        1 bytes
  7623 ;; Hardware stack levels used: 1
  7624 ;; This function calls:
  7625 ;;		Nothing
  7626 ;; This function is called by:
  7627 ;;		_Avthor_Uart_Instruction
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631  0C51                     i1_stepperSleep:	
  7632                           ;psect for function i1_stepperSleep
  7633                           
  7634                           
  7635                           ;incstack = 0
  7636                           ; Regs used in i1_stepperSleep: [wreg+status,2+status,0]
  7637                           ;i1stepperSleep@in stored from wreg
  7638  0C51  00F0               	movwf	i1stepperSleep@in
  7639  0C52                     i1l2261:
  7640                           
  7641                           ;step/step.c: 191:     if(in){
  7642  0C52  0870               	movf	i1stepperSleep@in,w
  7643  0C53  1903               	btfsc	3,2
  7644  0C54  2C56               	goto	u76_21
  7645  0C55  2C57               	goto	u76_20
  7646  0C56                     u76_21:
  7647  0C56  2C5A               	goto	i1l513
  7648  0C57                     u76_20:
  7649  0C57                     i1l510:	
  7650                           ;step/step.c: 192:         do { LATCbits.LATC2 = 0; } while(0);
  7651                           
  7652  0C57  0022               	movlb	2	; select bank2
  7653  0C58  110E               	bcf	14,2	;volatile
  7654  0C59  2C5C               	goto	i1l515
  7655  0C5A                     i1l513:	
  7656                           ;step/step.c: 194:         do { LATCbits.LATC2 = 1; } while(0);
  7657                           
  7658  0C5A  0022               	movlb	2	; select bank2
  7659  0C5B  150E               	bsf	14,2	;volatile
  7660  0C5C                     i1l515:
  7661  0C5C  0008               	return
  7662  0C5D                     __end_ofi1_stepperSleep:
  7663                           
  7664                           	psect	text40
  7665  0C3D                     __ptext40:	
  7666 ;; *************** function i1_EUSART_Write *****************
  7667 ;; Defined at:
  7668 ;;		line 132 in file "mcc_generated_files/eusart.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;  txData          1    wreg     unsigned char 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;  txData          1    0[COMMON] unsigned char 
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7686 ;;Total ram usage:        1 bytes
  7687 ;; Hardware stack levels used: 1
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		_Avthor_Uart_Instruction
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695  0C3D                     i1_EUSART_Write:	
  7696                           ;psect for function i1_EUSART_Write
  7697                           
  7698                           
  7699                           ;incstack = 0
  7700                           ; Regs used in i1_EUSART_Write: [wreg]
  7701                           ;i1EUSART_Write@txData stored from wreg
  7702  0C3D  00F0               	movwf	i1EUSART_Write@txData
  7703  0C3E                     i1l2257:
  7704  0C3E                     i1l175:	
  7705                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  7706                           
  7707                           
  7708                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  7709  0C3E  0020               	movlb	0	; select bank0
  7710  0C3F  1E11               	btfss	17,4	;volatile
  7711  0C40  2C42               	goto	u75_21
  7712  0C41  2C43               	goto	u75_20
  7713  0C42                     u75_21:
  7714  0C42  2C3E               	goto	i1l175
  7715  0C43                     u75_20:
  7716  0C43                     i1l2259:
  7717                           
  7718                           ;mcc_generated_files/eusart.c: 138:     TXREG = txData;
  7719  0C43  0870               	movf	i1EUSART_Write@txData,w
  7720  0C44  0023               	movlb	3	; select bank3
  7721  0C45  009A               	movwf	26	;volatile
  7722  0C46                     i1l178:
  7723  0C46  0008               	return
  7724  0C47                     __end_ofi1_EUSART_Write:
  7725  007E                     btemp	set	126	;btemp
  7726  007E                     int$flags	set	126
  7727  007E                     wtemp0	set	126
  7728                           
  7729                           	psect	idloc
  7730                           
  7731                           ;Config register IDLOC0 @ 0x8000
  7732                           ;	unspecified, using default values
  7733  8000                     	org	32768
  7734  8000  3FFF               	dw	16383
  7735                           
  7736                           ;Config register IDLOC1 @ 0x8001
  7737                           ;	unspecified, using default values
  7738  8001                     	org	32769
  7739  8001  3FFF               	dw	16383
  7740                           
  7741                           ;Config register IDLOC2 @ 0x8002
  7742                           ;	unspecified, using default values
  7743  8002                     	org	32770
  7744  8002  3FFF               	dw	16383
  7745                           
  7746                           ;Config register IDLOC3 @ 0x8003
  7747                           ;	unspecified, using default values
  7748  8003                     	org	32771
  7749  8003  3FFF               	dw	16383
  7750                           
  7751                           	psect	config
  7752                           
  7753                           ;Config register CONFIG1 @ 0x8007
  7754                           ;	Oscillator Selection Bits
  7755                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7756                           ;	Watchdog Timer Enable
  7757                           ;	WDTE = OFF, WDT disabled
  7758                           ;	Power-up Timer Enable
  7759                           ;	PWRTE = OFF, PWRT disabled
  7760                           ;	MCLR Pin Function Select
  7761                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7762                           ;	Flash Program Memory Code Protection
  7763                           ;	CP = OFF, Program memory code protection is disabled
  7764                           ;	Brown-out Reset Enable
  7765                           ;	BOREN = ON, Brown-out Reset enabled
  7766                           ;	Clock Out Enable
  7767                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7768                           ;	Internal/External Switchover Mode
  7769                           ;	IESO = ON, Internal/External Switchover Mode is enabled
  7770                           ;	Fail-Safe Clock Monitor Enable
  7771                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7772  8007                     	org	32775
  7773  8007  3FE4               	dw	16356
  7774                           
  7775                           ;Config register CONFIG2 @ 0x8008
  7776                           ;	Flash Memory Self-Write Protection
  7777                           ;	WRT = OFF, Write protection off
  7778                           ;	CPU System Clock Selection Bit
  7779                           ;	CPUDIV = CLKDIV6, CPU system clock divided by 6
  7780                           ;	USB Low SPeed Clock Selection bit
  7781                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
  7782                           ;	PLL Multipler Selection Bit
  7783                           ;	PLLMULT = 3x, 3x Output Frequency Selected
  7784                           ;	PLL Enable Bit
  7785                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
  7786                           ;	Stack Overflow/Underflow Reset Enable
  7787                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7788                           ;	Brown-out Reset Voltage Selection
  7789                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7790                           ;	Low-Power Brown Out Reset
  7791                           ;	LPBOR = OFF, Low-Power BOR is disabled
  7792                           ;	Low-Voltage Programming Enable
  7793                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  7794  8008                     	org	32776
  7795  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         20
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     59      75
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    S34$complex_breaths_instruction_pointer	PTR unsigned char  size(1) Largest target is 12
		 -> Avthor_States(BANK0[11]), 

    Avthor_States.complex_breaths_instruction_pointer	PTR unsigned char  size(1) Largest target is 12
		 -> Avthor_States.complex_breaths_instructions(BANK0[5]), Avthor_States(BANK0[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_Avthor_Uart_Instruction
    _Avthor_Uart_Instruction->i1_EUSART_Write
    _Avthor_Uart_Instruction->i1_stepperSleep

Critical Paths under _main in BANK0

    _main->_basicStepperInstruction
    _topButtonTrigger->_Step
    _smallVent->_EUSART_Write
    _slowStepTest->_setStepSize
    _reset_motor_action_if_matches->_reset_motor_action
    _moveUntilZ->_setStepSize
    _inchUp->_Step
    _inchDown->_Step
    _calibrate->_setStepSize
    _bottomButtonTrigger->_Step
    _basicStepperInstruction->_Step
    ___wmul->_get_complex_breaths_instructions_index
    ___awdiv->___wmul
    _Step->___awdiv
    _setStepSize->_stepperSleep
    _sendHapticCommand->_EUSART_Write
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   50469
                                             43 BANK0     16    16      0
                       _EUSART_Write
                  _SYSTEM_Initialize
                               _Step
                             ___wmul
            _basicStepperInstruction
                _bottomButtonTrigger
                          _calibrate
_get_bellowsHasBeenInchedUpOrDownSin
_get_complex_breaths_instructions_in
                   _get_motor_action
            _get_stepper_instruction
                           _inchDown
                             _inchUp
                   _initAvthorStates
                         _moveUntilZ
                 _reset_motor_action
      _reset_motor_action_if_matches
           _set_INTERRUPT_BREAK_FLAG
                       _slowStepTest
                          _smallVent
                       _stepperSleep
                   _topButtonTrigger
 ---------------------------------------------------------------------------------
 (1) _topButtonTrigger                                     4     4      0    9138
                                             29 BANK0      4     4      0
                               _Step
                             ___wmul
           _set_INTERRUPT_BREAK_FLAG
 ---------------------------------------------------------------------------------
 (1) _smallVent                                            0     0      0      31
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (1) _slowStepTest                                         2     2      0     155
                                              4 BANK0      2     2      0
           _get_INTERRUPT_BREAK_FLAG
                       _setDirection
                        _setStepSize
           _set_INTERRUPT_BREAK_FLAG
                       _stepperSleep
 ---------------------------------------------------------------------------------
 (1) _reset_motor_action_if_matches                        1     1      0      31
                                              1 BANK0      1     1      0
                 _reset_motor_action
 ---------------------------------------------------------------------------------
 (2) _reset_motor_action                                   1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _moveUntilZ                                           1     1      0     155
                                              4 BANK0      1     1      0
           _get_INTERRUPT_BREAK_FLAG
                       _setDirection
                        _setStepSize
                       _stepperSleep
 ---------------------------------------------------------------------------------
 (1) _initAvthorStates                                     3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _inchUp                                               1     1      0    4977
                                             29 BANK0      1     1      0
                               _Step
 ---------------------------------------------------------------------------------
 (1) _inchDown                                             1     1      0    4977
                                             29 BANK0      1     1      0
                               _Step
 ---------------------------------------------------------------------------------
 (1) _get_stepper_instruction                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_motor_action                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_complex_breaths_instructions_index               1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_bellowsHasBeenInchedUpOrDownSinceVenting         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            0     0      0     155
           _get_INTERRUPT_BREAK_FLAG
                       _setDirection
                        _setStepSize
           _set_INTERRUPT_BREAK_FLAG
                       _stepperSleep
 ---------------------------------------------------------------------------------
 (1) _bottomButtonTrigger                                  4     4      0    9138
                                             29 BANK0      4     4      0
                               _Step
                             ___wmul
           _set_INTERRUPT_BREAK_FLAG
 ---------------------------------------------------------------------------------
 (1) _basicStepperInstruction                             14    14      0   11573
                                             29 BANK0     14    14      0
                               _Step
                            ___awdiv
                             ___wmul
           _set_INTERRUPT_BREAK_FLAG
 ---------------------------------------------------------------------------------
 (2) _set_INTERRUPT_BREAK_FLAG                             2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4096
                                              1 BANK0      6     2      4
_get_complex_breaths_instructions_in (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Step                                                13     6      7    4977
                                             16 BANK0     13     6      7
                            ___awdiv (ARG)
                             ___wmul (ARG)
           _get_INTERRUPT_BREAK_FLAG
                  _sendHapticCommand
                       _setDirection
                        _setStepSize
                       _stepperSleep
 ---------------------------------------------------------------------------------
 (3) _setStepSize                                          3     3      0      62
                                              1 BANK0      3     3      0
                       _stepperSleep
 ---------------------------------------------------------------------------------
 (3) _stepperSleep                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _setDirection                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _sendHapticCommand                                    1     1      0      62
                                              1 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _get_INTERRUPT_BREAK_FLAG                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     363
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     363
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     220
                                              4 COMMON     1     1      0
            _Avthor_Uart_Instruction
                        _EUSART_Read
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Avthor_Uart_Instruction                              3     3      0     220
                                              1 COMMON     3     3      0
                     i1_EUSART_Write
                     i1_stepperSleep
 ---------------------------------------------------------------------------------
 (7) i1_stepperSleep                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) i1_EUSART_Write                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Write
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _Step
     ___awdiv (ARG)
       ___wmul (ARG)
         _get_complex_breaths_instructions_index (ARG)
     ___wmul (ARG)
     _get_INTERRUPT_BREAK_FLAG (ARG)
     _sendHapticCommand (ARG)
       _EUSART_Write
     _setDirection (ARG)
     _setStepSize (ARG)
       _stepperSleep
     _stepperSleep (ARG)
   ___wmul
   _basicStepperInstruction
     _Step
     ___awdiv
     ___wmul
     _set_INTERRUPT_BREAK_FLAG
   _bottomButtonTrigger
     _Step
     ___wmul
     _set_INTERRUPT_BREAK_FLAG
   _calibrate
     _get_INTERRUPT_BREAK_FLAG
     _setDirection
     _setStepSize
     _set_INTERRUPT_BREAK_FLAG
     _stepperSleep
   _get_bellowsHasBeenInchedUpOrDownSinceVenting
   _get_complex_breaths_instructions_index
   _get_motor_action
   _get_stepper_instruction
   _inchDown
     _Step
   _inchUp
     _Step
   _initAvthorStates
   _moveUntilZ
     _get_INTERRUPT_BREAK_FLAG
     _setDirection
     _setStepSize
     _stepperSleep
   _reset_motor_action
   _reset_motor_action_if_matches
     _reset_motor_action
   _set_INTERRUPT_BREAK_FLAG
   _slowStepTest
     _get_INTERRUPT_BREAK_FLAG
     _setDirection
     _setStepSize
     _set_INTERRUPT_BREAK_FLAG
     _stepperSleep
   _smallVent
     _EUSART_Write
   _stepperSleep
   _topButtonTrigger
     _Step
     ___wmul
     _set_INTERRUPT_BREAK_FLAG

 _INTERRUPT_InterruptManager (ROOT)
   _Avthor_Uart_Instruction
     i1_EUSART_Write
     i1_stepperSleep
   _EUSART_Read
   _EUSART_is_rx_ready

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3B      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      54      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      54      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Wed Oct 30 13:31:32 2024

                                    ??i1_EUSART_Write 0070                                          _slowStepTest 0E14  
               __end_of_reset_motor_action_if_matches 0C69                         _reset_motor_action_if_matches 0C5D  
                                                  l13 0D7B                                                    l22 0BFE  
                                                  l32 0C3C                                                    l16 0C01  
                                                  l25 0C27                                                    l19 0BF8  
                                                  l44 0C34                                                    l29 0C68  
                                                  l38 0BFB                                                    l99 0C75  
                                        ___awdiv@sign 002D                                   ___wmul@multiplicand 0023  
                                       _Avthor_States 0060                                                   l102 0C98  
                                                 l105 0C9D                                                   l108 0C05  
                                                 l151 0D27                                                   l311 05AE  
                                                 l400 0515                                                   l217 0CBD  
                                                 l501 0E13                                                   l325 060E  
                                                 l190 0C1B                                                   l510 0C8A  
                                                 l175 0C49                                                   l520 0E53  
                                                 l440 07B0                                                   l360 010A  
                                                 l504 0DAA                                                   l344 0C0F  
                                                 l193 0C21                                                   l513 0C8D  
                                                 l361 011D                                                   l178 0C50  
                                                 l530 0E5A                                                   l522 0E55  
                                                 l362 012C                                                   l506 0DDE  
                                                 l515 0C8F                                                   l355 00AB  
                                                 l196 0C15                                                   l532 0E5B  
                                                 l524 0E56                                                   l460 07FE  
                                                 l444 07AB                                                   l356 00BE  
                                                 l348 0044                                                   l453 07DC  
                                                 l445 079F                                                   l357 00D1  
                                                 l542 0E62                                                   l454 07D0  
                                                 l358 00E4                                                   l470 0E4F  
                                                 l551 0E69                                                   l535 0E5D  
                                                 l359 00F7                                                   l295 073D  
                                                 l544 0E64                                                   l528 0E58  
                                                 l448 07A7                                                   l480 0D50  
                                                 l561 0C7D                                                   l553 0E6A  
                                                 l537 0E5F                                                   l457 07D8  
                                                 l449 07E1                                                   l465 0E21  
                                                 l546 0E65                                                   l490 0DA9  
                                                 l539 0E60                                                   l475 0D38  
                                                 l564 0C80                                                   l468 0E32  
                                                 l549 0E67                                                   l557 0E8D  
                                                 l637 0CEF                                                   l485 0D8D  
                                                 l493 0CE3                                                   l566 0C82  
                                                 l478 0D40                                                   l639 0D03  
                                                 l488 0D95                                                   l496 0CD0  
                                                 l569 07FF                                                   l499 0DDF  
                                                 l790 0EED                                                   u540 0C9D  
                                                 u541 0C9C                                                   u970 0C8A  
                                                 u971 0C89                                                   u980 0C4D  
                                                 u981 0C4C                                                   u990 0C7D  
                                                 u991 0C7C                          Avthor_Uart_Instruction@instr 0073  
                      ?_EUSART_SetFramingErrorHandler 0020                                                   wreg 0009  
                                        ?_EUSART_Read 0070                                                  l2121 0CB6  
                                                l2131 0C93                                                  l2123 0CB7  
                                                l2115 0CAD                                                  l2133 0C94  
                                                l2125 0CB9                                                  l2117 0CB2  
                                                l3021 0C49                                                  l3101 07C7  
                                                l2135 0C96                                                  l2127 0CBB  
                                                l2119 0CB4                                                  l3023 0C4D  
                                                l3031 0C78                                                  l3111 07EB  
                                                l3025 0C16                                                  l2129 0C90  
                                                l2137 0C02                                                  l3033 0E52  
                                                l3113 07EF                                                  l3121 0CE7  
                                                l3201 0C37                                                  l3027 0C1C  
                                                l3019 0C85                                                  l3035 0E6C  
                                                l3115 07F5                                                  l3107 07D2  
                                                l3123 0CEB                                                  l3211 0E0F  
                                                l3029 0C10                                                  l3061 0D0D  
                                                l3205 0C69                                                  l3117 07FA  
                                                l3109 07D6                                                  l3141 0E9B  
                                                l3133 0E8E                                                  l3125 0CF4  
                                                l3301 0137                                                  l3213 0DAC  
                                                l3221 0D88                                                  l3063 0D0E  
                                                l2079 0BF6                                                  l3047 07FF  
                                                l3039 0E71                                                  l3071 076C  
                                                l3151 0EB0                                                  l3143 0E9F  
                                                l3135 0E90                                                  l3127 0CF9  
                                                l3119 0CE4                                                  l3303 014C  
                                                l3215 0DBA                                                  l3223 0D8F  
                                                l3231 0D2A                                                  l3055 0C22  
                                                l3207 0DE1                                                  l3065 0D16  
                                                l3081 0789                                                  l3073 0775  
                                                l3161 0ECF                                                  l3153 0EB3  
                                                l3145 0EA4                                                  l3137 0E94  
                                                l3129 0CFF                                                  l3057 0C30  
                                                l3401 0337                                                  l3321 01B1  
                                                l3305 0161                                                  l3217 0DDA  
                                                l3225 0D93                                                  l3241 0D4C  
                                                l3233 0D33                                                  l3209 0DEF  
                                                l3067 0D1E                                                  l3059 0D04  
                                                l3091 07A1                                                  l3083 0792  
                                                l3075 077A                                                  l3171 0EE4  
                                                l3163 0ED3                                                  l3155 0EB8  
                                                l3147 0EA8                                                  l3139 0E99  
                                                l3411 0366                                                  l3403 034C  
                                                l3331 01BE                                                  l3323 01B5  
                                                l3315 01A0                                                  l3307 0176  
                                                l3227 0D99                                                  l3219 0D7C  
                                                l2283 0BFF                                                  l3235 0D3A  
                                                l3251 0E30                                                  l3243 0E14  
                                                l3069 0D26                                                  l3093 07A5  
                                                l3085 0796                                                  l3077 0780  
                                                l3173 0EE9                                                  l3165 0ED4  
                                                l3157 0EBC                                                  l3149 0EAA  
                                                l3405 0361                                                  l3341 0227  
                                                l3333 01D3                                                  l3325 01B7  
                                                l3317 01A4                                                  l3309 018B  
                                                l3229 0DA1                                                  l3181 0D58  
                                                l3237 0D3E                                                  l3253 0E3F  
                                                l3245 0E18                                                  l3261 0C0B  
                                                l3501 057B                                                  l3095 07BA  
                                                l3079 0785                                                  l3167 0ED9  
                                                l3159 0EC0                                                  l3431 0441  
                                                l3351 0241                                                  l3335 01E8  
                                                l3327 01B9                                                  l3319 01A6  
                                                l3423 036B                                                  l3271 0041  
                                                l3263 0039                                                  l2287 0BFC  
                                                l3191 0D71                                                  l3239 0D44  
                                                l3255 0E47                                                  l3247 0E1C  
                                                l3511 0597                                                  l3503 0583  
                                                l3097 07BE                                                  l3169 0EDF  
                                                l3441 050C                                                  l3433 0487  
                                                l3361 0246                                                  l3345 023C  
                                                l3337 01FD                                                  l3329 01BB  
                                                l3281 0081                                                  l3425 040B  
                                                l3273 0042                                                  l3265 003D  
                                                l3257 0CD1                                                  l3193 0D76  
                                                l3185 0D5A                                                  l3177 0D51  
                                                l3249 0E23                                                  l3521 05A7  
                                                l3513 059A                                                  l3505 0586  
                                                l3099 07C3                                                  l3435 0490  
                                                l3427 0414                                                  l3371 02AF  
                                                l3363 025B                                                  l3339 0212  
                                                l3291 00D3                                                  l3283 0096  
                                                l3275 0046                                                  l3267 003F  
                                                l2299 0BF9                                                  l3259 0CBE  
                                                l3195 0D77                                                  l3187 0D60  
                                                l3179 0D54                                                  l3531 05B0  
                                                l3523 05A7                                                  l3515 059E  
                                                l3507 058A                                                  l3451 051C  
                                                l3437 04A7                                                  l3429 042B  
                                                l3381 02C9                                                  l3365 0270  
                                                l3293 00E6                                                  l3277 0057  
                                                l3269 0040                                                  l3189 0D64  
                                                l3197 0C5F                                                  l3533 05B5  
                                                l3525 05A7                                                  l3517 05A3  
                                                l3509 058F                                                  l3461 0527  
                                                l3453 0520                                                  l3439 0503  
                                                l3391 02CE                                                  l3375 02C4  
                                                l3367 0285                                                  l3295 00F9  
                                                l3287 00AD                                                  l3279 006C  
                                                l3199 0C65                                                  l3551 0609  
                                                l3535 05BE                                                  l3527 05A8  
                                                l3519 05A7                                                  l3471 053A  
                                                l3463 052B                                                  l3607 073D  
                                                l3455 0522                                                  l3447 0516  
                                                l3393 02E3                                                  l3369 029A  
                                                l3297 010C                                                  l3289 00C0  
                                                l3561 0630                                                  l3553 0610  
                                                l3537 05C7                                                  l3529 05A9  
                                                l3481 0550                                                  l3473 053D  
                                                l3465 052E                                                  l3457 0524  
                                                l3449 0519                                                  l3395 02F8  
                                                l3299 0123                                                  l3555 0615  
                                                l3571 0668                                                  l3539 05D0  
                                                l3547 05D9                                                  l3491 0566  
                                                l3483 0555                                                  l3475 0540  
                                                l3467 0531                                                  l3459 0525  
                                                l3397 030D                                                  l3581 06E3  
                                                l3573 0686                                                  l3821 0645  
                                                l3557 061E                                                  l3549 0608  
                                                l3493 056A                                                  l3485 0559  
                                                l3477 0545                                                  l3469 0536  
                                                l3399 0322                                                  l3823 0748  
                                                l3591 0717                                                  l3583 06FA  
                                                l3575 0696                                                  l3559 0627  
                                                l3495 056F                                                  l3487 055D  
                                                l3479 054D                                                  l3825 0373  
                                                l3593 071B                                                  l3585 0702  
                                                l3577 06C4                                                  l3569 0639  
                                                l3497 0573                                                  l3489 0562  
                                                l3827 0E79                                                  l3595 0723  
                                                l3587 070D                                                  l3579 06DA  
                                                l3819 05E5                                                  l3499 0576  
                                                l3597 0729                                                  l3589 0715  
                                                l3599 0734                                                  u1000 0780  
                                                u1001 077F                                                  u1010 079E  
                                                u1011 079D                                                  u1020 07BA  
                                                u1100 0E94                                                  u1021 07B9  
                                                u1101 0E93                                                  u1030 07CF  
                                                u1110 0E9F                                                  u1031 07CE  
                                                u1111 0E9E                                                  u1040 07EB  
                                                u1120 0EB0                                                  u1200 0D71  
                                                u1041 07EA                                                  u1025 07B6  
                                                u1121 0EAF                                                  u1201 0D70  
                                                u1050 07F5                                                  u1210 0C65  
                                                u1051 07F4                                                  u1211 0C64  
                                                u1140 0EC0                                                  u1060 0CEB  
                                                u1220 0DA1                                                  u1045 07E7  
                                                u1141 0EBF                                                  u1061 0CEA  
                                                u1221 0DA0                                                  u1205 0D6D  
                                                u1230 0D4C                                                  u1135 0EB4  
                                                u1231 0D4B                                                  u1160 0ECF  
                                                u1240 0E47                                                  u1161 0ECE  
                                                u1241 0E46                                                  u1090 0CFF  
                                                u1250 070D                                                  u1155 0EC1  
                                                u1091 0CFE                                                  u1075 0CF0  
                                                u1251 070C                                                  u1307 06DE  
                                                u1180 0EDF                                                  u1260 0715  
                                                u1181 0EDE                                                  u1165 0ECB  
                                                u1085 0CF5                                                  u1261 0714  
                                                u1317 06FE                                                  _LATA 010C  
                                                u1190 0EE4                                                  u1270 0723  
                                                u1191 0EE3                                                  u1175 0ED5  
                                                u1407 040F                                                  u1327 0DE5  
                                                u1271 0722                                                  _LATC 010E  
                                                u1280 0734                                                  u1417 048B  
                                                u1337 0E29                                                  u1281 0733  
                                                u1290 073C                                                  u1427 0507  
                                                u1347 0E38                                                  u1291 073B  
                                                u1437 0510                                                  u1357 0D3B  
                                                u1447 078D                                                  u1367 0D41  
                                                u1457 07A2                                                  u1377 0D90  
                                                u1467 07A8                                                  u1387 0D96  
                                                u1477 07D3                                                  u1397 0DB0  
                                                u1487 07D9                                                  i1l51 0FFF  
                                                i1l54 0F40                                                  _WPUA 020C  
                                                _Step 076A                                                  _main 0516  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                                                btemp 007E                                                  start 0025  
                          __end_of_reset_motor_action 0C28                                          _stepperSleep 0C83  
                                       ?_EUSART_Write 0070                         __end_of_OSCILLATOR_Initialize 0C9E  
                                               ?_Step 0030                                                 ?_main 0070  
                                     __end_of___awdiv 0EEE                                       ___awdiv@divisor 0027  
                                               i1l172 0CAC                                                 i1l510 0C57  
                                               i1l175 0C3E                                                 i1l159 0C0A  
                                               i1l168 0C9E                                                 i1l513 0C5A  
                                               i1l178 0C46                                                 i1l515 0C5C  
                                               i1l289 0023                                       ___awdiv@counter 002C  
                                               _RCREG 0199                                                 _RCSTA 019D  
                                               u36_20 0CA3                                                 u36_21 0CA2  
                                               u37_20 0CA9                                                 u37_21 0CA8  
                                               u80_20 0F0F                                                 u80_21 0F0E  
                                               u81_20 0F24                                                 u81_21 0F23  
                                               _TRISA 008C                                                 _TRISC 008E  
                                               u82_20 0F35                                                 u90_20 000F  
                                               u82_21 0F34                                                 u90_21 000E  
                                               u75_20 0C43                                                 u83_20 0F46  
                                               u91_20 0017                                                 u75_21 0C42  
                                               u83_21 0F45                                                 u91_21 0016  
                                               u76_20 0C57                                                 u84_20 0F4C  
                                               u76_21 0C56                                                 u84_21 0F4B  
                                               u85_20 0F5D                                                 u85_21 0F5C  
                                               u79_20 0EF5                                                 u79_21 0EF4  
                                               u89_20 000A                                                 u89_21 0009  
                                               _TXREG 019A                                                 _TXSTA 019E  
                                               Step@i 0038                                        _WDT_Initialize 0C02  
                                      stepperSleep@in 0020                                                 status 0003  
                                               wtemp0 007E                                       __initialization 0027  
                                        __end_of_Step 07FF                                          __end_of_main 076A  
                                      ??_EUSART_Write 0075                                        i1_stepperSleep 0C51  
                         ?_INTERRUPT_InterruptManager 0070                                                ??_Step 0037  
                                              ??_main 004B                                   _bottomButtonTrigger 0DAA  
                      ?_reset_motor_action_if_matches 0070                                __end_of_WDT_Initialize 0C06  
                   _EUSART_DefaultFramingErrorHandler 0000                            _EUSART_OverrunErrorHandler 005D  
                                              _ACTCON 039B                                      ___awdiv@dividend 0029  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 0C0B  
                                              _BORCON 0116                                                i1l2311 0F00  
                                              i1l2303 0EEF                                                i1l1431 0CAB  
                                              i1l1423 0C9E                                                i1l2321 0F0F  
                                              i1l2313 0F04                                                i1l2305 0EF5  
                                              i1l1425 0CA3                                                i1l2323 0F11  
                                              i1l2307 0EF7                                                i1l1427 0CA4  
                                              i1l1419 0C06                                                i1l2261 0C52  
                                              i1l2325 0F15                                                i1l2333 0F1E  
                                              i1l2309 0EFB                                                i1l1429 0CA9  
                                              i1l2351 0F40                                                i1l2335 0F24  
                                              i1l2343 0F2F                                                i1l2327 0F19  
                                              i1l2319 0F09                                                i1l2257 0C3E  
                                              i1l2361 0F5D                                                i1l2353 0F46  
                                              i1l2345 0F35                                                i1l2337 0F2D  
                                              i1l2259 0C43                                                i1l2371 0F6E  
                                              i1l2363 0F66                                                i1l2355 0F4C  
                                              i1l2347 0F3E                                                i1l2381 0FAB  
                                              i1l2373 0F83                                                i1l2365 0F67  
                                              i1l2357 0F53                                                i1l2383 0FB4  
                                              i1l2375 0F98                                                i1l2367 0F6C  
                                              i1l2359 0F58                                                i1l2385 0FBD  
                                              i1l2377 0FA0                                                i1l2379 0FA2  
                                              i1l2651 0017                                                i1l2389 0FD1  
                                              i1l2653 001D                                                i1l2645 0006  
                                              i1l2655 001F                                                i1l2647 000A  
                                              i1l2649 000F                                                i1l3829 0FD9  
                                              u150_27 0F86                                                u151_27 0FCC  
                                        ?_setStepSize 0070                                                u149_27 0F71  
                             _get_stepper_instruction 0BFF                                     ?_get_motor_action 0070  
                                              _OSCCON 0099                                                _PLLRDY 04D6  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                                       setDirection@dir 0020  
                                ?_bottomButtonTrigger 0070                                    ??_get_motor_action 0075  
                                    __end_of_inchDown 0CD1                                __end_ofi1_stepperSleep 0C5D  
                                              ___wmul 0CE4                                             ??___awdiv 002B  
                                              _inchUp 0CD1                                      ___awdiv@quotient 002E  
                                       main@numSteps1 004F                                         main@numSteps2 0051  
                    basicStepperInstruction@stepSize1 0046                      basicStepperInstruction@stepSize2 0047  
                            _get_INTERRUPT_BREAK_FLAG 0BF6                                       ?_WDT_Initialize 0070  
                                   ?_initAvthorStates 0070                                     _SYSTEM_Initialize 0C69  
                             __end_of__initialization 0033                                 ??_bottomButtonTrigger 003D  
                                  ??_initAvthorStates 0020                                    ?_SYSTEM_Initialize 0070  
                                    _topButtonTrigger 0DDF                basicStepperInstruction@stepMultiplier1 0048  
              basicStepperInstruction@stepMultiplier2 0049                                        __pcstackCOMMON 0070  
                            _set_INTERRUPT_BREAK_FLAG 0C2E                                       ?i1_stepperSleep 0070  
                                 ??_SYSTEM_Initialize 0075                                     initAvthorStates@i 0021  
                                       ?_setDirection 0070                               _Avthor_Uart_Instruction 0EEE  
                                      _OPTION_REGbits 0095                       ??_EUSART_SetOverrunErrorHandler 0075  
                           ??_get_stepper_instruction 0075                             __end_of_SYSTEM_Initialize 0C76  
__end_of_get_bellowsHasBeenInchedUpOrDownSinceVenting 0BFC        ??_get_bellowsHasBeenInchedUpOrDownSinceVenting 0075  
       ?_get_bellowsHasBeenInchedUpOrDownSinceVenting 0070          _get_bellowsHasBeenInchedUpOrDownSinceVenting 0BF9  
                                          __pbssBANK0 005B                                  __end_of_EUSART_Write 0C51  
                                          __pmaintext 0516                               _basicStepperInstruction 0037  
                                             ?___wmul 0021                                            __pintentry 0004  
                                             ?_inchUp 0070                                               _BAUDCON 019F  
                                   _sendHapticCommand 07FF                                        ??_setDirection 0075  
                                  ?_sendHapticCommand 0070                                       setStepSize@size 0023  
                                  _reset_motor_action 0C22                                               _OSCTUNE 0098  
                                 ??_sendHapticCommand 0075                              ??_EUSART_SetErrorHandler 0075  
                                   __end_of_calibrate 0DAA                                             ?_inchDown 0070  
                                 ?_reset_motor_action 0070                       __end_of_get_stepper_instruction 0C02  
                                             Step@dir 003C                             __end_of_sendHapticCommand 0800  
                                             ___awdiv 0E8E                                      i1stepperSleep@in 0070  
                                ??_reset_motor_action 0020                             ??_Avthor_Uart_Instruction 0071  
                                             __ptext1 0DDF                                               __ptext2 0C0B  
                                             __ptext3 0E14                                               __ptext4 0C5D  
                                             __ptext5 0C22                                               __ptext6 0D28  
                                             __ptext7 0D51                                               __ptext8 0CD1  
                                             __ptext9 0CBE                                 _OSCILLATOR_Initialize 0C90  
                            ??_PIN_MANAGER_Initialize 0075                            set_INTERRUPT_BREAK_FLAG@in 0021  
                                             clrloop0 0C29                                  end_of_initialization 0033  
                                          ??_inchDown 003D                 __end_of_EUSART_SetOverrunErrorHandler 0C22  
                       _EUSART_SetOverrunErrorHandler 0C1C                                     __end_of_smallVent 0C10  
                           ??_basicStepperInstruction 003D                                     _EUSART_Initialize 0D04  
                                          _moveUntilZ 0D28                                    ?_EUSART_Initialize 0070  
                          ??_get_INTERRUPT_BREAK_FLAG 0075                                             _RCSTAbits 019D  
                                  _EUSART_is_rx_ready 0C06                             topButtonTrigger@rotations 0040  
                                 ??_EUSART_Initialize 0075                                      ??_WDT_Initialize 0075  
                                 ?_EUSART_is_rx_ready 0070                                main@steps_multiplier_1 0055  
                              main@steps_multiplier_2 0057                              __end_of_topButtonTrigger 0E14  
                           __end_of_EUSART_Initialize 0D28                            ??_set_INTERRUPT_BREAK_FLAG 0020  
                                ??_EUSART_is_rx_ready 0070                                sendHapticCommand@input 0021  
                                __end_of_setDirection 0C83                                             _TXSTAbits 019E  
                                    ??i1_stepperSleep 0070        __end_of_get_complex_breaths_instructions_index 0C3D  
            ??_get_complex_breaths_instructions_index 0075               ?_get_complex_breaths_instructions_index 0070  
              _get_complex_breaths_instructions_index 0C35                                         ?_slowStepTest 0070  
                          _EUSART_DefaultErrorHandler 0000                                        __end_of___wmul 0D04  
                                        _EUSART_Write 0C47                                        __end_of_inchUp 0CE4  
                              ?_OSCILLATOR_Initialize 0070                          _breath_counter_for_smallVent 005F  
                     __end_of_basicStepperInstruction 0516                                   start_initialization 0027  
                        bottomButtonTrigger@rotations 0040                           __end_of_bottomButtonTrigger 0DDF  
                                       ??_EUSART_Read 0070                                    Step@haptic_breaths 0036  
                                         ?_moveUntilZ 0070                        ?_EUSART_SetOverrunErrorHandler 0020  
                                      ??_slowStepTest 0024                            _EUSART_FramingErrorHandler 0075  
                                       ?_stepperSleep 0070                                              ??___wmul 0075  
                              _EUSART_SetErrorHandler 0C10                                             Step@i_616 003A  
                                            ??_inchUp 003D                                             Step@size1 0032  
                                           Step@size2 0035                                        i1_EUSART_Write 0C3D  
                                       moveUntilZ@dir 0024                                           __pbssCOMMON 0075  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                       basicStepperInstruction@charIn 0041                                             _calibrate 0D7C  
                                 __end_of_EUSART_Read 0CAD                                             _main$1120 0053  
                              _PIN_MANAGER_Initialize 0CAD                      __end_of_get_INTERRUPT_BREAK_FLAG 0BF9  
                                      ??_stepperSleep 0075                                              ?___awdiv 0027  
                                    _get_motor_action 0BFC                                __end_ofi1_EUSART_Write 0C47  
                                  main@step_size_in_1 0059                                    main@step_size_in_2 005A  
                        ??_INTERRUPT_InterruptManager 0074                              ?_get_stepper_instruction 0070  
                                i1EUSART_Write@txData 0070                                         ??_setStepSize 0021  
                    __end_of_set_INTERRUPT_BREAK_FLAG 0C35                                            ?_calibrate 0070  
                                      ___wmul@product 0025                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0020                                              _LATCbits 010E  
                                           clear_ram0 0C28                                              _PIE1bits 0091  
                                   _eusartRxLastError 0078                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0075                                             _smallVent 0C0B  
                                    _initAvthorStates 0D51                     _EUSART_DefaultOverrunErrorHandler 0000  
                                     ?i1_EUSART_Write 0070                                     ___wmul@multiplier 0021  
                                        _setDirection 0C76                                  __end_of_slowStepTest 0E50  
                                   ?_topButtonTrigger 0070                                           _EUSART_Read 0C9E  
                                      Step@num_steps1 0030                                        Step@num_steps2 0033  
                        _basicStepperInstruction$1121 0042                          _basicStepperInstruction$1122 0044  
                                  ??_topButtonTrigger 003D                                   __end_of_setStepSize 0E8E  
                            ?_Avthor_Uart_Instruction 0070                                            ?_smallVent 0070  
                             ??_OSCILLATOR_Initialize 0075                                   _EUSART_ErrorHandler 005B  
                           ?_get_INTERRUPT_BREAK_FLAG 0070                                  __end_of_stepperSleep 0C90  
                                            __ptext10 0BFF                                              __ptext11 0BFC  
                                            __ptext20 076A                                              __ptext12 0C35  
                                            __ptext21 0E50                                              __ptext13 0BF9  
                                            __ptext30 0C90                                              __ptext22 0C83  
                                            __ptext14 0D7C                                              __ptext31 0D04  
                                            __ptext23 0C76                                              __ptext15 0DAA  
                                            __ptext40 0C3D                                              __ptext32 0C1C  
                                            __ptext24 07FF                                              __ptext16 0037  
                                            __ptext33 0C16                                              __ptext25 0C47  
                                            __ptext17 0C2E                                              __ptext34 0C10  
                                            __ptext26 0BF6                                              __ptext18 0CE4  
                                            __ptext27 0C69                                              __ptext19 0E8E  
                                            __ptext36 0C06                                              __ptext28 0C02  
                                            __ptext37 0C9E                                              __ptext29 0CAD  
                                            __ptext38 0EEE                                              __ptext39 0C51  
         get_complex_breaths_instructions_index@index 0020                                              _inchDown 0CBE  
                            ?_basicStepperInstruction 0070                                           ??_calibrate 0075  
                                        ??_moveUntilZ 0075                       ??_reset_motor_action_if_matches 0075  
                             ?_EUSART_SetErrorHandler 0020         EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                                            int$flags 007E                    __end_of_INTERRUPT_InterruptManager 0025  
                          _INTERRUPT_InterruptManager 0004                 __end_of_EUSART_SetFramingErrorHandler 0C1C  
                       _EUSART_SetFramingErrorHandler 0C16                             ?_set_INTERRUPT_BREAK_FLAG 0070  
                                          _INTCONbits 000B                   reset_motor_action_if_matches@action 0021  
                                  __end_of_moveUntilZ 0D51                                              intlevel1 0000  
                            __end_of_get_motor_action 0BFF                                           _setStepSize 0E50  
                             ?_PIN_MANAGER_Initialize 0070                       __end_of_Avthor_Uart_Instruction 1000  
                      __end_of_EUSART_SetErrorHandler 0C16                                           ??_smallVent 0075  
       EUSART_SetFramingErrorHandler@interruptHandler 0020                                            _UART_RX_in 0077  
                            __end_of_initAvthorStates 0D7C                                    EUSART_Write@txData 0020  
                      __end_of_PIN_MANAGER_Initialize 0CBE                   basicStepperInstruction@numRotations 004A  
